
do_an_chuyen_nganh.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008998  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  08008b38  08008b38  00018b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d10  08008d10  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08008d10  08008d10  00018d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d18  08008d18  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d18  08008d18  00018d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d1c  08008d1c  00018d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08008d20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008bc  20000080  08008da0  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000093c  08008da0  0002093c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014aea  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002738  00000000  00000000  00034b9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a8  00000000  00000000  000372d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010e8  00000000  00000000  00038480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000190cd  00000000  00000000  00039568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000148b9  00000000  00000000  00052635  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009df7d  00000000  00000000  00066eee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00104e6b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000564c  00000000  00000000  00104ec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008b20 	.word	0x08008b20

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	08008b20 	.word	0x08008b20

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_dmul>:
 80002b0:	b570      	push	{r4, r5, r6, lr}
 80002b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002be:	bf1d      	ittte	ne
 80002c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002c4:	ea94 0f0c 	teqne	r4, ip
 80002c8:	ea95 0f0c 	teqne	r5, ip
 80002cc:	f000 f8de 	bleq	800048c <__aeabi_dmul+0x1dc>
 80002d0:	442c      	add	r4, r5
 80002d2:	ea81 0603 	eor.w	r6, r1, r3
 80002d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002e2:	bf18      	it	ne
 80002e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002f0:	d038      	beq.n	8000364 <__aeabi_dmul+0xb4>
 80002f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002f6:	f04f 0500 	mov.w	r5, #0
 80002fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000302:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000306:	f04f 0600 	mov.w	r6, #0
 800030a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800030e:	f09c 0f00 	teq	ip, #0
 8000312:	bf18      	it	ne
 8000314:	f04e 0e01 	orrne.w	lr, lr, #1
 8000318:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800031c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000320:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000324:	d204      	bcs.n	8000330 <__aeabi_dmul+0x80>
 8000326:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800032a:	416d      	adcs	r5, r5
 800032c:	eb46 0606 	adc.w	r6, r6, r6
 8000330:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000334:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000338:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800033c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000340:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000344:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000348:	bf88      	it	hi
 800034a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800034e:	d81e      	bhi.n	800038e <__aeabi_dmul+0xde>
 8000350:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000368:	ea46 0101 	orr.w	r1, r6, r1
 800036c:	ea40 0002 	orr.w	r0, r0, r2
 8000370:	ea81 0103 	eor.w	r1, r1, r3
 8000374:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000378:	bfc2      	ittt	gt
 800037a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800037e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000382:	bd70      	popgt	{r4, r5, r6, pc}
 8000384:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000388:	f04f 0e00 	mov.w	lr, #0
 800038c:	3c01      	subs	r4, #1
 800038e:	f300 80ab 	bgt.w	80004e8 <__aeabi_dmul+0x238>
 8000392:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000396:	bfde      	ittt	le
 8000398:	2000      	movle	r0, #0
 800039a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800039e:	bd70      	pople	{r4, r5, r6, pc}
 80003a0:	f1c4 0400 	rsb	r4, r4, #0
 80003a4:	3c20      	subs	r4, #32
 80003a6:	da35      	bge.n	8000414 <__aeabi_dmul+0x164>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc1b      	bgt.n	80003e4 <__aeabi_dmul+0x134>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0520 	rsb	r5, r4, #32
 80003b4:	fa00 f305 	lsl.w	r3, r0, r5
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f205 	lsl.w	r2, r1, r5
 80003c0:	ea40 0002 	orr.w	r0, r0, r2
 80003c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d0:	fa21 f604 	lsr.w	r6, r1, r4
 80003d4:	eb42 0106 	adc.w	r1, r2, r6
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 040c 	rsb	r4, r4, #12
 80003e8:	f1c4 0520 	rsb	r5, r4, #32
 80003ec:	fa00 f304 	lsl.w	r3, r0, r4
 80003f0:	fa20 f005 	lsr.w	r0, r0, r5
 80003f4:	fa01 f204 	lsl.w	r2, r1, r4
 80003f8:	ea40 0002 	orr.w	r0, r0, r2
 80003fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000400:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000404:	f141 0100 	adc.w	r1, r1, #0
 8000408:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800040c:	bf08      	it	eq
 800040e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f1c4 0520 	rsb	r5, r4, #32
 8000418:	fa00 f205 	lsl.w	r2, r0, r5
 800041c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000420:	fa20 f304 	lsr.w	r3, r0, r4
 8000424:	fa01 f205 	lsl.w	r2, r1, r5
 8000428:	ea43 0302 	orr.w	r3, r3, r2
 800042c:	fa21 f004 	lsr.w	r0, r1, r4
 8000430:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000434:	fa21 f204 	lsr.w	r2, r1, r4
 8000438:	ea20 0002 	bic.w	r0, r0, r2
 800043c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000440:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000444:	bf08      	it	eq
 8000446:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800044a:	bd70      	pop	{r4, r5, r6, pc}
 800044c:	f094 0f00 	teq	r4, #0
 8000450:	d10f      	bne.n	8000472 <__aeabi_dmul+0x1c2>
 8000452:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000456:	0040      	lsls	r0, r0, #1
 8000458:	eb41 0101 	adc.w	r1, r1, r1
 800045c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3c01      	subeq	r4, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1a6>
 8000466:	ea41 0106 	orr.w	r1, r1, r6
 800046a:	f095 0f00 	teq	r5, #0
 800046e:	bf18      	it	ne
 8000470:	4770      	bxne	lr
 8000472:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000476:	0052      	lsls	r2, r2, #1
 8000478:	eb43 0303 	adc.w	r3, r3, r3
 800047c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000480:	bf08      	it	eq
 8000482:	3d01      	subeq	r5, #1
 8000484:	d0f7      	beq.n	8000476 <__aeabi_dmul+0x1c6>
 8000486:	ea43 0306 	orr.w	r3, r3, r6
 800048a:	4770      	bx	lr
 800048c:	ea94 0f0c 	teq	r4, ip
 8000490:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000494:	bf18      	it	ne
 8000496:	ea95 0f0c 	teqne	r5, ip
 800049a:	d00c      	beq.n	80004b6 <__aeabi_dmul+0x206>
 800049c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004a0:	bf18      	it	ne
 80004a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a6:	d1d1      	bne.n	800044c <__aeabi_dmul+0x19c>
 80004a8:	ea81 0103 	eor.w	r1, r1, r3
 80004ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004b0:	f04f 0000 	mov.w	r0, #0
 80004b4:	bd70      	pop	{r4, r5, r6, pc}
 80004b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ba:	bf06      	itte	eq
 80004bc:	4610      	moveq	r0, r2
 80004be:	4619      	moveq	r1, r3
 80004c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004c4:	d019      	beq.n	80004fa <__aeabi_dmul+0x24a>
 80004c6:	ea94 0f0c 	teq	r4, ip
 80004ca:	d102      	bne.n	80004d2 <__aeabi_dmul+0x222>
 80004cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004d0:	d113      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004d2:	ea95 0f0c 	teq	r5, ip
 80004d6:	d105      	bne.n	80004e4 <__aeabi_dmul+0x234>
 80004d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004dc:	bf1c      	itt	ne
 80004de:	4610      	movne	r0, r2
 80004e0:	4619      	movne	r1, r3
 80004e2:	d10a      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004e4:	ea81 0103 	eor.w	r1, r1, r3
 80004e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd70      	pop	{r4, r5, r6, pc}
 80004fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000502:	bd70      	pop	{r4, r5, r6, pc}

08000504 <__aeabi_drsub>:
 8000504:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e002      	b.n	8000510 <__adddf3>
 800050a:	bf00      	nop

0800050c <__aeabi_dsub>:
 800050c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000510 <__adddf3>:
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000516:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800051a:	ea94 0f05 	teq	r4, r5
 800051e:	bf08      	it	eq
 8000520:	ea90 0f02 	teqeq	r0, r2
 8000524:	bf1f      	itttt	ne
 8000526:	ea54 0c00 	orrsne.w	ip, r4, r0
 800052a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800052e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000532:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000536:	f000 80e2 	beq.w	80006fe <__adddf3+0x1ee>
 800053a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800053e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000542:	bfb8      	it	lt
 8000544:	426d      	neglt	r5, r5
 8000546:	dd0c      	ble.n	8000562 <__adddf3+0x52>
 8000548:	442c      	add	r4, r5
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	ea82 0000 	eor.w	r0, r2, r0
 8000556:	ea83 0101 	eor.w	r1, r3, r1
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	2d36      	cmp	r5, #54	; 0x36
 8000564:	bf88      	it	hi
 8000566:	bd30      	pophi	{r4, r5, pc}
 8000568:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800056c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000570:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000574:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000578:	d002      	beq.n	8000580 <__adddf3+0x70>
 800057a:	4240      	negs	r0, r0
 800057c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000580:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000584:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000588:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800058c:	d002      	beq.n	8000594 <__adddf3+0x84>
 800058e:	4252      	negs	r2, r2
 8000590:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000594:	ea94 0f05 	teq	r4, r5
 8000598:	f000 80a7 	beq.w	80006ea <__adddf3+0x1da>
 800059c:	f1a4 0401 	sub.w	r4, r4, #1
 80005a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005a4:	db0d      	blt.n	80005c2 <__adddf3+0xb2>
 80005a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005aa:	fa22 f205 	lsr.w	r2, r2, r5
 80005ae:	1880      	adds	r0, r0, r2
 80005b0:	f141 0100 	adc.w	r1, r1, #0
 80005b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005b8:	1880      	adds	r0, r0, r2
 80005ba:	fa43 f305 	asr.w	r3, r3, r5
 80005be:	4159      	adcs	r1, r3
 80005c0:	e00e      	b.n	80005e0 <__adddf3+0xd0>
 80005c2:	f1a5 0520 	sub.w	r5, r5, #32
 80005c6:	f10e 0e20 	add.w	lr, lr, #32
 80005ca:	2a01      	cmp	r2, #1
 80005cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005d0:	bf28      	it	cs
 80005d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005d6:	fa43 f305 	asr.w	r3, r3, r5
 80005da:	18c0      	adds	r0, r0, r3
 80005dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	d507      	bpl.n	80005f6 <__adddf3+0xe6>
 80005e6:	f04f 0e00 	mov.w	lr, #0
 80005ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005fa:	d31b      	bcc.n	8000634 <__adddf3+0x124>
 80005fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000600:	d30c      	bcc.n	800061c <__adddf3+0x10c>
 8000602:	0849      	lsrs	r1, r1, #1
 8000604:	ea5f 0030 	movs.w	r0, r0, rrx
 8000608:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800060c:	f104 0401 	add.w	r4, r4, #1
 8000610:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000614:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000618:	f080 809a 	bcs.w	8000750 <__adddf3+0x240>
 800061c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	ea41 0105 	orr.w	r1, r1, r5
 8000632:	bd30      	pop	{r4, r5, pc}
 8000634:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000638:	4140      	adcs	r0, r0
 800063a:	eb41 0101 	adc.w	r1, r1, r1
 800063e:	3c01      	subs	r4, #1
 8000640:	bf28      	it	cs
 8000642:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000646:	d2e9      	bcs.n	800061c <__adddf3+0x10c>
 8000648:	f091 0f00 	teq	r1, #0
 800064c:	bf04      	itt	eq
 800064e:	4601      	moveq	r1, r0
 8000650:	2000      	moveq	r0, #0
 8000652:	fab1 f381 	clz	r3, r1
 8000656:	bf08      	it	eq
 8000658:	3320      	addeq	r3, #32
 800065a:	f1a3 030b 	sub.w	r3, r3, #11
 800065e:	f1b3 0220 	subs.w	r2, r3, #32
 8000662:	da0c      	bge.n	800067e <__adddf3+0x16e>
 8000664:	320c      	adds	r2, #12
 8000666:	dd08      	ble.n	800067a <__adddf3+0x16a>
 8000668:	f102 0c14 	add.w	ip, r2, #20
 800066c:	f1c2 020c 	rsb	r2, r2, #12
 8000670:	fa01 f00c 	lsl.w	r0, r1, ip
 8000674:	fa21 f102 	lsr.w	r1, r1, r2
 8000678:	e00c      	b.n	8000694 <__adddf3+0x184>
 800067a:	f102 0214 	add.w	r2, r2, #20
 800067e:	bfd8      	it	le
 8000680:	f1c2 0c20 	rsble	ip, r2, #32
 8000684:	fa01 f102 	lsl.w	r1, r1, r2
 8000688:	fa20 fc0c 	lsr.w	ip, r0, ip
 800068c:	bfdc      	itt	le
 800068e:	ea41 010c 	orrle.w	r1, r1, ip
 8000692:	4090      	lslle	r0, r2
 8000694:	1ae4      	subs	r4, r4, r3
 8000696:	bfa2      	ittt	ge
 8000698:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800069c:	4329      	orrge	r1, r5
 800069e:	bd30      	popge	{r4, r5, pc}
 80006a0:	ea6f 0404 	mvn.w	r4, r4
 80006a4:	3c1f      	subs	r4, #31
 80006a6:	da1c      	bge.n	80006e2 <__adddf3+0x1d2>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc0e      	bgt.n	80006ca <__adddf3+0x1ba>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0220 	rsb	r2, r4, #32
 80006b4:	fa20 f004 	lsr.w	r0, r0, r4
 80006b8:	fa01 f302 	lsl.w	r3, r1, r2
 80006bc:	ea40 0003 	orr.w	r0, r0, r3
 80006c0:	fa21 f304 	lsr.w	r3, r1, r4
 80006c4:	ea45 0103 	orr.w	r1, r5, r3
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f1c4 040c 	rsb	r4, r4, #12
 80006ce:	f1c4 0220 	rsb	r2, r4, #32
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 f304 	lsl.w	r3, r1, r4
 80006da:	ea40 0003 	orr.w	r0, r0, r3
 80006de:	4629      	mov	r1, r5
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	fa21 f004 	lsr.w	r0, r1, r4
 80006e6:	4629      	mov	r1, r5
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	f094 0f00 	teq	r4, #0
 80006ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006f2:	bf06      	itte	eq
 80006f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006f8:	3401      	addeq	r4, #1
 80006fa:	3d01      	subne	r5, #1
 80006fc:	e74e      	b.n	800059c <__adddf3+0x8c>
 80006fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000702:	bf18      	it	ne
 8000704:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000708:	d029      	beq.n	800075e <__adddf3+0x24e>
 800070a:	ea94 0f05 	teq	r4, r5
 800070e:	bf08      	it	eq
 8000710:	ea90 0f02 	teqeq	r0, r2
 8000714:	d005      	beq.n	8000722 <__adddf3+0x212>
 8000716:	ea54 0c00 	orrs.w	ip, r4, r0
 800071a:	bf04      	itt	eq
 800071c:	4619      	moveq	r1, r3
 800071e:	4610      	moveq	r0, r2
 8000720:	bd30      	pop	{r4, r5, pc}
 8000722:	ea91 0f03 	teq	r1, r3
 8000726:	bf1e      	ittt	ne
 8000728:	2100      	movne	r1, #0
 800072a:	2000      	movne	r0, #0
 800072c:	bd30      	popne	{r4, r5, pc}
 800072e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000732:	d105      	bne.n	8000740 <__adddf3+0x230>
 8000734:	0040      	lsls	r0, r0, #1
 8000736:	4149      	adcs	r1, r1
 8000738:	bf28      	it	cs
 800073a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800073e:	bd30      	pop	{r4, r5, pc}
 8000740:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000744:	bf3c      	itt	cc
 8000746:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800074a:	bd30      	popcc	{r4, r5, pc}
 800074c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000750:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000754:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd30      	pop	{r4, r5, pc}
 800075e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000762:	bf1a      	itte	ne
 8000764:	4619      	movne	r1, r3
 8000766:	4610      	movne	r0, r2
 8000768:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800076c:	bf1c      	itt	ne
 800076e:	460b      	movne	r3, r1
 8000770:	4602      	movne	r2, r0
 8000772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000776:	bf06      	itte	eq
 8000778:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800077c:	ea91 0f03 	teqeq	r1, r3
 8000780:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000784:	bd30      	pop	{r4, r5, pc}
 8000786:	bf00      	nop

08000788 <__aeabi_ui2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f04f 0500 	mov.w	r5, #0
 80007a0:	f04f 0100 	mov.w	r1, #0
 80007a4:	e750      	b.n	8000648 <__adddf3+0x138>
 80007a6:	bf00      	nop

080007a8 <__aeabi_i2d>:
 80007a8:	f090 0f00 	teq	r0, #0
 80007ac:	bf04      	itt	eq
 80007ae:	2100      	moveq	r1, #0
 80007b0:	4770      	bxeq	lr
 80007b2:	b530      	push	{r4, r5, lr}
 80007b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007c0:	bf48      	it	mi
 80007c2:	4240      	negmi	r0, r0
 80007c4:	f04f 0100 	mov.w	r1, #0
 80007c8:	e73e      	b.n	8000648 <__adddf3+0x138>
 80007ca:	bf00      	nop

080007cc <__aeabi_f2d>:
 80007cc:	0042      	lsls	r2, r0, #1
 80007ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007da:	bf1f      	itttt	ne
 80007dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007e8:	4770      	bxne	lr
 80007ea:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ee:	bf08      	it	eq
 80007f0:	4770      	bxeq	lr
 80007f2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007f6:	bf04      	itt	eq
 80007f8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007fc:	4770      	bxeq	lr
 80007fe:	b530      	push	{r4, r5, lr}
 8000800:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000804:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000808:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800080c:	e71c      	b.n	8000648 <__adddf3+0x138>
 800080e:	bf00      	nop

08000810 <__aeabi_ul2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f04f 0500 	mov.w	r5, #0
 800081e:	e00a      	b.n	8000836 <__aeabi_l2d+0x16>

08000820 <__aeabi_l2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800082e:	d502      	bpl.n	8000836 <__aeabi_l2d+0x16>
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800083a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800083e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000842:	f43f aed8 	beq.w	80005f6 <__adddf3+0xe6>
 8000846:	f04f 0203 	mov.w	r2, #3
 800084a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800084e:	bf18      	it	ne
 8000850:	3203      	addne	r2, #3
 8000852:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000856:	bf18      	it	ne
 8000858:	3203      	addne	r2, #3
 800085a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800085e:	f1c2 0320 	rsb	r3, r2, #32
 8000862:	fa00 fc03 	lsl.w	ip, r0, r3
 8000866:	fa20 f002 	lsr.w	r0, r0, r2
 800086a:	fa01 fe03 	lsl.w	lr, r1, r3
 800086e:	ea40 000e 	orr.w	r0, r0, lr
 8000872:	fa21 f102 	lsr.w	r1, r1, r2
 8000876:	4414      	add	r4, r2
 8000878:	e6bd      	b.n	80005f6 <__adddf3+0xe6>
 800087a:	bf00      	nop

0800087c <__aeabi_d2uiz>:
 800087c:	004a      	lsls	r2, r1, #1
 800087e:	d211      	bcs.n	80008a4 <__aeabi_d2uiz+0x28>
 8000880:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000884:	d211      	bcs.n	80008aa <__aeabi_d2uiz+0x2e>
 8000886:	d50d      	bpl.n	80008a4 <__aeabi_d2uiz+0x28>
 8000888:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800088c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000890:	d40e      	bmi.n	80008b0 <__aeabi_d2uiz+0x34>
 8000892:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000896:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800089a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800089e:	fa23 f002 	lsr.w	r0, r3, r2
 80008a2:	4770      	bx	lr
 80008a4:	f04f 0000 	mov.w	r0, #0
 80008a8:	4770      	bx	lr
 80008aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008ae:	d102      	bne.n	80008b6 <__aeabi_d2uiz+0x3a>
 80008b0:	f04f 30ff 	mov.w	r0, #4294967295
 80008b4:	4770      	bx	lr
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	4770      	bx	lr

080008bc <__aeabi_uldivmod>:
 80008bc:	b953      	cbnz	r3, 80008d4 <__aeabi_uldivmod+0x18>
 80008be:	b94a      	cbnz	r2, 80008d4 <__aeabi_uldivmod+0x18>
 80008c0:	2900      	cmp	r1, #0
 80008c2:	bf08      	it	eq
 80008c4:	2800      	cmpeq	r0, #0
 80008c6:	bf1c      	itt	ne
 80008c8:	f04f 31ff 	movne.w	r1, #4294967295
 80008cc:	f04f 30ff 	movne.w	r0, #4294967295
 80008d0:	f000 b96e 	b.w	8000bb0 <__aeabi_idiv0>
 80008d4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008d8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008dc:	f000 f806 	bl	80008ec <__udivmoddi4>
 80008e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008e8:	b004      	add	sp, #16
 80008ea:	4770      	bx	lr

080008ec <__udivmoddi4>:
 80008ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008f0:	9d08      	ldr	r5, [sp, #32]
 80008f2:	4604      	mov	r4, r0
 80008f4:	468c      	mov	ip, r1
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	f040 8083 	bne.w	8000a02 <__udivmoddi4+0x116>
 80008fc:	428a      	cmp	r2, r1
 80008fe:	4617      	mov	r7, r2
 8000900:	d947      	bls.n	8000992 <__udivmoddi4+0xa6>
 8000902:	fab2 f282 	clz	r2, r2
 8000906:	b142      	cbz	r2, 800091a <__udivmoddi4+0x2e>
 8000908:	f1c2 0020 	rsb	r0, r2, #32
 800090c:	fa24 f000 	lsr.w	r0, r4, r0
 8000910:	4091      	lsls	r1, r2
 8000912:	4097      	lsls	r7, r2
 8000914:	ea40 0c01 	orr.w	ip, r0, r1
 8000918:	4094      	lsls	r4, r2
 800091a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800091e:	0c23      	lsrs	r3, r4, #16
 8000920:	fbbc f6f8 	udiv	r6, ip, r8
 8000924:	fa1f fe87 	uxth.w	lr, r7
 8000928:	fb08 c116 	mls	r1, r8, r6, ip
 800092c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000930:	fb06 f10e 	mul.w	r1, r6, lr
 8000934:	4299      	cmp	r1, r3
 8000936:	d909      	bls.n	800094c <__udivmoddi4+0x60>
 8000938:	18fb      	adds	r3, r7, r3
 800093a:	f106 30ff 	add.w	r0, r6, #4294967295
 800093e:	f080 8119 	bcs.w	8000b74 <__udivmoddi4+0x288>
 8000942:	4299      	cmp	r1, r3
 8000944:	f240 8116 	bls.w	8000b74 <__udivmoddi4+0x288>
 8000948:	3e02      	subs	r6, #2
 800094a:	443b      	add	r3, r7
 800094c:	1a5b      	subs	r3, r3, r1
 800094e:	b2a4      	uxth	r4, r4
 8000950:	fbb3 f0f8 	udiv	r0, r3, r8
 8000954:	fb08 3310 	mls	r3, r8, r0, r3
 8000958:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800095c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000960:	45a6      	cmp	lr, r4
 8000962:	d909      	bls.n	8000978 <__udivmoddi4+0x8c>
 8000964:	193c      	adds	r4, r7, r4
 8000966:	f100 33ff 	add.w	r3, r0, #4294967295
 800096a:	f080 8105 	bcs.w	8000b78 <__udivmoddi4+0x28c>
 800096e:	45a6      	cmp	lr, r4
 8000970:	f240 8102 	bls.w	8000b78 <__udivmoddi4+0x28c>
 8000974:	3802      	subs	r0, #2
 8000976:	443c      	add	r4, r7
 8000978:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800097c:	eba4 040e 	sub.w	r4, r4, lr
 8000980:	2600      	movs	r6, #0
 8000982:	b11d      	cbz	r5, 800098c <__udivmoddi4+0xa0>
 8000984:	40d4      	lsrs	r4, r2
 8000986:	2300      	movs	r3, #0
 8000988:	e9c5 4300 	strd	r4, r3, [r5]
 800098c:	4631      	mov	r1, r6
 800098e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000992:	b902      	cbnz	r2, 8000996 <__udivmoddi4+0xaa>
 8000994:	deff      	udf	#255	; 0xff
 8000996:	fab2 f282 	clz	r2, r2
 800099a:	2a00      	cmp	r2, #0
 800099c:	d150      	bne.n	8000a40 <__udivmoddi4+0x154>
 800099e:	1bcb      	subs	r3, r1, r7
 80009a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009a4:	fa1f f887 	uxth.w	r8, r7
 80009a8:	2601      	movs	r6, #1
 80009aa:	fbb3 fcfe 	udiv	ip, r3, lr
 80009ae:	0c21      	lsrs	r1, r4, #16
 80009b0:	fb0e 331c 	mls	r3, lr, ip, r3
 80009b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009b8:	fb08 f30c 	mul.w	r3, r8, ip
 80009bc:	428b      	cmp	r3, r1
 80009be:	d907      	bls.n	80009d0 <__udivmoddi4+0xe4>
 80009c0:	1879      	adds	r1, r7, r1
 80009c2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80009c6:	d202      	bcs.n	80009ce <__udivmoddi4+0xe2>
 80009c8:	428b      	cmp	r3, r1
 80009ca:	f200 80e9 	bhi.w	8000ba0 <__udivmoddi4+0x2b4>
 80009ce:	4684      	mov	ip, r0
 80009d0:	1ac9      	subs	r1, r1, r3
 80009d2:	b2a3      	uxth	r3, r4
 80009d4:	fbb1 f0fe 	udiv	r0, r1, lr
 80009d8:	fb0e 1110 	mls	r1, lr, r0, r1
 80009dc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80009e0:	fb08 f800 	mul.w	r8, r8, r0
 80009e4:	45a0      	cmp	r8, r4
 80009e6:	d907      	bls.n	80009f8 <__udivmoddi4+0x10c>
 80009e8:	193c      	adds	r4, r7, r4
 80009ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80009ee:	d202      	bcs.n	80009f6 <__udivmoddi4+0x10a>
 80009f0:	45a0      	cmp	r8, r4
 80009f2:	f200 80d9 	bhi.w	8000ba8 <__udivmoddi4+0x2bc>
 80009f6:	4618      	mov	r0, r3
 80009f8:	eba4 0408 	sub.w	r4, r4, r8
 80009fc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000a00:	e7bf      	b.n	8000982 <__udivmoddi4+0x96>
 8000a02:	428b      	cmp	r3, r1
 8000a04:	d909      	bls.n	8000a1a <__udivmoddi4+0x12e>
 8000a06:	2d00      	cmp	r5, #0
 8000a08:	f000 80b1 	beq.w	8000b6e <__udivmoddi4+0x282>
 8000a0c:	2600      	movs	r6, #0
 8000a0e:	e9c5 0100 	strd	r0, r1, [r5]
 8000a12:	4630      	mov	r0, r6
 8000a14:	4631      	mov	r1, r6
 8000a16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a1a:	fab3 f683 	clz	r6, r3
 8000a1e:	2e00      	cmp	r6, #0
 8000a20:	d14a      	bne.n	8000ab8 <__udivmoddi4+0x1cc>
 8000a22:	428b      	cmp	r3, r1
 8000a24:	d302      	bcc.n	8000a2c <__udivmoddi4+0x140>
 8000a26:	4282      	cmp	r2, r0
 8000a28:	f200 80b8 	bhi.w	8000b9c <__udivmoddi4+0x2b0>
 8000a2c:	1a84      	subs	r4, r0, r2
 8000a2e:	eb61 0103 	sbc.w	r1, r1, r3
 8000a32:	2001      	movs	r0, #1
 8000a34:	468c      	mov	ip, r1
 8000a36:	2d00      	cmp	r5, #0
 8000a38:	d0a8      	beq.n	800098c <__udivmoddi4+0xa0>
 8000a3a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000a3e:	e7a5      	b.n	800098c <__udivmoddi4+0xa0>
 8000a40:	f1c2 0320 	rsb	r3, r2, #32
 8000a44:	fa20 f603 	lsr.w	r6, r0, r3
 8000a48:	4097      	lsls	r7, r2
 8000a4a:	fa01 f002 	lsl.w	r0, r1, r2
 8000a4e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a52:	40d9      	lsrs	r1, r3
 8000a54:	4330      	orrs	r0, r6
 8000a56:	0c03      	lsrs	r3, r0, #16
 8000a58:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a5c:	fa1f f887 	uxth.w	r8, r7
 8000a60:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a68:	fb06 f108 	mul.w	r1, r6, r8
 8000a6c:	4299      	cmp	r1, r3
 8000a6e:	fa04 f402 	lsl.w	r4, r4, r2
 8000a72:	d909      	bls.n	8000a88 <__udivmoddi4+0x19c>
 8000a74:	18fb      	adds	r3, r7, r3
 8000a76:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a7a:	f080 808d 	bcs.w	8000b98 <__udivmoddi4+0x2ac>
 8000a7e:	4299      	cmp	r1, r3
 8000a80:	f240 808a 	bls.w	8000b98 <__udivmoddi4+0x2ac>
 8000a84:	3e02      	subs	r6, #2
 8000a86:	443b      	add	r3, r7
 8000a88:	1a5b      	subs	r3, r3, r1
 8000a8a:	b281      	uxth	r1, r0
 8000a8c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a90:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a98:	fb00 f308 	mul.w	r3, r0, r8
 8000a9c:	428b      	cmp	r3, r1
 8000a9e:	d907      	bls.n	8000ab0 <__udivmoddi4+0x1c4>
 8000aa0:	1879      	adds	r1, r7, r1
 8000aa2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000aa6:	d273      	bcs.n	8000b90 <__udivmoddi4+0x2a4>
 8000aa8:	428b      	cmp	r3, r1
 8000aaa:	d971      	bls.n	8000b90 <__udivmoddi4+0x2a4>
 8000aac:	3802      	subs	r0, #2
 8000aae:	4439      	add	r1, r7
 8000ab0:	1acb      	subs	r3, r1, r3
 8000ab2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ab6:	e778      	b.n	80009aa <__udivmoddi4+0xbe>
 8000ab8:	f1c6 0c20 	rsb	ip, r6, #32
 8000abc:	fa03 f406 	lsl.w	r4, r3, r6
 8000ac0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ac4:	431c      	orrs	r4, r3
 8000ac6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000aca:	fa01 f306 	lsl.w	r3, r1, r6
 8000ace:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000ad2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ad6:	431f      	orrs	r7, r3
 8000ad8:	0c3b      	lsrs	r3, r7, #16
 8000ada:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ade:	fa1f f884 	uxth.w	r8, r4
 8000ae2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ae6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000aea:	fb09 fa08 	mul.w	sl, r9, r8
 8000aee:	458a      	cmp	sl, r1
 8000af0:	fa02 f206 	lsl.w	r2, r2, r6
 8000af4:	fa00 f306 	lsl.w	r3, r0, r6
 8000af8:	d908      	bls.n	8000b0c <__udivmoddi4+0x220>
 8000afa:	1861      	adds	r1, r4, r1
 8000afc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000b00:	d248      	bcs.n	8000b94 <__udivmoddi4+0x2a8>
 8000b02:	458a      	cmp	sl, r1
 8000b04:	d946      	bls.n	8000b94 <__udivmoddi4+0x2a8>
 8000b06:	f1a9 0902 	sub.w	r9, r9, #2
 8000b0a:	4421      	add	r1, r4
 8000b0c:	eba1 010a 	sub.w	r1, r1, sl
 8000b10:	b2bf      	uxth	r7, r7
 8000b12:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b16:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b1a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000b1e:	fb00 f808 	mul.w	r8, r0, r8
 8000b22:	45b8      	cmp	r8, r7
 8000b24:	d907      	bls.n	8000b36 <__udivmoddi4+0x24a>
 8000b26:	19e7      	adds	r7, r4, r7
 8000b28:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b2c:	d22e      	bcs.n	8000b8c <__udivmoddi4+0x2a0>
 8000b2e:	45b8      	cmp	r8, r7
 8000b30:	d92c      	bls.n	8000b8c <__udivmoddi4+0x2a0>
 8000b32:	3802      	subs	r0, #2
 8000b34:	4427      	add	r7, r4
 8000b36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b3a:	eba7 0708 	sub.w	r7, r7, r8
 8000b3e:	fba0 8902 	umull	r8, r9, r0, r2
 8000b42:	454f      	cmp	r7, r9
 8000b44:	46c6      	mov	lr, r8
 8000b46:	4649      	mov	r1, r9
 8000b48:	d31a      	bcc.n	8000b80 <__udivmoddi4+0x294>
 8000b4a:	d017      	beq.n	8000b7c <__udivmoddi4+0x290>
 8000b4c:	b15d      	cbz	r5, 8000b66 <__udivmoddi4+0x27a>
 8000b4e:	ebb3 020e 	subs.w	r2, r3, lr
 8000b52:	eb67 0701 	sbc.w	r7, r7, r1
 8000b56:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b5a:	40f2      	lsrs	r2, r6
 8000b5c:	ea4c 0202 	orr.w	r2, ip, r2
 8000b60:	40f7      	lsrs	r7, r6
 8000b62:	e9c5 2700 	strd	r2, r7, [r5]
 8000b66:	2600      	movs	r6, #0
 8000b68:	4631      	mov	r1, r6
 8000b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6e:	462e      	mov	r6, r5
 8000b70:	4628      	mov	r0, r5
 8000b72:	e70b      	b.n	800098c <__udivmoddi4+0xa0>
 8000b74:	4606      	mov	r6, r0
 8000b76:	e6e9      	b.n	800094c <__udivmoddi4+0x60>
 8000b78:	4618      	mov	r0, r3
 8000b7a:	e6fd      	b.n	8000978 <__udivmoddi4+0x8c>
 8000b7c:	4543      	cmp	r3, r8
 8000b7e:	d2e5      	bcs.n	8000b4c <__udivmoddi4+0x260>
 8000b80:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b84:	eb69 0104 	sbc.w	r1, r9, r4
 8000b88:	3801      	subs	r0, #1
 8000b8a:	e7df      	b.n	8000b4c <__udivmoddi4+0x260>
 8000b8c:	4608      	mov	r0, r1
 8000b8e:	e7d2      	b.n	8000b36 <__udivmoddi4+0x24a>
 8000b90:	4660      	mov	r0, ip
 8000b92:	e78d      	b.n	8000ab0 <__udivmoddi4+0x1c4>
 8000b94:	4681      	mov	r9, r0
 8000b96:	e7b9      	b.n	8000b0c <__udivmoddi4+0x220>
 8000b98:	4666      	mov	r6, ip
 8000b9a:	e775      	b.n	8000a88 <__udivmoddi4+0x19c>
 8000b9c:	4630      	mov	r0, r6
 8000b9e:	e74a      	b.n	8000a36 <__udivmoddi4+0x14a>
 8000ba0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ba4:	4439      	add	r1, r7
 8000ba6:	e713      	b.n	80009d0 <__udivmoddi4+0xe4>
 8000ba8:	3802      	subs	r0, #2
 8000baa:	443c      	add	r4, r7
 8000bac:	e724      	b.n	80009f8 <__udivmoddi4+0x10c>
 8000bae:	bf00      	nop

08000bb0 <__aeabi_idiv0>:
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <__io_putchar>:
     #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
     #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart6,(uint8_t *)&ch,1,0xFFFF); //pc
 8000bbc:	1d39      	adds	r1, r7, #4
 8000bbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	4803      	ldr	r0, [pc, #12]	; (8000bd4 <__io_putchar+0x20>)
 8000bc6:	f005 fcf6 	bl	80065b6 <HAL_UART_Transmit>
	return ch;
 8000bca:	687b      	ldr	r3, [r7, #4]
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20000884 	.word	0x20000884

08000bd8 <bcdToDec>:
uint8_t decToBcd(uint8_t t) 						//đổi số thập phân bình thư�?ng thành số thập phân được mã hóa nhị phân
{
  return (t/10)<<4 | (t%10);
}
uint8_t bcdToDec(uint8_t t)						//đổi số thập phân được mã hóa nhị phân thành số thập phân bình thư�?ng
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	71fb      	strb	r3, [r7, #7]
  return (t>>4)*10 + (t&0x0f);
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	091b      	lsrs	r3, r3, #4
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	461a      	mov	r2, r3
 8000bea:	0092      	lsls	r2, r2, #2
 8000bec:	4413      	add	r3, r2
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	b2da      	uxtb	r2, r3
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	f003 030f 	and.w	r3, r3, #15
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	4413      	add	r3, r2
 8000bfc:	b2db      	uxtb	r3, r3
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
	...

08000c0c <Get_Time>:
	set_time1[6] = decToBcd(year);

	HAL_I2C_Mem_Write(&hi2c3, DS3231_ADDRESS, 0x00, 1, set_time1, 7, 1000);
}
void Get_Time (void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af04      	add	r7, sp, #16
	uint8_t get_time[7];
	HAL_I2C_Mem_Read(&hi2c3, DS3231_ADDRESS, 0x00, 1, get_time, 7, 1000);
 8000c12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c16:	9302      	str	r3, [sp, #8]
 8000c18:	2307      	movs	r3, #7
 8000c1a:	9301      	str	r3, [sp, #4]
 8000c1c:	463b      	mov	r3, r7
 8000c1e:	9300      	str	r3, [sp, #0]
 8000c20:	2301      	movs	r3, #1
 8000c22:	2200      	movs	r2, #0
 8000c24:	21d0      	movs	r1, #208	; 0xd0
 8000c26:	481f      	ldr	r0, [pc, #124]	; (8000ca4 <Get_Time+0x98>)
 8000c28:	f003 fc7a 	bl	8004520 <HAL_I2C_Mem_Read>
	time1.seconds = bcdToDec(get_time[0]);
 8000c2c:	783b      	ldrb	r3, [r7, #0]
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff ffd2 	bl	8000bd8 <bcdToDec>
 8000c34:	4603      	mov	r3, r0
 8000c36:	461a      	mov	r2, r3
 8000c38:	4b1b      	ldr	r3, [pc, #108]	; (8000ca8 <Get_Time+0x9c>)
 8000c3a:	701a      	strb	r2, [r3, #0]
	time1.minutes = bcdToDec(get_time[1]);
 8000c3c:	787b      	ldrb	r3, [r7, #1]
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff ffca 	bl	8000bd8 <bcdToDec>
 8000c44:	4603      	mov	r3, r0
 8000c46:	461a      	mov	r2, r3
 8000c48:	4b17      	ldr	r3, [pc, #92]	; (8000ca8 <Get_Time+0x9c>)
 8000c4a:	705a      	strb	r2, [r3, #1]
	time1.hour = bcdToDec(get_time[2]);
 8000c4c:	78bb      	ldrb	r3, [r7, #2]
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f7ff ffc2 	bl	8000bd8 <bcdToDec>
 8000c54:	4603      	mov	r3, r0
 8000c56:	461a      	mov	r2, r3
 8000c58:	4b13      	ldr	r3, [pc, #76]	; (8000ca8 <Get_Time+0x9c>)
 8000c5a:	709a      	strb	r2, [r3, #2]
	time1.day = bcdToDec(get_time[3]);
 8000c5c:	78fb      	ldrb	r3, [r7, #3]
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff ffba 	bl	8000bd8 <bcdToDec>
 8000c64:	4603      	mov	r3, r0
 8000c66:	461a      	mov	r2, r3
 8000c68:	4b0f      	ldr	r3, [pc, #60]	; (8000ca8 <Get_Time+0x9c>)
 8000c6a:	70da      	strb	r2, [r3, #3]
	time1.date = bcdToDec(get_time[4]);
 8000c6c:	793b      	ldrb	r3, [r7, #4]
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff ffb2 	bl	8000bd8 <bcdToDec>
 8000c74:	4603      	mov	r3, r0
 8000c76:	461a      	mov	r2, r3
 8000c78:	4b0b      	ldr	r3, [pc, #44]	; (8000ca8 <Get_Time+0x9c>)
 8000c7a:	711a      	strb	r2, [r3, #4]
	time1.month = bcdToDec(get_time[5]);
 8000c7c:	797b      	ldrb	r3, [r7, #5]
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff ffaa 	bl	8000bd8 <bcdToDec>
 8000c84:	4603      	mov	r3, r0
 8000c86:	461a      	mov	r2, r3
 8000c88:	4b07      	ldr	r3, [pc, #28]	; (8000ca8 <Get_Time+0x9c>)
 8000c8a:	715a      	strb	r2, [r3, #5]
	time1.year = bcdToDec(get_time[6]);
 8000c8c:	79bb      	ldrb	r3, [r7, #6]
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff ffa2 	bl	8000bd8 <bcdToDec>
 8000c94:	4603      	mov	r3, r0
 8000c96:	461a      	mov	r2, r3
 8000c98:	4b03      	ldr	r3, [pc, #12]	; (8000ca8 <Get_Time+0x9c>)
 8000c9a:	719a      	strb	r2, [r3, #6]
}
 8000c9c:	bf00      	nop
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	20000130 	.word	0x20000130
 8000ca8:	200007b0 	.word	0x200007b0

08000cac <clearBuffer>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void clearBuffer()
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
	for(int i = 0 ; i < 100 ; i++)
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	607b      	str	r3, [r7, #4]
 8000cb6:	e007      	b.n	8000cc8 <clearBuffer+0x1c>
							{
								buffer[i] = 0 ;
 8000cb8:	4a0c      	ldr	r2, [pc, #48]	; (8000cec <clearBuffer+0x40>)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	701a      	strb	r2, [r3, #0]
	for(int i = 0 ; i < 100 ; i++)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2b63      	cmp	r3, #99	; 0x63
 8000ccc:	ddf4      	ble.n	8000cb8 <clearBuffer+0xc>
							}
					y=1;
 8000cce:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <clearBuffer+0x44>)
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	601a      	str	r2, [r3, #0]
					key =0;
 8000cd4:	4b07      	ldr	r3, [pc, #28]	; (8000cf4 <clearBuffer+0x48>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	701a      	strb	r2, [r3, #0]
							lcd_clear ();
 8000cda:	f006 fd19 	bl	8007710 <lcd_clear>
							keypad();
 8000cde:	f000 f849 	bl	8000d74 <keypad>
}
 8000ce2:	bf00      	nop
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	2000074c 	.word	0x2000074c
 8000cf0:	20000000 	.word	0x20000000
 8000cf4:	2000081f 	.word	0x2000081f

08000cf8 <CheckPass>:
void CheckPass  ()
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
	int compare = 1;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	607b      	str	r3, [r7, #4]
	compare = strcmp (buffer, pass);
 8000d02:	4917      	ldr	r1, [pc, #92]	; (8000d60 <CheckPass+0x68>)
 8000d04:	4817      	ldr	r0, [pc, #92]	; (8000d64 <CheckPass+0x6c>)
 8000d06:	f7ff fa6b 	bl	80001e0 <strcmp>
 8000d0a:	6078      	str	r0, [r7, #4]
	if(compare == 0)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d113      	bne.n	8000d3a <CheckPass+0x42>
	{
		lcd_clear();
 8000d12:	f006 fcfd 	bl	8007710 <lcd_clear>
		lcd_put_cur(1,3);
 8000d16:	2103      	movs	r1, #3
 8000d18:	2001      	movs	r0, #1
 8000d1a:	f006 fd10 	bl	800773e <lcd_put_cur>
		lcd_send_string ("Open Door");
 8000d1e:	4812      	ldr	r0, [pc, #72]	; (8000d68 <CheckPass+0x70>)
 8000d20:	f006 fd69 	bl	80077f6 <lcd_send_string>
		HAL_Delay(1000);
 8000d24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d28:	f001 fec8 	bl	8002abc <HAL_Delay>
		clearBuffer();
 8000d2c:	f7ff ffbe 	bl	8000cac <clearBuffer>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 125);
 8000d30:	4b0e      	ldr	r3, [pc, #56]	; (8000d6c <CheckPass+0x74>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	227d      	movs	r2, #125	; 0x7d
 8000d36:	63da      	str	r2, [r3, #60]	; 0x3c
		lcd_send_string ("ERORR");
		HAL_Delay(1000);
		clearBuffer();

	}
}
 8000d38:	e00e      	b.n	8000d58 <CheckPass+0x60>
		lcd_clear();
 8000d3a:	f006 fce9 	bl	8007710 <lcd_clear>
		lcd_put_cur(1,5);
 8000d3e:	2105      	movs	r1, #5
 8000d40:	2001      	movs	r0, #1
 8000d42:	f006 fcfc 	bl	800773e <lcd_put_cur>
		lcd_send_string ("ERORR");
 8000d46:	480a      	ldr	r0, [pc, #40]	; (8000d70 <CheckPass+0x78>)
 8000d48:	f006 fd55 	bl	80077f6 <lcd_send_string>
		HAL_Delay(1000);
 8000d4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d50:	f001 feb4 	bl	8002abc <HAL_Delay>
		clearBuffer();
 8000d54:	f7ff ffaa 	bl	8000cac <clearBuffer>
}
 8000d58:	bf00      	nop
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	20000004 	.word	0x20000004
 8000d64:	2000074c 	.word	0x2000074c
 8000d68:	08008b38 	.word	0x08008b38
 8000d6c:	200002d4 	.word	0x200002d4
 8000d70:	08008b44 	.word	0x08008b44

08000d74 <keypad>:
char keypad()
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin  (GPIOB,GPIO_PIN_5,GPIO_PIN_RESET);   // Kéo R1 xuống thấp
 8000d78:	2200      	movs	r2, #0
 8000d7a:	2120      	movs	r1, #32
 8000d7c:	4888      	ldr	r0, [pc, #544]	; (8000fa0 <keypad+0x22c>)
 8000d7e:	f003 f973 	bl	8004068 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin  (GPIOB,GPIO_PIN_3,GPIO_PIN_SET);   // Kéo R2 cao
 8000d82:	2201      	movs	r2, #1
 8000d84:	2108      	movs	r1, #8
 8000d86:	4886      	ldr	r0, [pc, #536]	; (8000fa0 <keypad+0x22c>)
 8000d88:	f003 f96e 	bl	8004068 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin  (GPIOD,GPIO_PIN_6,GPIO_PIN_SET);   // Kéo R3 cao
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	2140      	movs	r1, #64	; 0x40
 8000d90:	4884      	ldr	r0, [pc, #528]	; (8000fa4 <keypad+0x230>)
 8000d92:	f003 f969 	bl	8004068 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin  (GPIOD,GPIO_PIN_4,GPIO_PIN_SET);   // Kéo R4 cao
 8000d96:	2201      	movs	r2, #1
 8000d98:	2110      	movs	r1, #16
 8000d9a:	4882      	ldr	r0, [pc, #520]	; (8000fa4 <keypad+0x230>)
 8000d9c:	f003 f964 	bl	8004068 <HAL_GPIO_WritePin>

	if  ( (HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_2))==0)    // nếu Col 1 thấp
 8000da0:	2104      	movs	r1, #4
 8000da2:	4880      	ldr	r0, [pc, #512]	; (8000fa4 <keypad+0x230>)
 8000da4:	f003 f948 	bl	8004038 <HAL_GPIO_ReadPin>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d101      	bne.n	8000db2 <keypad+0x3e>
	{
		return  '1' ;
 8000dae:	2331      	movs	r3, #49	; 0x31
 8000db0:	e0f4      	b.n	8000f9c <keypad+0x228>
	}

	if  (  (HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0))==0)    // nếu Col 2 thấp
 8000db2:	2101      	movs	r1, #1
 8000db4:	487b      	ldr	r0, [pc, #492]	; (8000fa4 <keypad+0x230>)
 8000db6:	f003 f93f 	bl	8004038 <HAL_GPIO_ReadPin>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d101      	bne.n	8000dc4 <keypad+0x50>
	{
		return  '2';
 8000dc0:	2332      	movs	r3, #50	; 0x32
 8000dc2:	e0eb      	b.n	8000f9c <keypad+0x228>
	}

	if  (  (HAL_GPIO_ReadPin  (GPIOC,GPIO_PIN_11))==0)    // nếu Col 3 thấp
 8000dc4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dc8:	4877      	ldr	r0, [pc, #476]	; (8000fa8 <keypad+0x234>)
 8000dca:	f003 f935 	bl	8004038 <HAL_GPIO_ReadPin>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d101      	bne.n	8000dd8 <keypad+0x64>
	{
		return  '3';
 8000dd4:	2333      	movs	r3, #51	; 0x33
 8000dd6:	e0e1      	b.n	8000f9c <keypad+0x228>
	}

	if  (  (HAL_GPIO_ReadPin  (GPIOA,GPIO_PIN_15))==0)    // nếu Col 4 thấp
 8000dd8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ddc:	4873      	ldr	r0, [pc, #460]	; (8000fac <keypad+0x238>)
 8000dde:	f003 f92b 	bl	8004038 <HAL_GPIO_ReadPin>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d105      	bne.n	8000df4 <keypad+0x80>
	{
		CheckPass();
 8000de8:	f7ff ff86 	bl	8000cf8 <CheckPass>
		clearBuffer();
 8000dec:	f7ff ff5e 	bl	8000cac <clearBuffer>
		return 0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	e0d3      	b.n	8000f9c <keypad+0x228>
	}
	HAL_GPIO_WritePin  (GPIOB,GPIO_PIN_5,GPIO_PIN_SET);
 8000df4:	2201      	movs	r2, #1
 8000df6:	2120      	movs	r1, #32
 8000df8:	4869      	ldr	r0, [pc, #420]	; (8000fa0 <keypad+0x22c>)
 8000dfa:	f003 f935 	bl	8004068 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin  (GPIOB,GPIO_PIN_3,GPIO_PIN_RESET);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2108      	movs	r1, #8
 8000e02:	4867      	ldr	r0, [pc, #412]	; (8000fa0 <keypad+0x22c>)
 8000e04:	f003 f930 	bl	8004068 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin  (GPIOD,GPIO_PIN_6,GPIO_PIN_SET);
 8000e08:	2201      	movs	r2, #1
 8000e0a:	2140      	movs	r1, #64	; 0x40
 8000e0c:	4865      	ldr	r0, [pc, #404]	; (8000fa4 <keypad+0x230>)
 8000e0e:	f003 f92b 	bl	8004068 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin  (GPIOD,GPIO_PIN_4,GPIO_PIN_SET);
 8000e12:	2201      	movs	r2, #1
 8000e14:	2110      	movs	r1, #16
 8000e16:	4863      	ldr	r0, [pc, #396]	; (8000fa4 <keypad+0x230>)
 8000e18:	f003 f926 	bl	8004068 <HAL_GPIO_WritePin>

		if  ( (HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_2))==0)
 8000e1c:	2104      	movs	r1, #4
 8000e1e:	4861      	ldr	r0, [pc, #388]	; (8000fa4 <keypad+0x230>)
 8000e20:	f003 f90a 	bl	8004038 <HAL_GPIO_ReadPin>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d101      	bne.n	8000e2e <keypad+0xba>
		{
			return  '4' ;
 8000e2a:	2334      	movs	r3, #52	; 0x34
 8000e2c:	e0b6      	b.n	8000f9c <keypad+0x228>
		}

		if  (  (HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0))==0)
 8000e2e:	2101      	movs	r1, #1
 8000e30:	485c      	ldr	r0, [pc, #368]	; (8000fa4 <keypad+0x230>)
 8000e32:	f003 f901 	bl	8004038 <HAL_GPIO_ReadPin>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d101      	bne.n	8000e40 <keypad+0xcc>
		{
			return  '5';
 8000e3c:	2335      	movs	r3, #53	; 0x35
 8000e3e:	e0ad      	b.n	8000f9c <keypad+0x228>
		}

		if  (  (HAL_GPIO_ReadPin  (GPIOC,GPIO_PIN_11))==0)
 8000e40:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e44:	4858      	ldr	r0, [pc, #352]	; (8000fa8 <keypad+0x234>)
 8000e46:	f003 f8f7 	bl	8004038 <HAL_GPIO_ReadPin>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d101      	bne.n	8000e54 <keypad+0xe0>
		{
			return  '6';
 8000e50:	2336      	movs	r3, #54	; 0x36
 8000e52:	e0a3      	b.n	8000f9c <keypad+0x228>
		}

		if  (  (HAL_GPIO_ReadPin  (GPIOA,GPIO_PIN_15))==0)
 8000e54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e58:	4854      	ldr	r0, [pc, #336]	; (8000fac <keypad+0x238>)
 8000e5a:	f003 f8ed 	bl	8004038 <HAL_GPIO_ReadPin>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d121      	bne.n	8000ea8 <keypad+0x134>
		{
			if(x>0)
 8000e64:	4b52      	ldr	r3, [pc, #328]	; (8000fb0 <keypad+0x23c>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	dd1b      	ble.n	8000ea4 <keypad+0x130>
			{
				HAL_Delay (200);
 8000e6c:	20c8      	movs	r0, #200	; 0xc8
 8000e6e:	f001 fe25 	bl	8002abc <HAL_Delay>
				buffer [strlen (buffer) - 1] = 0;
 8000e72:	4850      	ldr	r0, [pc, #320]	; (8000fb4 <keypad+0x240>)
 8000e74:	f7ff f9be 	bl	80001f4 <strlen>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	4a4d      	ldr	r2, [pc, #308]	; (8000fb4 <keypad+0x240>)
 8000e7e:	2100      	movs	r1, #0
 8000e80:	54d1      	strb	r1, [r2, r3]
				lcd_clear();
 8000e82:	f006 fc45 	bl	8007710 <lcd_clear>
				lcd_put_cur(1,1);
 8000e86:	2101      	movs	r1, #1
 8000e88:	2001      	movs	r0, #1
 8000e8a:	f006 fc58 	bl	800773e <lcd_put_cur>
				lcd_send_string (buffer);
 8000e8e:	4849      	ldr	r0, [pc, #292]	; (8000fb4 <keypad+0x240>)
 8000e90:	f006 fcb1 	bl	80077f6 <lcd_send_string>
				y--;
 8000e94:	4b48      	ldr	r3, [pc, #288]	; (8000fb8 <keypad+0x244>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	3b01      	subs	r3, #1
 8000e9a:	4a47      	ldr	r2, [pc, #284]	; (8000fb8 <keypad+0x244>)
 8000e9c:	6013      	str	r3, [r2, #0]
				key=0;
 8000e9e:	4b47      	ldr	r3, [pc, #284]	; (8000fbc <keypad+0x248>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	701a      	strb	r2, [r3, #0]
			}
			return 0;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	e079      	b.n	8000f9c <keypad+0x228>
		}
		HAL_GPIO_WritePin  (GPIOB,GPIO_PIN_5,GPIO_PIN_SET);
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	2120      	movs	r1, #32
 8000eac:	483c      	ldr	r0, [pc, #240]	; (8000fa0 <keypad+0x22c>)
 8000eae:	f003 f8db 	bl	8004068 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin  (GPIOB,GPIO_PIN_3,GPIO_PIN_SET);
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	2108      	movs	r1, #8
 8000eb6:	483a      	ldr	r0, [pc, #232]	; (8000fa0 <keypad+0x22c>)
 8000eb8:	f003 f8d6 	bl	8004068 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin  (GPIOD,GPIO_PIN_6,GPIO_PIN_RESET);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	2140      	movs	r1, #64	; 0x40
 8000ec0:	4838      	ldr	r0, [pc, #224]	; (8000fa4 <keypad+0x230>)
 8000ec2:	f003 f8d1 	bl	8004068 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin  (GPIOD,GPIO_PIN_4,GPIO_PIN_SET);
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	2110      	movs	r1, #16
 8000eca:	4836      	ldr	r0, [pc, #216]	; (8000fa4 <keypad+0x230>)
 8000ecc:	f003 f8cc 	bl	8004068 <HAL_GPIO_WritePin>

			if  ( (HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_2))==0)
 8000ed0:	2104      	movs	r1, #4
 8000ed2:	4834      	ldr	r0, [pc, #208]	; (8000fa4 <keypad+0x230>)
 8000ed4:	f003 f8b0 	bl	8004038 <HAL_GPIO_ReadPin>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d101      	bne.n	8000ee2 <keypad+0x16e>
			{
				return  '7' ;
 8000ede:	2337      	movs	r3, #55	; 0x37
 8000ee0:	e05c      	b.n	8000f9c <keypad+0x228>
			}

			if  (  (HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0))==0)
 8000ee2:	2101      	movs	r1, #1
 8000ee4:	482f      	ldr	r0, [pc, #188]	; (8000fa4 <keypad+0x230>)
 8000ee6:	f003 f8a7 	bl	8004038 <HAL_GPIO_ReadPin>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d101      	bne.n	8000ef4 <keypad+0x180>
			{
				return  '8';
 8000ef0:	2338      	movs	r3, #56	; 0x38
 8000ef2:	e053      	b.n	8000f9c <keypad+0x228>
			}

			if  (  (HAL_GPIO_ReadPin  (GPIOC,GPIO_PIN_11))==0)
 8000ef4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ef8:	482b      	ldr	r0, [pc, #172]	; (8000fa8 <keypad+0x234>)
 8000efa:	f003 f89d 	bl	8004038 <HAL_GPIO_ReadPin>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d101      	bne.n	8000f08 <keypad+0x194>
			{
				return  '9';
 8000f04:	2339      	movs	r3, #57	; 0x39
 8000f06:	e049      	b.n	8000f9c <keypad+0x228>
			}

			if  (  (HAL_GPIO_ReadPin  (GPIOA,GPIO_PIN_15))==0)
 8000f08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f0c:	4827      	ldr	r0, [pc, #156]	; (8000fac <keypad+0x238>)
 8000f0e:	f003 f893 	bl	8004038 <HAL_GPIO_ReadPin>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d103      	bne.n	8000f20 <keypad+0x1ac>
			{
				clearBuffer();
 8000f18:	f7ff fec8 	bl	8000cac <clearBuffer>
				return 0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	e03d      	b.n	8000f9c <keypad+0x228>
			}
			HAL_GPIO_WritePin  (GPIOB,GPIO_PIN_5,GPIO_PIN_SET);
 8000f20:	2201      	movs	r2, #1
 8000f22:	2120      	movs	r1, #32
 8000f24:	481e      	ldr	r0, [pc, #120]	; (8000fa0 <keypad+0x22c>)
 8000f26:	f003 f89f 	bl	8004068 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin  (GPIOB,GPIO_PIN_3,GPIO_PIN_SET);
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	2108      	movs	r1, #8
 8000f2e:	481c      	ldr	r0, [pc, #112]	; (8000fa0 <keypad+0x22c>)
 8000f30:	f003 f89a 	bl	8004068 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin  (GPIOD,GPIO_PIN_6,GPIO_PIN_SET);
 8000f34:	2201      	movs	r2, #1
 8000f36:	2140      	movs	r1, #64	; 0x40
 8000f38:	481a      	ldr	r0, [pc, #104]	; (8000fa4 <keypad+0x230>)
 8000f3a:	f003 f895 	bl	8004068 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin  (GPIOD,GPIO_PIN_4,GPIO_PIN_RESET);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	2110      	movs	r1, #16
 8000f42:	4818      	ldr	r0, [pc, #96]	; (8000fa4 <keypad+0x230>)
 8000f44:	f003 f890 	bl	8004068 <HAL_GPIO_WritePin>

				if  ( (HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_2))==0)
 8000f48:	2104      	movs	r1, #4
 8000f4a:	4816      	ldr	r0, [pc, #88]	; (8000fa4 <keypad+0x230>)
 8000f4c:	f003 f874 	bl	8004038 <HAL_GPIO_ReadPin>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d101      	bne.n	8000f5a <keypad+0x1e6>
				{
					return  '*' ;
 8000f56:	232a      	movs	r3, #42	; 0x2a
 8000f58:	e020      	b.n	8000f9c <keypad+0x228>
				}

				if  (  (HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0))==0)
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	4811      	ldr	r0, [pc, #68]	; (8000fa4 <keypad+0x230>)
 8000f5e:	f003 f86b 	bl	8004038 <HAL_GPIO_ReadPin>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d101      	bne.n	8000f6c <keypad+0x1f8>
				{
					return  '0';
 8000f68:	2330      	movs	r3, #48	; 0x30
 8000f6a:	e017      	b.n	8000f9c <keypad+0x228>
				}

				if  (  (HAL_GPIO_ReadPin  (GPIOC,GPIO_PIN_11))==0)
 8000f6c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f70:	480d      	ldr	r0, [pc, #52]	; (8000fa8 <keypad+0x234>)
 8000f72:	f003 f861 	bl	8004038 <HAL_GPIO_ReadPin>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d101      	bne.n	8000f80 <keypad+0x20c>
				{
					return  '#';
 8000f7c:	2323      	movs	r3, #35	; 0x23
 8000f7e:	e00d      	b.n	8000f9c <keypad+0x228>
				}

				if  (  (HAL_GPIO_ReadPin  (GPIOA,GPIO_PIN_15))==0)
 8000f80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f84:	4809      	ldr	r0, [pc, #36]	; (8000fac <keypad+0x238>)
 8000f86:	f003 f857 	bl	8004038 <HAL_GPIO_ReadPin>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d105      	bne.n	8000f9c <keypad+0x228>
				{
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 25);
 8000f90:	4b0b      	ldr	r3, [pc, #44]	; (8000fc0 <keypad+0x24c>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2219      	movs	r2, #25
 8000f96:	63da      	str	r2, [r3, #60]	; 0x3c

						return 0;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	e7ff      	b.n	8000f9c <keypad+0x228>
				}
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40020400 	.word	0x40020400
 8000fa4:	40020c00 	.word	0x40020c00
 8000fa8:	40020800 	.word	0x40020800
 8000fac:	40020000 	.word	0x40020000
 8000fb0:	2000009c 	.word	0x2000009c
 8000fb4:	2000074c 	.word	0x2000074c
 8000fb8:	20000000 	.word	0x20000000
 8000fbc:	2000081f 	.word	0x2000081f
 8000fc0:	200002d4 	.word	0x200002d4

08000fc4 <matkhau>:
void matkhau(void )
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
		keypad();
 8000fca:	f7ff fed3 	bl	8000d74 <keypad>
		  key = keypad();
 8000fce:	f7ff fed1 	bl	8000d74 <keypad>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	4b27      	ldr	r3, [pc, #156]	; (8001074 <matkhau+0xb0>)
 8000fd8:	701a      	strb	r2, [r3, #0]
		  if (HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_2)==0 || HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)==0 ||HAL_GPIO_ReadPin (GPIOC,GPIO_PIN_11)==0||HAL_GPIO_ReadPin (GPIOA,GPIO_PIN_15)==0)
 8000fda:	2104      	movs	r1, #4
 8000fdc:	4826      	ldr	r0, [pc, #152]	; (8001078 <matkhau+0xb4>)
 8000fde:	f003 f82b 	bl	8004038 <HAL_GPIO_ReadPin>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d016      	beq.n	8001016 <matkhau+0x52>
 8000fe8:	2101      	movs	r1, #1
 8000fea:	4823      	ldr	r0, [pc, #140]	; (8001078 <matkhau+0xb4>)
 8000fec:	f003 f824 	bl	8004038 <HAL_GPIO_ReadPin>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d00f      	beq.n	8001016 <matkhau+0x52>
 8000ff6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ffa:	4820      	ldr	r0, [pc, #128]	; (800107c <matkhau+0xb8>)
 8000ffc:	f003 f81c 	bl	8004038 <HAL_GPIO_ReadPin>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d007      	beq.n	8001016 <matkhau+0x52>
 8001006:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800100a:	481d      	ldr	r0, [pc, #116]	; (8001080 <matkhau+0xbc>)
 800100c:	f003 f814 	bl	8004038 <HAL_GPIO_ReadPin>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d119      	bne.n	800104a <matkhau+0x86>
		  {
		x = strlen (buffer);
 8001016:	481b      	ldr	r0, [pc, #108]	; (8001084 <matkhau+0xc0>)
 8001018:	f7ff f8ec 	bl	80001f4 <strlen>
 800101c:	4603      	mov	r3, r0
 800101e:	461a      	mov	r2, r3
 8001020:	4b19      	ldr	r3, [pc, #100]	; (8001088 <matkhau+0xc4>)
 8001022:	601a      	str	r2, [r3, #0]
		for ( int i = x; i<=x +1; i ++)
 8001024:	4b18      	ldr	r3, [pc, #96]	; (8001088 <matkhau+0xc4>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	607b      	str	r3, [r7, #4]
 800102a:	e008      	b.n	800103e <matkhau+0x7a>
			buffer[x]= key  ;
 800102c:	4b16      	ldr	r3, [pc, #88]	; (8001088 <matkhau+0xc4>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a10      	ldr	r2, [pc, #64]	; (8001074 <matkhau+0xb0>)
 8001032:	7811      	ldrb	r1, [r2, #0]
 8001034:	4a13      	ldr	r2, [pc, #76]	; (8001084 <matkhau+0xc0>)
 8001036:	54d1      	strb	r1, [r2, r3]
		for ( int i = x; i<=x +1; i ++)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3301      	adds	r3, #1
 800103c:	607b      	str	r3, [r7, #4]
 800103e:	4b12      	ldr	r3, [pc, #72]	; (8001088 <matkhau+0xc4>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	3301      	adds	r3, #1
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	429a      	cmp	r2, r3
 8001048:	ddf0      	ble.n	800102c <matkhau+0x68>
		  }
		  lcd_put_cur(0,1);
 800104a:	2101      	movs	r1, #1
 800104c:	2000      	movs	r0, #0
 800104e:	f006 fb76 	bl	800773e <lcd_put_cur>
		  lcd_send_string ("Enter Password ");
 8001052:	480e      	ldr	r0, [pc, #56]	; (800108c <matkhau+0xc8>)
 8001054:	f006 fbcf 	bl	80077f6 <lcd_send_string>
		  lcd_put_cur(1,1);
 8001058:	2101      	movs	r1, #1
 800105a:	2001      	movs	r0, #1
 800105c:	f006 fb6f 	bl	800773e <lcd_put_cur>
		  lcd_send_string (buffer);
 8001060:	4808      	ldr	r0, [pc, #32]	; (8001084 <matkhau+0xc0>)
 8001062:	f006 fbc8 	bl	80077f6 <lcd_send_string>
//		  y = strlen (buffer);
//		 		  if(y==4)
//		 		  {
//		 			  CheckPass  ();
//		 		  }
		  HAL_Delay(150);
 8001066:	2096      	movs	r0, #150	; 0x96
 8001068:	f001 fd28 	bl	8002abc <HAL_Delay>
}
 800106c:	bf00      	nop
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	2000081f 	.word	0x2000081f
 8001078:	40020c00 	.word	0x40020c00
 800107c:	40020800 	.word	0x40020800
 8001080:	40020000 	.word	0x40020000
 8001084:	2000074c 	.word	0x2000074c
 8001088:	2000009c 	.word	0x2000009c
 800108c:	08008b4c 	.word	0x08008b4c

08001090 <RtC>:

void RtC()
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af02      	add	r7, sp, #8
	Get_Time();
 8001096:	f7ff fdb9 	bl	8000c0c <Get_Time>
	sprintf(time_buffer, "%d:%d", time1.hour, time1.minutes);
 800109a:	4b21      	ldr	r3, [pc, #132]	; (8001120 <RtC+0x90>)
 800109c:	789b      	ldrb	r3, [r3, #2]
 800109e:	461a      	mov	r2, r3
 80010a0:	4b1f      	ldr	r3, [pc, #124]	; (8001120 <RtC+0x90>)
 80010a2:	785b      	ldrb	r3, [r3, #1]
 80010a4:	491f      	ldr	r1, [pc, #124]	; (8001124 <RtC+0x94>)
 80010a6:	4820      	ldr	r0, [pc, #128]	; (8001128 <RtC+0x98>)
 80010a8:	f006 fc04 	bl	80078b4 <siprintf>
	lcd_put_cur1(2,7);
 80010ac:	2107      	movs	r1, #7
 80010ae:	2002      	movs	r0, #2
 80010b0:	f006 fa8c 	bl	80075cc <lcd_put_cur1>
	lcd_send_string1(time_buffer);
 80010b4:	481c      	ldr	r0, [pc, #112]	; (8001128 <RtC+0x98>)
 80010b6:	f006 fae5 	bl	8007684 <lcd_send_string1>
	printf("time :: %d:%d:%d   ", time1.hour, time1.minutes, time1.seconds);
 80010ba:	4b19      	ldr	r3, [pc, #100]	; (8001120 <RtC+0x90>)
 80010bc:	789b      	ldrb	r3, [r3, #2]
 80010be:	4619      	mov	r1, r3
 80010c0:	4b17      	ldr	r3, [pc, #92]	; (8001120 <RtC+0x90>)
 80010c2:	785b      	ldrb	r3, [r3, #1]
 80010c4:	461a      	mov	r2, r3
 80010c6:	4b16      	ldr	r3, [pc, #88]	; (8001120 <RtC+0x90>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	4818      	ldr	r0, [pc, #96]	; (800112c <RtC+0x9c>)
 80010cc:	f006 fbda 	bl	8007884 <iprintf>
	sprintf (time_buffer, "%02d-%02d-%02d", time1.date, time1.month, time1.year + 2000);
 80010d0:	4b13      	ldr	r3, [pc, #76]	; (8001120 <RtC+0x90>)
 80010d2:	791b      	ldrb	r3, [r3, #4]
 80010d4:	461a      	mov	r2, r3
 80010d6:	4b12      	ldr	r3, [pc, #72]	; (8001120 <RtC+0x90>)
 80010d8:	795b      	ldrb	r3, [r3, #5]
 80010da:	4619      	mov	r1, r3
 80010dc:	4b10      	ldr	r3, [pc, #64]	; (8001120 <RtC+0x90>)
 80010de:	799b      	ldrb	r3, [r3, #6]
 80010e0:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	460b      	mov	r3, r1
 80010e8:	4911      	ldr	r1, [pc, #68]	; (8001130 <RtC+0xa0>)
 80010ea:	480f      	ldr	r0, [pc, #60]	; (8001128 <RtC+0x98>)
 80010ec:	f006 fbe2 	bl	80078b4 <siprintf>
	lcd_put_cur1(3,0);
 80010f0:	2100      	movs	r1, #0
 80010f2:	2003      	movs	r0, #3
 80010f4:	f006 fa6a 	bl	80075cc <lcd_put_cur1>
	lcd_send_string1(time_buffer);
 80010f8:	480b      	ldr	r0, [pc, #44]	; (8001128 <RtC+0x98>)
 80010fa:	f006 fac3 	bl	8007684 <lcd_send_string1>
	printf("date :: %d:%d:%d \r\n", time1.date, time1.month, time1.year + 2000);
 80010fe:	4b08      	ldr	r3, [pc, #32]	; (8001120 <RtC+0x90>)
 8001100:	791b      	ldrb	r3, [r3, #4]
 8001102:	4619      	mov	r1, r3
 8001104:	4b06      	ldr	r3, [pc, #24]	; (8001120 <RtC+0x90>)
 8001106:	795b      	ldrb	r3, [r3, #5]
 8001108:	461a      	mov	r2, r3
 800110a:	4b05      	ldr	r3, [pc, #20]	; (8001120 <RtC+0x90>)
 800110c:	799b      	ldrb	r3, [r3, #6]
 800110e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001112:	4808      	ldr	r0, [pc, #32]	; (8001134 <RtC+0xa4>)
 8001114:	f006 fbb6 	bl	8007884 <iprintf>
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	200007b0 	.word	0x200007b0
 8001124:	08008b5c 	.word	0x08008b5c
 8001128:	200002c8 	.word	0x200002c8
 800112c:	08008b64 	.word	0x08008b64
 8001130:	08008b78 	.word	0x08008b78
 8001134:	08008b88 	.word	0x08008b88

08001138 <cambien>:
void cambien()
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)value,2);
 800113c:	2202      	movs	r2, #2
 800113e:	4948      	ldr	r1, [pc, #288]	; (8001260 <cambien+0x128>)
 8001140:	4848      	ldr	r0, [pc, #288]	; (8001264 <cambien+0x12c>)
 8001142:	f001 fd23 	bl	8002b8c <HAL_ADC_Start_DMA>
	temp = value[0]*0.0732 - 3;
 8001146:	4b46      	ldr	r3, [pc, #280]	; (8001260 <cambien+0x128>)
 8001148:	881b      	ldrh	r3, [r3, #0]
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff fb2c 	bl	80007a8 <__aeabi_i2d>
 8001150:	a33f      	add	r3, pc, #252	; (adr r3, 8001250 <cambien+0x118>)
 8001152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001156:	f7ff f8ab 	bl	80002b0 <__aeabi_dmul>
 800115a:	4602      	mov	r2, r0
 800115c:	460b      	mov	r3, r1
 800115e:	4610      	mov	r0, r2
 8001160:	4619      	mov	r1, r3
 8001162:	f04f 0200 	mov.w	r2, #0
 8001166:	4b40      	ldr	r3, [pc, #256]	; (8001268 <cambien+0x130>)
 8001168:	f7ff f9d0 	bl	800050c <__aeabi_dsub>
 800116c:	4602      	mov	r2, r0
 800116e:	460b      	mov	r3, r1
 8001170:	4610      	mov	r0, r2
 8001172:	4619      	mov	r1, r3
 8001174:	f7ff fb82 	bl	800087c <__aeabi_d2uiz>
 8001178:	4603      	mov	r3, r0
 800117a:	b29a      	uxth	r2, r3
 800117c:	4b3b      	ldr	r3, [pc, #236]	; (800126c <cambien+0x134>)
 800117e:	801a      	strh	r2, [r3, #0]
	gas = value[1]*0.02442;
 8001180:	4b37      	ldr	r3, [pc, #220]	; (8001260 <cambien+0x128>)
 8001182:	885b      	ldrh	r3, [r3, #2]
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff fb0f 	bl	80007a8 <__aeabi_i2d>
 800118a:	a333      	add	r3, pc, #204	; (adr r3, 8001258 <cambien+0x120>)
 800118c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001190:	f7ff f88e 	bl	80002b0 <__aeabi_dmul>
 8001194:	4602      	mov	r2, r0
 8001196:	460b      	mov	r3, r1
 8001198:	4610      	mov	r0, r2
 800119a:	4619      	mov	r1, r3
 800119c:	f7ff fb6e 	bl	800087c <__aeabi_d2uiz>
 80011a0:	4603      	mov	r3, r0
 80011a2:	b29a      	uxth	r2, r3
 80011a4:	4b32      	ldr	r3, [pc, #200]	; (8001270 <cambien+0x138>)
 80011a6:	801a      	strh	r2, [r3, #0]
	printf("gas: %d\n", gas );
 80011a8:	4b31      	ldr	r3, [pc, #196]	; (8001270 <cambien+0x138>)
 80011aa:	881b      	ldrh	r3, [r3, #0]
 80011ac:	4619      	mov	r1, r3
 80011ae:	4831      	ldr	r0, [pc, #196]	; (8001274 <cambien+0x13c>)
 80011b0:	f006 fb68 	bl	8007884 <iprintf>
	printf("temp: %d\n", temp );
 80011b4:	4b2d      	ldr	r3, [pc, #180]	; (800126c <cambien+0x134>)
 80011b6:	881b      	ldrh	r3, [r3, #0]
 80011b8:	4619      	mov	r1, r3
 80011ba:	482f      	ldr	r0, [pc, #188]	; (8001278 <cambien+0x140>)
 80011bc:	f006 fb62 	bl	8007884 <iprintf>
	lcd_put_cur1(0,0);
 80011c0:	2100      	movs	r1, #0
 80011c2:	2000      	movs	r0, #0
 80011c4:	f006 fa02 	bl	80075cc <lcd_put_cur1>
	lcd_send_string1("temp: ");
 80011c8:	482c      	ldr	r0, [pc, #176]	; (800127c <cambien+0x144>)
 80011ca:	f006 fa5b 	bl	8007684 <lcd_send_string1>
	lcd_put_cur1(0,7);
 80011ce:	2107      	movs	r1, #7
 80011d0:	2000      	movs	r0, #0
 80011d2:	f006 f9fb 	bl	80075cc <lcd_put_cur1>
	lcd_send_string1 (temp);
 80011d6:	4b25      	ldr	r3, [pc, #148]	; (800126c <cambien+0x134>)
 80011d8:	881b      	ldrh	r3, [r3, #0]
 80011da:	4618      	mov	r0, r3
 80011dc:	f006 fa52 	bl	8007684 <lcd_send_string1>
	lcd_put_cur1(0,10);
 80011e0:	210a      	movs	r1, #10
 80011e2:	2000      	movs	r0, #0
 80011e4:	f006 f9f2 	bl	80075cc <lcd_put_cur1>
	lcd_send_string1 (" C");
 80011e8:	4825      	ldr	r0, [pc, #148]	; (8001280 <cambien+0x148>)
 80011ea:	f006 fa4b 	bl	8007684 <lcd_send_string1>
	lcd_put_cur1(0,8);
 80011ee:	2108      	movs	r1, #8
 80011f0:	2000      	movs	r0, #0
 80011f2:	f006 f9eb 	bl	80075cc <lcd_put_cur1>
	lcd_send_string1 ("gas: ");
 80011f6:	4823      	ldr	r0, [pc, #140]	; (8001284 <cambien+0x14c>)
 80011f8:	f006 fa44 	bl	8007684 <lcd_send_string1>
	lcd_put_cur1(0,14);
 80011fc:	210e      	movs	r1, #14
 80011fe:	2000      	movs	r0, #0
 8001200:	f006 f9e4 	bl	80075cc <lcd_put_cur1>
	lcd_send_string1 (gas);
 8001204:	4b1a      	ldr	r3, [pc, #104]	; (8001270 <cambien+0x138>)
 8001206:	881b      	ldrh	r3, [r3, #0]
 8001208:	4618      	mov	r0, r3
 800120a:	f006 fa3b 	bl	8007684 <lcd_send_string1>
	lcd_put_cur1(0,18);
 800120e:	2112      	movs	r1, #18
 8001210:	2000      	movs	r0, #0
 8001212:	f006 f9db 	bl	80075cc <lcd_put_cur1>
	lcd_send_string1 ("%");
 8001216:	481c      	ldr	r0, [pc, #112]	; (8001288 <cambien+0x150>)
 8001218:	f006 fa34 	bl	8007684 <lcd_send_string1>
	if(temp>50||gas>25)
 800121c:	4b13      	ldr	r3, [pc, #76]	; (800126c <cambien+0x134>)
 800121e:	881b      	ldrh	r3, [r3, #0]
 8001220:	2b32      	cmp	r3, #50	; 0x32
 8001222:	d803      	bhi.n	800122c <cambien+0xf4>
 8001224:	4b12      	ldr	r3, [pc, #72]	; (8001270 <cambien+0x138>)
 8001226:	881b      	ldrh	r3, [r3, #0]
 8001228:	2b19      	cmp	r3, #25
 800122a:	d906      	bls.n	800123a <cambien+0x102>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, SET);
 800122c:	2201      	movs	r2, #1
 800122e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001232:	4816      	ldr	r0, [pc, #88]	; (800128c <cambien+0x154>)
 8001234:	f002 ff18 	bl	8004068 <HAL_GPIO_WritePin>
 8001238:	e006      	b.n	8001248 <cambien+0x110>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, RESET);
 800123a:	2200      	movs	r2, #0
 800123c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001240:	4812      	ldr	r0, [pc, #72]	; (800128c <cambien+0x154>)
 8001242:	f002 ff11 	bl	8004068 <HAL_GPIO_WritePin>
	}
}
 8001246:	bf00      	nop
 8001248:	bf00      	nop
 800124a:	bd80      	pop	{r7, pc}
 800124c:	f3af 8000 	nop.w
 8001250:	36113405 	.word	0x36113405
 8001254:	3fb2bd3c 	.word	0x3fb2bd3c
 8001258:	757928e1 	.word	0x757928e1
 800125c:	3f99018e 	.word	0x3f99018e
 8001260:	20000924 	.word	0x20000924
 8001264:	20000510 	.word	0x20000510
 8001268:	40080000 	.word	0x40080000
 800126c:	200000a0 	.word	0x200000a0
 8001270:	200000a2 	.word	0x200000a2
 8001274:	08008b9c 	.word	0x08008b9c
 8001278:	08008ba8 	.word	0x08008ba8
 800127c:	08008bb4 	.word	0x08008bb4
 8001280:	08008bbc 	.word	0x08008bbc
 8001284:	08008bc0 	.word	0x08008bc0
 8001288:	08008bc8 	.word	0x08008bc8
 800128c:	40020c00 	.word	0x40020c00

08001290 <Button>:
void Button()
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 0)  // den1
 8001294:	2102      	movs	r1, #2
 8001296:	48b5      	ldr	r0, [pc, #724]	; (800156c <Button+0x2dc>)
 8001298:	f002 fece 	bl	8004038 <HAL_GPIO_ReadPin>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d12b      	bne.n	80012fa <Button+0x6a>
		{
			HAL_Delay(10);
 80012a2:	200a      	movs	r0, #10
 80012a4:	f001 fc0a 	bl	8002abc <HAL_Delay>
			while(1)
			{

				last = HAL_GetTick();
 80012a8:	f001 fbfc 	bl	8002aa4 <HAL_GetTick>
 80012ac:	4603      	mov	r3, r0
 80012ae:	461a      	mov	r2, r3
 80012b0:	4baf      	ldr	r3, [pc, #700]	; (8001570 <Button+0x2e0>)
 80012b2:	601a      	str	r2, [r3, #0]
				if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)
 80012b4:	2102      	movs	r1, #2
 80012b6:	48ad      	ldr	r0, [pc, #692]	; (800156c <Button+0x2dc>)
 80012b8:	f002 febe 	bl	8004038 <HAL_GPIO_ReadPin>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d1f2      	bne.n	80012a8 <Button+0x18>
				{
					if(TTTB1 == 0)
 80012c2:	4bac      	ldr	r3, [pc, #688]	; (8001574 <Button+0x2e4>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d108      	bne.n	80012dc <Button+0x4c>
					{
						TTTB1 = 1; //TB1 = 1;
 80012ca:	4baa      	ldr	r3, [pc, #680]	; (8001574 <Button+0x2e4>)
 80012cc:	2201      	movs	r2, #1
 80012ce:	601a      	str	r2, [r3, #0]
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET);
 80012d0:	2200      	movs	r2, #0
 80012d2:	2101      	movs	r1, #1
 80012d4:	48a5      	ldr	r0, [pc, #660]	; (800156c <Button+0x2dc>)
 80012d6:	f002 fec7 	bl	8004068 <HAL_GPIO_WritePin>
 80012da:	e00b      	b.n	80012f4 <Button+0x64>
					}
					else if(TTTB1 == 1)
 80012dc:	4ba5      	ldr	r3, [pc, #660]	; (8001574 <Button+0x2e4>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d107      	bne.n	80012f4 <Button+0x64>
					{
						TTTB1 = 0;//TB1 = 0;
 80012e4:	4ba3      	ldr	r3, [pc, #652]	; (8001574 <Button+0x2e4>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
						 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, SET);
 80012ea:	2201      	movs	r2, #1
 80012ec:	2101      	movs	r1, #1
 80012ee:	489f      	ldr	r0, [pc, #636]	; (800156c <Button+0x2dc>)
 80012f0:	f002 feba 	bl	8004068 <HAL_GPIO_WritePin>
					}
					HAL_Delay(10);
 80012f4:	200a      	movs	r0, #10
 80012f6:	f001 fbe1 	bl	8002abc <HAL_Delay>
					break;
				}
			}
		}

		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7) == 0)     //quat 1
 80012fa:	2180      	movs	r1, #128	; 0x80
 80012fc:	489e      	ldr	r0, [pc, #632]	; (8001578 <Button+0x2e8>)
 80012fe:	f002 fe9b 	bl	8004038 <HAL_GPIO_ReadPin>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d12d      	bne.n	8001364 <Button+0xd4>
		{
			HAL_Delay(10);
 8001308:	200a      	movs	r0, #10
 800130a:	f001 fbd7 	bl	8002abc <HAL_Delay>
			while(1)
			{
				last = HAL_GetTick();
 800130e:	f001 fbc9 	bl	8002aa4 <HAL_GetTick>
 8001312:	4603      	mov	r3, r0
 8001314:	461a      	mov	r2, r3
 8001316:	4b96      	ldr	r3, [pc, #600]	; (8001570 <Button+0x2e0>)
 8001318:	601a      	str	r2, [r3, #0]
				if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7) == 1)
 800131a:	2180      	movs	r1, #128	; 0x80
 800131c:	4896      	ldr	r0, [pc, #600]	; (8001578 <Button+0x2e8>)
 800131e:	f002 fe8b 	bl	8004038 <HAL_GPIO_ReadPin>
 8001322:	4603      	mov	r3, r0
 8001324:	2b01      	cmp	r3, #1
 8001326:	d1f2      	bne.n	800130e <Button+0x7e>
				{
					if(TTTB2 == 0)
 8001328:	4b94      	ldr	r3, [pc, #592]	; (800157c <Button+0x2ec>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d109      	bne.n	8001344 <Button+0xb4>
					{
						TTTB2 = 1; //TB2 = 1;
 8001330:	4b92      	ldr	r3, [pc, #584]	; (800157c <Button+0x2ec>)
 8001332:	2201      	movs	r2, #1
 8001334:	601a      	str	r2, [r3, #0]
						HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, RESET);
 8001336:	2200      	movs	r2, #0
 8001338:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800133c:	488e      	ldr	r0, [pc, #568]	; (8001578 <Button+0x2e8>)
 800133e:	f002 fe93 	bl	8004068 <HAL_GPIO_WritePin>
 8001342:	e00c      	b.n	800135e <Button+0xce>
					}
					else if(TTTB2 == 1)
 8001344:	4b8d      	ldr	r3, [pc, #564]	; (800157c <Button+0x2ec>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d108      	bne.n	800135e <Button+0xce>
					{
						TTTB2 = 0; //TB2 = 0;
 800134c:	4b8b      	ldr	r3, [pc, #556]	; (800157c <Button+0x2ec>)
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
						HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, SET);
 8001352:	2201      	movs	r2, #1
 8001354:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001358:	4887      	ldr	r0, [pc, #540]	; (8001578 <Button+0x2e8>)
 800135a:	f002 fe85 	bl	8004068 <HAL_GPIO_WritePin>
					}
					HAL_Delay(10);
 800135e:	200a      	movs	r0, #10
 8001360:	f001 fbac 	bl	8002abc <HAL_Delay>
					break;

				}
			}
		}
		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_13) == 0)		//den 2          ///////////////
 8001364:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001368:	4883      	ldr	r0, [pc, #524]	; (8001578 <Button+0x2e8>)
 800136a:	f002 fe65 	bl	8004038 <HAL_GPIO_ReadPin>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d12c      	bne.n	80013ce <Button+0x13e>
			{
				HAL_Delay(10);
 8001374:	200a      	movs	r0, #10
 8001376:	f001 fba1 	bl	8002abc <HAL_Delay>
				while(1)
				{

					last = HAL_GetTick();
 800137a:	f001 fb93 	bl	8002aa4 <HAL_GetTick>
 800137e:	4603      	mov	r3, r0
 8001380:	461a      	mov	r2, r3
 8001382:	4b7b      	ldr	r3, [pc, #492]	; (8001570 <Button+0x2e0>)
 8001384:	601a      	str	r2, [r3, #0]
					if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_13) == 1)
 8001386:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800138a:	487b      	ldr	r0, [pc, #492]	; (8001578 <Button+0x2e8>)
 800138c:	f002 fe54 	bl	8004038 <HAL_GPIO_ReadPin>
 8001390:	4603      	mov	r3, r0
 8001392:	2b01      	cmp	r3, #1
 8001394:	d1f1      	bne.n	800137a <Button+0xea>
					{
						if(TTTB3 == 0)
 8001396:	4b7a      	ldr	r3, [pc, #488]	; (8001580 <Button+0x2f0>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d108      	bne.n	80013b0 <Button+0x120>
						{
							TTTB3 = 1; //TB3 = 1;
 800139e:	4b78      	ldr	r3, [pc, #480]	; (8001580 <Button+0x2f0>)
 80013a0:	2201      	movs	r2, #1
 80013a2:	601a      	str	r2, [r3, #0]
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, RESET);
 80013a4:	2200      	movs	r2, #0
 80013a6:	2104      	movs	r1, #4
 80013a8:	4870      	ldr	r0, [pc, #448]	; (800156c <Button+0x2dc>)
 80013aa:	f002 fe5d 	bl	8004068 <HAL_GPIO_WritePin>
 80013ae:	e00b      	b.n	80013c8 <Button+0x138>
						}
						else if(TTTB3 == 1)
 80013b0:	4b73      	ldr	r3, [pc, #460]	; (8001580 <Button+0x2f0>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d107      	bne.n	80013c8 <Button+0x138>
						{
							TTTB3 = 0;  //TB3 = 0;
 80013b8:	4b71      	ldr	r3, [pc, #452]	; (8001580 <Button+0x2f0>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
							 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, SET);
 80013be:	2201      	movs	r2, #1
 80013c0:	2104      	movs	r1, #4
 80013c2:	486a      	ldr	r0, [pc, #424]	; (800156c <Button+0x2dc>)
 80013c4:	f002 fe50 	bl	8004068 <HAL_GPIO_WritePin>
						}
						HAL_Delay(10);
 80013c8:	200a      	movs	r0, #10
 80013ca:	f001 fb77 	bl	8002abc <HAL_Delay>
						break;
					}
				}
			}
		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_15) == 0)		//quat2
 80013ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013d2:	4869      	ldr	r0, [pc, #420]	; (8001578 <Button+0x2e8>)
 80013d4:	f002 fe30 	bl	8004038 <HAL_GPIO_ReadPin>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d12e      	bne.n	800143c <Button+0x1ac>
				{
					HAL_Delay(10);
 80013de:	200a      	movs	r0, #10
 80013e0:	f001 fb6c 	bl	8002abc <HAL_Delay>
					while(1)
					{

						last = HAL_GetTick();
 80013e4:	f001 fb5e 	bl	8002aa4 <HAL_GetTick>
 80013e8:	4603      	mov	r3, r0
 80013ea:	461a      	mov	r2, r3
 80013ec:	4b60      	ldr	r3, [pc, #384]	; (8001570 <Button+0x2e0>)
 80013ee:	601a      	str	r2, [r3, #0]
						if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_15) == 1)
 80013f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013f4:	4860      	ldr	r0, [pc, #384]	; (8001578 <Button+0x2e8>)
 80013f6:	f002 fe1f 	bl	8004038 <HAL_GPIO_ReadPin>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d1f1      	bne.n	80013e4 <Button+0x154>
						{
							if(TTTB4 == 0)
 8001400:	4b60      	ldr	r3, [pc, #384]	; (8001584 <Button+0x2f4>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d109      	bne.n	800141c <Button+0x18c>
							{
								TTTB4 = 1; //TB4 = 1;
 8001408:	4b5e      	ldr	r3, [pc, #376]	; (8001584 <Button+0x2f4>)
 800140a:	2201      	movs	r2, #1
 800140c:	601a      	str	r2, [r3, #0]
								HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, RESET);///////////////
 800140e:	2200      	movs	r2, #0
 8001410:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001414:	4858      	ldr	r0, [pc, #352]	; (8001578 <Button+0x2e8>)
 8001416:	f002 fe27 	bl	8004068 <HAL_GPIO_WritePin>
 800141a:	e00c      	b.n	8001436 <Button+0x1a6>
							}
							else if(TTTB4 == 1)
 800141c:	4b59      	ldr	r3, [pc, #356]	; (8001584 <Button+0x2f4>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2b01      	cmp	r3, #1
 8001422:	d108      	bne.n	8001436 <Button+0x1a6>
							{
								TTTB4 = 0;   //TB4 = 0;
 8001424:	4b57      	ldr	r3, [pc, #348]	; (8001584 <Button+0x2f4>)
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
								 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, SET);
 800142a:	2201      	movs	r2, #1
 800142c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001430:	4851      	ldr	r0, [pc, #324]	; (8001578 <Button+0x2e8>)
 8001432:	f002 fe19 	bl	8004068 <HAL_GPIO_WritePin>
							}
							HAL_Delay(10);
 8001436:	200a      	movs	r0, #10
 8001438:	f001 fb40 	bl	8002abc <HAL_Delay>
							break;
						}
					}
				}

		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9) == 0)		//den3
 800143c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001440:	484d      	ldr	r0, [pc, #308]	; (8001578 <Button+0x2e8>)
 8001442:	f002 fdf9 	bl	8004038 <HAL_GPIO_ReadPin>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d12e      	bne.n	80014aa <Button+0x21a>
					{
						HAL_Delay(10);
 800144c:	200a      	movs	r0, #10
 800144e:	f001 fb35 	bl	8002abc <HAL_Delay>
						while(1)
						{

							last = HAL_GetTick();
 8001452:	f001 fb27 	bl	8002aa4 <HAL_GetTick>
 8001456:	4603      	mov	r3, r0
 8001458:	461a      	mov	r2, r3
 800145a:	4b45      	ldr	r3, [pc, #276]	; (8001570 <Button+0x2e0>)
 800145c:	601a      	str	r2, [r3, #0]
							if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9) == 1)
 800145e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001462:	4845      	ldr	r0, [pc, #276]	; (8001578 <Button+0x2e8>)
 8001464:	f002 fde8 	bl	8004038 <HAL_GPIO_ReadPin>
 8001468:	4603      	mov	r3, r0
 800146a:	2b01      	cmp	r3, #1
 800146c:	d1f1      	bne.n	8001452 <Button+0x1c2>
							{
								if(TTTB5 == 0)
 800146e:	4b46      	ldr	r3, [pc, #280]	; (8001588 <Button+0x2f8>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d109      	bne.n	800148a <Button+0x1fa>
								{
									TTTB5 = 1;     //TB5=1;
 8001476:	4b44      	ldr	r3, [pc, #272]	; (8001588 <Button+0x2f8>)
 8001478:	2201      	movs	r2, #1
 800147a:	601a      	str	r2, [r3, #0]
									HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, RESET);
 800147c:	2200      	movs	r2, #0
 800147e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001482:	483d      	ldr	r0, [pc, #244]	; (8001578 <Button+0x2e8>)
 8001484:	f002 fdf0 	bl	8004068 <HAL_GPIO_WritePin>
 8001488:	e00c      	b.n	80014a4 <Button+0x214>
								}
								else if(TTTB5 == 1)
 800148a:	4b3f      	ldr	r3, [pc, #252]	; (8001588 <Button+0x2f8>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d108      	bne.n	80014a4 <Button+0x214>
								{
									TTTB5 = 0;         // TB5=0;
 8001492:	4b3d      	ldr	r3, [pc, #244]	; (8001588 <Button+0x2f8>)
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
									 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, SET);
 8001498:	2201      	movs	r2, #1
 800149a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800149e:	4836      	ldr	r0, [pc, #216]	; (8001578 <Button+0x2e8>)
 80014a0:	f002 fde2 	bl	8004068 <HAL_GPIO_WritePin>
								}
								HAL_Delay(10);
 80014a4:	200a      	movs	r0, #10
 80014a6:	f001 fb09 	bl	8002abc <HAL_Delay>
								break;
							}
						}
					}
		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_11) == 0)		//quat 3
 80014aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014ae:	4832      	ldr	r0, [pc, #200]	; (8001578 <Button+0x2e8>)
 80014b0:	f002 fdc2 	bl	8004038 <HAL_GPIO_ReadPin>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d12e      	bne.n	8001518 <Button+0x288>
					{
						HAL_Delay(10);
 80014ba:	200a      	movs	r0, #10
 80014bc:	f001 fafe 	bl	8002abc <HAL_Delay>
						while(1)
						{

							last = HAL_GetTick();
 80014c0:	f001 faf0 	bl	8002aa4 <HAL_GetTick>
 80014c4:	4603      	mov	r3, r0
 80014c6:	461a      	mov	r2, r3
 80014c8:	4b29      	ldr	r3, [pc, #164]	; (8001570 <Button+0x2e0>)
 80014ca:	601a      	str	r2, [r3, #0]
							if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_11) == 1)
 80014cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014d0:	4829      	ldr	r0, [pc, #164]	; (8001578 <Button+0x2e8>)
 80014d2:	f002 fdb1 	bl	8004038 <HAL_GPIO_ReadPin>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d1f1      	bne.n	80014c0 <Button+0x230>
							{
								if(TTTB6 == 0)
 80014dc:	4b2b      	ldr	r3, [pc, #172]	; (800158c <Button+0x2fc>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d109      	bne.n	80014f8 <Button+0x268>
								{
									TTTB6= 1;
 80014e4:	4b29      	ldr	r3, [pc, #164]	; (800158c <Button+0x2fc>)
 80014e6:	2201      	movs	r2, #1
 80014e8:	601a      	str	r2, [r3, #0]
									//TB6= 1;
									HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, RESET);
 80014ea:	2200      	movs	r2, #0
 80014ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014f0:	481e      	ldr	r0, [pc, #120]	; (800156c <Button+0x2dc>)
 80014f2:	f002 fdb9 	bl	8004068 <HAL_GPIO_WritePin>
 80014f6:	e00c      	b.n	8001512 <Button+0x282>
								}
								else if(TTTB6 == 1)
 80014f8:	4b24      	ldr	r3, [pc, #144]	; (800158c <Button+0x2fc>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d108      	bne.n	8001512 <Button+0x282>
								{
									TTTB6 = 0;
 8001500:	4b22      	ldr	r3, [pc, #136]	; (800158c <Button+0x2fc>)
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
									//TB6=0;
									 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, SET);
 8001506:	2201      	movs	r2, #1
 8001508:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800150c:	4817      	ldr	r0, [pc, #92]	; (800156c <Button+0x2dc>)
 800150e:	f002 fdab 	bl	8004068 <HAL_GPIO_WritePin>
								}
								HAL_Delay(10);
 8001512:	200a      	movs	r0, #10
 8001514:	f001 fad2 	bl	8002abc <HAL_Delay>
								break;
							}
						}
					}
	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13)==1)
 8001518:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800151c:	4813      	ldr	r0, [pc, #76]	; (800156c <Button+0x2dc>)
 800151e:	f002 fd8b 	bl	8004038 <HAL_GPIO_ReadPin>
 8001522:	4603      	mov	r3, r0
 8001524:	2b01      	cmp	r3, #1
 8001526:	d10c      	bne.n	8001542 <Button+0x2b2>
		  {
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, RESET);
 8001528:	2200      	movs	r2, #0
 800152a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800152e:	4812      	ldr	r0, [pc, #72]	; (8001578 <Button+0x2e8>)
 8001530:	f002 fd9a 	bl	8004068 <HAL_GPIO_WritePin>

			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, RESET);
 8001534:	2200      	movs	r2, #0
 8001536:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800153a:	480c      	ldr	r0, [pc, #48]	; (800156c <Button+0x2dc>)
 800153c:	f002 fd94 	bl	8004068 <HAL_GPIO_WritePin>
 8001540:	e00b      	b.n	800155a <Button+0x2ca>
		  }
	else
		  {
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, SET);
 8001542:	2201      	movs	r2, #1
 8001544:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001548:	480b      	ldr	r0, [pc, #44]	; (8001578 <Button+0x2e8>)
 800154a:	f002 fd8d 	bl	8004068 <HAL_GPIO_WritePin>

			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, SET);
 800154e:	2201      	movs	r2, #1
 8001550:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001554:	4805      	ldr	r0, [pc, #20]	; (800156c <Button+0x2dc>)
 8001556:	f002 fd87 	bl	8004068 <HAL_GPIO_WritePin>
		  }
	last = HAL_GetTick();
 800155a:	f001 faa3 	bl	8002aa4 <HAL_GetTick>
 800155e:	4603      	mov	r3, r0
 8001560:	461a      	mov	r2, r3
 8001562:	4b03      	ldr	r3, [pc, #12]	; (8001570 <Button+0x2e0>)
 8001564:	601a      	str	r2, [r3, #0]
}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40020400 	.word	0x40020400
 8001570:	200000bc 	.word	0x200000bc
 8001574:	200000a4 	.word	0x200000a4
 8001578:	40021000 	.word	0x40021000
 800157c:	200000a8 	.word	0x200000a8
 8001580:	200000ac 	.word	0x200000ac
 8001584:	200000b0 	.word	0x200000b0
 8001588:	200000b4 	.word	0x200000b4
 800158c:	200000b8 	.word	0x200000b8

08001590 <XuLy>:
void XuLy()
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
	if(strstr(rx_buffer2,"TB1=1") != NULL)
 8001594:	499a      	ldr	r1, [pc, #616]	; (8001800 <XuLy+0x270>)
 8001596:	489b      	ldr	r0, [pc, #620]	; (8001804 <XuLy+0x274>)
 8001598:	f006 f9bb 	bl	8007912 <strstr>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d00b      	beq.n	80015ba <XuLy+0x2a>
		{
			if(TTTB1==0)
 80015a2:	4b99      	ldr	r3, [pc, #612]	; (8001808 <XuLy+0x278>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d107      	bne.n	80015ba <XuLy+0x2a>
			{
				TTTB1=1;
 80015aa:	4b97      	ldr	r3, [pc, #604]	; (8001808 <XuLy+0x278>)
 80015ac:	2201      	movs	r2, #1
 80015ae:	601a      	str	r2, [r3, #0]
				//TB1=1;
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80015b0:	2200      	movs	r2, #0
 80015b2:	2101      	movs	r1, #1
 80015b4:	4895      	ldr	r0, [pc, #596]	; (800180c <XuLy+0x27c>)
 80015b6:	f002 fd57 	bl	8004068 <HAL_GPIO_WritePin>
			}
		}
	last = HAL_GetTick();
 80015ba:	f001 fa73 	bl	8002aa4 <HAL_GetTick>
 80015be:	4603      	mov	r3, r0
 80015c0:	461a      	mov	r2, r3
 80015c2:	4b93      	ldr	r3, [pc, #588]	; (8001810 <XuLy+0x280>)
 80015c4:	601a      	str	r2, [r3, #0]
	if(strstr(rx_buffer2,"TB1=0") != NULL)
 80015c6:	4993      	ldr	r1, [pc, #588]	; (8001814 <XuLy+0x284>)
 80015c8:	488e      	ldr	r0, [pc, #568]	; (8001804 <XuLy+0x274>)
 80015ca:	f006 f9a2 	bl	8007912 <strstr>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d00b      	beq.n	80015ec <XuLy+0x5c>
		{
		if(TTTB1==1)
 80015d4:	4b8c      	ldr	r3, [pc, #560]	; (8001808 <XuLy+0x278>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d107      	bne.n	80015ec <XuLy+0x5c>
			{
				TTTB1=0;
 80015dc:	4b8a      	ldr	r3, [pc, #552]	; (8001808 <XuLy+0x278>)
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
				//TB1=0;
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80015e2:	2201      	movs	r2, #1
 80015e4:	2101      	movs	r1, #1
 80015e6:	4889      	ldr	r0, [pc, #548]	; (800180c <XuLy+0x27c>)
 80015e8:	f002 fd3e 	bl	8004068 <HAL_GPIO_WritePin>
			}
		}
	last = HAL_GetTick();///////////////////////////////
 80015ec:	f001 fa5a 	bl	8002aa4 <HAL_GetTick>
 80015f0:	4603      	mov	r3, r0
 80015f2:	461a      	mov	r2, r3
 80015f4:	4b86      	ldr	r3, [pc, #536]	; (8001810 <XuLy+0x280>)
 80015f6:	601a      	str	r2, [r3, #0]
	if(strstr(rx_buffer2,"TB2=1") != NULL)
 80015f8:	4987      	ldr	r1, [pc, #540]	; (8001818 <XuLy+0x288>)
 80015fa:	4882      	ldr	r0, [pc, #520]	; (8001804 <XuLy+0x274>)
 80015fc:	f006 f989 	bl	8007912 <strstr>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d00c      	beq.n	8001620 <XuLy+0x90>
		{
		if(TTTB2==0)
 8001606:	4b85      	ldr	r3, [pc, #532]	; (800181c <XuLy+0x28c>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d108      	bne.n	8001620 <XuLy+0x90>
			{
				TTTB2=1; //TB2=1;
 800160e:	4b83      	ldr	r3, [pc, #524]	; (800181c <XuLy+0x28c>)
 8001610:	2201      	movs	r2, #1
 8001612:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8001614:	2200      	movs	r2, #0
 8001616:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800161a:	4881      	ldr	r0, [pc, #516]	; (8001820 <XuLy+0x290>)
 800161c:	f002 fd24 	bl	8004068 <HAL_GPIO_WritePin>
			}
		}
	last = HAL_GetTick();
 8001620:	f001 fa40 	bl	8002aa4 <HAL_GetTick>
 8001624:	4603      	mov	r3, r0
 8001626:	461a      	mov	r2, r3
 8001628:	4b79      	ldr	r3, [pc, #484]	; (8001810 <XuLy+0x280>)
 800162a:	601a      	str	r2, [r3, #0]
	if(strstr(rx_buffer2,"TB2=0") != NULL)
 800162c:	497d      	ldr	r1, [pc, #500]	; (8001824 <XuLy+0x294>)
 800162e:	4875      	ldr	r0, [pc, #468]	; (8001804 <XuLy+0x274>)
 8001630:	f006 f96f 	bl	8007912 <strstr>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d00c      	beq.n	8001654 <XuLy+0xc4>
		{
		if(TTTB2==1)
 800163a:	4b78      	ldr	r3, [pc, #480]	; (800181c <XuLy+0x28c>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d108      	bne.n	8001654 <XuLy+0xc4>
			{
				TTTB2=0; //TB2=0;
 8001642:	4b76      	ldr	r3, [pc, #472]	; (800181c <XuLy+0x28c>)
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
 8001648:	2201      	movs	r2, #1
 800164a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800164e:	4874      	ldr	r0, [pc, #464]	; (8001820 <XuLy+0x290>)
 8001650:	f002 fd0a 	bl	8004068 <HAL_GPIO_WritePin>
			}
		}//////////////////////////////////////////////////
	last = HAL_GetTick();
 8001654:	f001 fa26 	bl	8002aa4 <HAL_GetTick>
 8001658:	4603      	mov	r3, r0
 800165a:	461a      	mov	r2, r3
 800165c:	4b6c      	ldr	r3, [pc, #432]	; (8001810 <XuLy+0x280>)
 800165e:	601a      	str	r2, [r3, #0]
	if(strstr(rx_buffer2,"TB3=1") != NULL)
 8001660:	4971      	ldr	r1, [pc, #452]	; (8001828 <XuLy+0x298>)
 8001662:	4868      	ldr	r0, [pc, #416]	; (8001804 <XuLy+0x274>)
 8001664:	f006 f955 	bl	8007912 <strstr>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d00b      	beq.n	8001686 <XuLy+0xf6>
			{
			if(TTTB3==0)
 800166e:	4b6f      	ldr	r3, [pc, #444]	; (800182c <XuLy+0x29c>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d107      	bne.n	8001686 <XuLy+0xf6>
				{
					TTTB3=1; //TB3=1;
 8001676:	4b6d      	ldr	r3, [pc, #436]	; (800182c <XuLy+0x29c>)
 8001678:	2201      	movs	r2, #1
 800167a:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 800167c:	2200      	movs	r2, #0
 800167e:	2104      	movs	r1, #4
 8001680:	4862      	ldr	r0, [pc, #392]	; (800180c <XuLy+0x27c>)
 8001682:	f002 fcf1 	bl	8004068 <HAL_GPIO_WritePin>
				}
			}
	last = HAL_GetTick();
 8001686:	f001 fa0d 	bl	8002aa4 <HAL_GetTick>
 800168a:	4603      	mov	r3, r0
 800168c:	461a      	mov	r2, r3
 800168e:	4b60      	ldr	r3, [pc, #384]	; (8001810 <XuLy+0x280>)
 8001690:	601a      	str	r2, [r3, #0]
		if(strstr(rx_buffer2,"TB3=0") != NULL)
 8001692:	4967      	ldr	r1, [pc, #412]	; (8001830 <XuLy+0x2a0>)
 8001694:	485b      	ldr	r0, [pc, #364]	; (8001804 <XuLy+0x274>)
 8001696:	f006 f93c 	bl	8007912 <strstr>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d00b      	beq.n	80016b8 <XuLy+0x128>
			{
			if(TTTB3==1)
 80016a0:	4b62      	ldr	r3, [pc, #392]	; (800182c <XuLy+0x29c>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d107      	bne.n	80016b8 <XuLy+0x128>
				{
					TTTB3=0; //TB3=0;
 80016a8:	4b60      	ldr	r3, [pc, #384]	; (800182c <XuLy+0x29c>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 80016ae:	2201      	movs	r2, #1
 80016b0:	2104      	movs	r1, #4
 80016b2:	4856      	ldr	r0, [pc, #344]	; (800180c <XuLy+0x27c>)
 80016b4:	f002 fcd8 	bl	8004068 <HAL_GPIO_WritePin>
				}
			}////////////////////////////////////////////////////
		last = HAL_GetTick();
 80016b8:	f001 f9f4 	bl	8002aa4 <HAL_GetTick>
 80016bc:	4603      	mov	r3, r0
 80016be:	461a      	mov	r2, r3
 80016c0:	4b53      	ldr	r3, [pc, #332]	; (8001810 <XuLy+0x280>)
 80016c2:	601a      	str	r2, [r3, #0]
		if(strstr(rx_buffer2,"TB4=1") != NULL)
 80016c4:	495b      	ldr	r1, [pc, #364]	; (8001834 <XuLy+0x2a4>)
 80016c6:	484f      	ldr	r0, [pc, #316]	; (8001804 <XuLy+0x274>)
 80016c8:	f006 f923 	bl	8007912 <strstr>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d00c      	beq.n	80016ec <XuLy+0x15c>
					{
					if(TTTB4==0)
 80016d2:	4b59      	ldr	r3, [pc, #356]	; (8001838 <XuLy+0x2a8>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d108      	bne.n	80016ec <XuLy+0x15c>
						{
							TTTB4=1; //TB4=1;
 80016da:	4b57      	ldr	r3, [pc, #348]	; (8001838 <XuLy+0x2a8>)
 80016dc:	2201      	movs	r2, #1
 80016de:	601a      	str	r2, [r3, #0]
							HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET); ////////////////////////////////////
 80016e0:	2200      	movs	r2, #0
 80016e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016e6:	484e      	ldr	r0, [pc, #312]	; (8001820 <XuLy+0x290>)
 80016e8:	f002 fcbe 	bl	8004068 <HAL_GPIO_WritePin>
						}
					}
			last = HAL_GetTick();
 80016ec:	f001 f9da 	bl	8002aa4 <HAL_GetTick>
 80016f0:	4603      	mov	r3, r0
 80016f2:	461a      	mov	r2, r3
 80016f4:	4b46      	ldr	r3, [pc, #280]	; (8001810 <XuLy+0x280>)
 80016f6:	601a      	str	r2, [r3, #0]
				if(strstr(rx_buffer2,"TB4=0") != NULL)
 80016f8:	4950      	ldr	r1, [pc, #320]	; (800183c <XuLy+0x2ac>)
 80016fa:	4842      	ldr	r0, [pc, #264]	; (8001804 <XuLy+0x274>)
 80016fc:	f006 f909 	bl	8007912 <strstr>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d00c      	beq.n	8001720 <XuLy+0x190>
					{
					if(TTTB4==1)
 8001706:	4b4c      	ldr	r3, [pc, #304]	; (8001838 <XuLy+0x2a8>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d108      	bne.n	8001720 <XuLy+0x190>
						{
							TTTB4=0;  //TB4=0;
 800170e:	4b4a      	ldr	r3, [pc, #296]	; (8001838 <XuLy+0x2a8>)
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
							HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 8001714:	2201      	movs	r2, #1
 8001716:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800171a:	4841      	ldr	r0, [pc, #260]	; (8001820 <XuLy+0x290>)
 800171c:	f002 fca4 	bl	8004068 <HAL_GPIO_WritePin>
						}
					}///////////////////////////////////////////
				last = HAL_GetTick();
 8001720:	f001 f9c0 	bl	8002aa4 <HAL_GetTick>
 8001724:	4603      	mov	r3, r0
 8001726:	461a      	mov	r2, r3
 8001728:	4b39      	ldr	r3, [pc, #228]	; (8001810 <XuLy+0x280>)
 800172a:	601a      	str	r2, [r3, #0]
				if(strstr(rx_buffer2,"TB5=1") != NULL)
 800172c:	4944      	ldr	r1, [pc, #272]	; (8001840 <XuLy+0x2b0>)
 800172e:	4835      	ldr	r0, [pc, #212]	; (8001804 <XuLy+0x274>)
 8001730:	f006 f8ef 	bl	8007912 <strstr>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d00c      	beq.n	8001754 <XuLy+0x1c4>
							{
							if(TTTB5==0)
 800173a:	4b42      	ldr	r3, [pc, #264]	; (8001844 <XuLy+0x2b4>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d108      	bne.n	8001754 <XuLy+0x1c4>
								{
									TTTB5=1;
 8001742:	4b40      	ldr	r3, [pc, #256]	; (8001844 <XuLy+0x2b4>)
 8001744:	2201      	movs	r2, #1
 8001746:	601a      	str	r2, [r3, #0]
									//TB5=1;
									HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 8001748:	2200      	movs	r2, #0
 800174a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800174e:	4834      	ldr	r0, [pc, #208]	; (8001820 <XuLy+0x290>)
 8001750:	f002 fc8a 	bl	8004068 <HAL_GPIO_WritePin>
								}
							}
					last = HAL_GetTick();
 8001754:	f001 f9a6 	bl	8002aa4 <HAL_GetTick>
 8001758:	4603      	mov	r3, r0
 800175a:	461a      	mov	r2, r3
 800175c:	4b2c      	ldr	r3, [pc, #176]	; (8001810 <XuLy+0x280>)
 800175e:	601a      	str	r2, [r3, #0]
						if(strstr(rx_buffer2,"TB5=0") != NULL)
 8001760:	4939      	ldr	r1, [pc, #228]	; (8001848 <XuLy+0x2b8>)
 8001762:	4828      	ldr	r0, [pc, #160]	; (8001804 <XuLy+0x274>)
 8001764:	f006 f8d5 	bl	8007912 <strstr>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d00c      	beq.n	8001788 <XuLy+0x1f8>
							{
							if(TTTB5==1)
 800176e:	4b35      	ldr	r3, [pc, #212]	; (8001844 <XuLy+0x2b4>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d108      	bne.n	8001788 <XuLy+0x1f8>
								{
									TTTB5=0;
 8001776:	4b33      	ldr	r3, [pc, #204]	; (8001844 <XuLy+0x2b4>)
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
									//TB5=0;
									HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
 800177c:	2201      	movs	r2, #1
 800177e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001782:	4827      	ldr	r0, [pc, #156]	; (8001820 <XuLy+0x290>)
 8001784:	f002 fc70 	bl	8004068 <HAL_GPIO_WritePin>
								}
							}/////////////////////////////////////////////////
						last = HAL_GetTick();
 8001788:	f001 f98c 	bl	8002aa4 <HAL_GetTick>
 800178c:	4603      	mov	r3, r0
 800178e:	461a      	mov	r2, r3
 8001790:	4b1f      	ldr	r3, [pc, #124]	; (8001810 <XuLy+0x280>)
 8001792:	601a      	str	r2, [r3, #0]
						if(strstr(rx_buffer2,"TB6=1") != NULL)
 8001794:	492d      	ldr	r1, [pc, #180]	; (800184c <XuLy+0x2bc>)
 8001796:	481b      	ldr	r0, [pc, #108]	; (8001804 <XuLy+0x274>)
 8001798:	f006 f8bb 	bl	8007912 <strstr>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d00c      	beq.n	80017bc <XuLy+0x22c>
									{
									if(TTTB6==0)
 80017a2:	4b2b      	ldr	r3, [pc, #172]	; (8001850 <XuLy+0x2c0>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d108      	bne.n	80017bc <XuLy+0x22c>
										{
											TTTB6=1;
 80017aa:	4b29      	ldr	r3, [pc, #164]	; (8001850 <XuLy+0x2c0>)
 80017ac:	2201      	movs	r2, #1
 80017ae:	601a      	str	r2, [r3, #0]
											//TB6=1;
											HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80017b0:	2200      	movs	r2, #0
 80017b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017b6:	4815      	ldr	r0, [pc, #84]	; (800180c <XuLy+0x27c>)
 80017b8:	f002 fc56 	bl	8004068 <HAL_GPIO_WritePin>
										}
									}
							last = HAL_GetTick();
 80017bc:	f001 f972 	bl	8002aa4 <HAL_GetTick>
 80017c0:	4603      	mov	r3, r0
 80017c2:	461a      	mov	r2, r3
 80017c4:	4b12      	ldr	r3, [pc, #72]	; (8001810 <XuLy+0x280>)
 80017c6:	601a      	str	r2, [r3, #0]
								if(strstr(rx_buffer2,"TB6=0") != NULL)
 80017c8:	4922      	ldr	r1, [pc, #136]	; (8001854 <XuLy+0x2c4>)
 80017ca:	480e      	ldr	r0, [pc, #56]	; (8001804 <XuLy+0x274>)
 80017cc:	f006 f8a1 	bl	8007912 <strstr>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d00c      	beq.n	80017f0 <XuLy+0x260>
									{
									if(TTTB6==1)
 80017d6:	4b1e      	ldr	r3, [pc, #120]	; (8001850 <XuLy+0x2c0>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d108      	bne.n	80017f0 <XuLy+0x260>
										{
											TTTB6=0;
 80017de:	4b1c      	ldr	r3, [pc, #112]	; (8001850 <XuLy+0x2c0>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
											//TB6=0;
											HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80017e4:	2201      	movs	r2, #1
 80017e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017ea:	4808      	ldr	r0, [pc, #32]	; (800180c <XuLy+0x27c>)
 80017ec:	f002 fc3c 	bl	8004068 <HAL_GPIO_WritePin>
										}
									}/////////////////////////////////////////////////
								last = HAL_GetTick();
 80017f0:	f001 f958 	bl	8002aa4 <HAL_GetTick>
 80017f4:	4603      	mov	r3, r0
 80017f6:	461a      	mov	r2, r3
 80017f8:	4b05      	ldr	r3, [pc, #20]	; (8001810 <XuLy+0x280>)
 80017fa:	601a      	str	r2, [r3, #0]
}
 80017fc:	bf00      	nop
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	08008bcc 	.word	0x08008bcc
 8001804:	20000558 	.word	0x20000558
 8001808:	200000a4 	.word	0x200000a4
 800180c:	40020400 	.word	0x40020400
 8001810:	200000bc 	.word	0x200000bc
 8001814:	08008bd4 	.word	0x08008bd4
 8001818:	08008bdc 	.word	0x08008bdc
 800181c:	200000a8 	.word	0x200000a8
 8001820:	40021000 	.word	0x40021000
 8001824:	08008be4 	.word	0x08008be4
 8001828:	08008bec 	.word	0x08008bec
 800182c:	200000ac 	.word	0x200000ac
 8001830:	08008bf4 	.word	0x08008bf4
 8001834:	08008bfc 	.word	0x08008bfc
 8001838:	200000b0 	.word	0x200000b0
 800183c:	08008c04 	.word	0x08008c04
 8001840:	08008c0c 	.word	0x08008c0c
 8001844:	200000b4 	.word	0x200000b4
 8001848:	08008c14 	.word	0x08008c14
 800184c:	08008c1c 	.word	0x08008c1c
 8001850:	200000b8 	.word	0x200000b8
 8001854:	08008c24 	.word	0x08008c24

08001858 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
if(huart -> Instance == USART2)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a09      	ldr	r2, [pc, #36]	; (800188c <HAL_UART_RxCpltCallback+0x34>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d10c      	bne.n	8001884 <HAL_UART_RxCpltCallback+0x2c>
		{
		ReceivedEnd();
 800186a:	f000 f817 	bl	800189c <ReceivedEnd>
		HAL_UART_Receive_IT(&huart2,&rx_data2,1);
 800186e:	2201      	movs	r2, #1
 8001870:	4907      	ldr	r1, [pc, #28]	; (8001890 <HAL_UART_RxCpltCallback+0x38>)
 8001872:	4808      	ldr	r0, [pc, #32]	; (8001894 <HAL_UART_RxCpltCallback+0x3c>)
 8001874:	f004 ff31 	bl	80066da <HAL_UART_Receive_IT>
		last = HAL_GetTick() ;
 8001878:	f001 f914 	bl	8002aa4 <HAL_GetTick>
 800187c:	4603      	mov	r3, r0
 800187e:	461a      	mov	r2, r3
 8001880:	4b05      	ldr	r3, [pc, #20]	; (8001898 <HAL_UART_RxCpltCallback+0x40>)
 8001882:	601a      	str	r2, [r3, #0]

		}
}
 8001884:	bf00      	nop
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40004400 	.word	0x40004400
 8001890:	2000081d 	.word	0x2000081d
 8001894:	200008d0 	.word	0x200008d0
 8001898:	200000bc 	.word	0x200000bc

0800189c <ReceivedEnd>:
void 	ReceivedEnd(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
	//xóa bộ đệm buffer
	if (rx_data2 != '\n')
 80018a0:	4b0c      	ldr	r3, [pc, #48]	; (80018d4 <ReceivedEnd+0x38>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	2b0a      	cmp	r3, #10
 80018a6:	d00b      	beq.n	80018c0 <ReceivedEnd+0x24>
	{
		rx_buffer2[rx_index2++] = rx_data2;
 80018a8:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <ReceivedEnd+0x3c>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	1c5a      	adds	r2, r3, #1
 80018ae:	b2d1      	uxtb	r1, r2
 80018b0:	4a09      	ldr	r2, [pc, #36]	; (80018d8 <ReceivedEnd+0x3c>)
 80018b2:	7011      	strb	r1, [r2, #0]
 80018b4:	461a      	mov	r2, r3
 80018b6:	4b07      	ldr	r3, [pc, #28]	; (80018d4 <ReceivedEnd+0x38>)
 80018b8:	7819      	ldrb	r1, [r3, #0]
 80018ba:	4b08      	ldr	r3, [pc, #32]	; (80018dc <ReceivedEnd+0x40>)
 80018bc:	5499      	strb	r1, [r3, r2]
		//printf("stm nhan :  %s\n",rx_buffer2);
		XuLy();
		clearbufferEnd();
	}

}
 80018be:	e006      	b.n	80018ce <ReceivedEnd+0x32>
		rx_index2 = 0;
 80018c0:	4b05      	ldr	r3, [pc, #20]	; (80018d8 <ReceivedEnd+0x3c>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	701a      	strb	r2, [r3, #0]
		XuLy();
 80018c6:	f7ff fe63 	bl	8001590 <XuLy>
		clearbufferEnd();
 80018ca:	f000 f809 	bl	80018e0 <clearbufferEnd>
}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	2000081d 	.word	0x2000081d
 80018d8:	2000081e 	.word	0x2000081e
 80018dc:	20000558 	.word	0x20000558

080018e0 <clearbufferEnd>:
void clearbufferEnd(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
	for(int i = 0 ; i < size ; i++)
 80018e6:	2300      	movs	r3, #0
 80018e8:	607b      	str	r3, [r7, #4]
 80018ea:	e007      	b.n	80018fc <clearbufferEnd+0x1c>
		{
			rx_buffer2[i] = 0;
 80018ec:	4a0a      	ldr	r2, [pc, #40]	; (8001918 <clearbufferEnd+0x38>)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4413      	add	r3, r2
 80018f2:	2200      	movs	r2, #0
 80018f4:	701a      	strb	r2, [r3, #0]
	for(int i = 0 ; i < size ; i++)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	3301      	adds	r3, #1
 80018fa:	607b      	str	r3, [r7, #4]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001902:	dbf3      	blt.n	80018ec <clearbufferEnd+0xc>
		}
		rx_index2 = 0;
 8001904:	4b05      	ldr	r3, [pc, #20]	; (800191c <clearbufferEnd+0x3c>)
 8001906:	2200      	movs	r2, #0
 8001908:	701a      	strb	r2, [r3, #0]
}
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	20000558 	.word	0x20000558
 800191c:	2000081e 	.word	0x2000081e

08001920 <Data>:

void Data(unsigned int temp, unsigned int gas, unsigned int TTTB1 , unsigned int TTTB2,  unsigned int TTTB3,  unsigned int TTTB4, unsigned int TTTB5, unsigned int TTTB6)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
 800192c:	603b      	str	r3, [r7, #0]
	for(int i = 0 ; i <= 100; i++)
 800192e:	2300      	movs	r3, #0
 8001930:	617b      	str	r3, [r7, #20]
 8001932:	e011      	b.n	8001958 <Data+0x38>
		{
			Str_temp[i] = 0;
 8001934:	4a82      	ldr	r2, [pc, #520]	; (8001b40 <Data+0x220>)
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	4413      	add	r3, r2
 800193a:	2200      	movs	r2, #0
 800193c:	701a      	strb	r2, [r3, #0]
			Str_gas[i] = 0;
 800193e:	4a81      	ldr	r2, [pc, #516]	; (8001b44 <Data+0x224>)
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	4413      	add	r3, r2
 8001944:	2200      	movs	r2, #0
 8001946:	701a      	strb	r2, [r3, #0]
			DATA[i] = 0;
 8001948:	4a7f      	ldr	r2, [pc, #508]	; (8001b48 <Data+0x228>)
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	4413      	add	r3, r2
 800194e:	2200      	movs	r2, #0
 8001950:	701a      	strb	r2, [r3, #0]
	for(int i = 0 ; i <= 100; i++)
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	3301      	adds	r3, #1
 8001956:	617b      	str	r3, [r7, #20]
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	2b64      	cmp	r3, #100	; 0x64
 800195c:	ddea      	ble.n	8001934 <Data+0x14>
		}
	for(int i = 0 ; i <= 5; i++)
 800195e:	2300      	movs	r3, #0
 8001960:	613b      	str	r3, [r7, #16]
 8001962:	e020      	b.n	80019a6 <Data+0x86>
			{
				Str_TB1[i] = 0;
 8001964:	4a79      	ldr	r2, [pc, #484]	; (8001b4c <Data+0x22c>)
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	4413      	add	r3, r2
 800196a:	2200      	movs	r2, #0
 800196c:	701a      	strb	r2, [r3, #0]
				Str_TB2[i] = 0;
 800196e:	4a78      	ldr	r2, [pc, #480]	; (8001b50 <Data+0x230>)
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	4413      	add	r3, r2
 8001974:	2200      	movs	r2, #0
 8001976:	701a      	strb	r2, [r3, #0]
				Str_TB3[i] = 0;
 8001978:	4a76      	ldr	r2, [pc, #472]	; (8001b54 <Data+0x234>)
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	4413      	add	r3, r2
 800197e:	2200      	movs	r2, #0
 8001980:	701a      	strb	r2, [r3, #0]
				Str_TB4[i] = 0;
 8001982:	4a75      	ldr	r2, [pc, #468]	; (8001b58 <Data+0x238>)
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	4413      	add	r3, r2
 8001988:	2200      	movs	r2, #0
 800198a:	701a      	strb	r2, [r3, #0]
				Str_TB5[i] = 0;
 800198c:	4a73      	ldr	r2, [pc, #460]	; (8001b5c <Data+0x23c>)
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	4413      	add	r3, r2
 8001992:	2200      	movs	r2, #0
 8001994:	701a      	strb	r2, [r3, #0]
				Str_TB6[i] = 0;
 8001996:	4a72      	ldr	r2, [pc, #456]	; (8001b60 <Data+0x240>)
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	4413      	add	r3, r2
 800199c:	2200      	movs	r2, #0
 800199e:	701a      	strb	r2, [r3, #0]
	for(int i = 0 ; i <= 5; i++)
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	3301      	adds	r3, #1
 80019a4:	613b      	str	r3, [r7, #16]
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	2b05      	cmp	r3, #5
 80019aa:	dddb      	ble.n	8001964 <Data+0x44>
			}

		sprintf(Str_temp, "%d", temp);
 80019ac:	68fa      	ldr	r2, [r7, #12]
 80019ae:	496d      	ldr	r1, [pc, #436]	; (8001b64 <Data+0x244>)
 80019b0:	4863      	ldr	r0, [pc, #396]	; (8001b40 <Data+0x220>)
 80019b2:	f005 ff7f 	bl	80078b4 <siprintf>
		sprintf(Str_gas, "%d", gas);
 80019b6:	68ba      	ldr	r2, [r7, #8]
 80019b8:	496a      	ldr	r1, [pc, #424]	; (8001b64 <Data+0x244>)
 80019ba:	4862      	ldr	r0, [pc, #392]	; (8001b44 <Data+0x224>)
 80019bc:	f005 ff7a 	bl	80078b4 <siprintf>
		sprintf(Str_TB1, "%d", TTTB1);
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	4968      	ldr	r1, [pc, #416]	; (8001b64 <Data+0x244>)
 80019c4:	4861      	ldr	r0, [pc, #388]	; (8001b4c <Data+0x22c>)
 80019c6:	f005 ff75 	bl	80078b4 <siprintf>
		sprintf(Str_TB2, "%d", TTTB2);
 80019ca:	683a      	ldr	r2, [r7, #0]
 80019cc:	4965      	ldr	r1, [pc, #404]	; (8001b64 <Data+0x244>)
 80019ce:	4860      	ldr	r0, [pc, #384]	; (8001b50 <Data+0x230>)
 80019d0:	f005 ff70 	bl	80078b4 <siprintf>
		sprintf(Str_TB3, "%d", TTTB3);
 80019d4:	6a3a      	ldr	r2, [r7, #32]
 80019d6:	4963      	ldr	r1, [pc, #396]	; (8001b64 <Data+0x244>)
 80019d8:	485e      	ldr	r0, [pc, #376]	; (8001b54 <Data+0x234>)
 80019da:	f005 ff6b 	bl	80078b4 <siprintf>
		sprintf(Str_TB4, "%d", TTTB4);
 80019de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019e0:	4960      	ldr	r1, [pc, #384]	; (8001b64 <Data+0x244>)
 80019e2:	485d      	ldr	r0, [pc, #372]	; (8001b58 <Data+0x238>)
 80019e4:	f005 ff66 	bl	80078b4 <siprintf>
		sprintf(Str_TB5, "%d", TTTB5);
 80019e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019ea:	495e      	ldr	r1, [pc, #376]	; (8001b64 <Data+0x244>)
 80019ec:	485b      	ldr	r0, [pc, #364]	; (8001b5c <Data+0x23c>)
 80019ee:	f005 ff61 	bl	80078b4 <siprintf>
		sprintf(Str_TB6, "%d", TTTB6);
 80019f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019f4:	495b      	ldr	r1, [pc, #364]	; (8001b64 <Data+0x244>)
 80019f6:	485a      	ldr	r0, [pc, #360]	; (8001b60 <Data+0x240>)
 80019f8:	f005 ff5c 	bl	80078b4 <siprintf>

				strcat(DATA,"A");
 80019fc:	4852      	ldr	r0, [pc, #328]	; (8001b48 <Data+0x228>)
 80019fe:	f7fe fbf9 	bl	80001f4 <strlen>
 8001a02:	4603      	mov	r3, r0
 8001a04:	461a      	mov	r2, r3
 8001a06:	4b50      	ldr	r3, [pc, #320]	; (8001b48 <Data+0x228>)
 8001a08:	4413      	add	r3, r2
 8001a0a:	4957      	ldr	r1, [pc, #348]	; (8001b68 <Data+0x248>)
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	460b      	mov	r3, r1
 8001a10:	881b      	ldrh	r3, [r3, #0]
 8001a12:	8013      	strh	r3, [r2, #0]
				strcat(DATA,Str_temp);
 8001a14:	494a      	ldr	r1, [pc, #296]	; (8001b40 <Data+0x220>)
 8001a16:	484c      	ldr	r0, [pc, #304]	; (8001b48 <Data+0x228>)
 8001a18:	f005 ff6c 	bl	80078f4 <strcat>

				strcat(DATA,"B");
 8001a1c:	484a      	ldr	r0, [pc, #296]	; (8001b48 <Data+0x228>)
 8001a1e:	f7fe fbe9 	bl	80001f4 <strlen>
 8001a22:	4603      	mov	r3, r0
 8001a24:	461a      	mov	r2, r3
 8001a26:	4b48      	ldr	r3, [pc, #288]	; (8001b48 <Data+0x228>)
 8001a28:	4413      	add	r3, r2
 8001a2a:	4950      	ldr	r1, [pc, #320]	; (8001b6c <Data+0x24c>)
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	460b      	mov	r3, r1
 8001a30:	881b      	ldrh	r3, [r3, #0]
 8001a32:	8013      	strh	r3, [r2, #0]
				strcat(DATA,Str_gas);
 8001a34:	4943      	ldr	r1, [pc, #268]	; (8001b44 <Data+0x224>)
 8001a36:	4844      	ldr	r0, [pc, #272]	; (8001b48 <Data+0x228>)
 8001a38:	f005 ff5c 	bl	80078f4 <strcat>

				strcat(DATA,"C");
 8001a3c:	4842      	ldr	r0, [pc, #264]	; (8001b48 <Data+0x228>)
 8001a3e:	f7fe fbd9 	bl	80001f4 <strlen>
 8001a42:	4603      	mov	r3, r0
 8001a44:	461a      	mov	r2, r3
 8001a46:	4b40      	ldr	r3, [pc, #256]	; (8001b48 <Data+0x228>)
 8001a48:	4413      	add	r3, r2
 8001a4a:	4949      	ldr	r1, [pc, #292]	; (8001b70 <Data+0x250>)
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	460b      	mov	r3, r1
 8001a50:	881b      	ldrh	r3, [r3, #0]
 8001a52:	8013      	strh	r3, [r2, #0]
				strcat(DATA,Str_TB1);
 8001a54:	493d      	ldr	r1, [pc, #244]	; (8001b4c <Data+0x22c>)
 8001a56:	483c      	ldr	r0, [pc, #240]	; (8001b48 <Data+0x228>)
 8001a58:	f005 ff4c 	bl	80078f4 <strcat>

				strcat(DATA,"D");
 8001a5c:	483a      	ldr	r0, [pc, #232]	; (8001b48 <Data+0x228>)
 8001a5e:	f7fe fbc9 	bl	80001f4 <strlen>
 8001a62:	4603      	mov	r3, r0
 8001a64:	461a      	mov	r2, r3
 8001a66:	4b38      	ldr	r3, [pc, #224]	; (8001b48 <Data+0x228>)
 8001a68:	4413      	add	r3, r2
 8001a6a:	4942      	ldr	r1, [pc, #264]	; (8001b74 <Data+0x254>)
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	460b      	mov	r3, r1
 8001a70:	881b      	ldrh	r3, [r3, #0]
 8001a72:	8013      	strh	r3, [r2, #0]
				strcat(DATA,Str_TB2);
 8001a74:	4936      	ldr	r1, [pc, #216]	; (8001b50 <Data+0x230>)
 8001a76:	4834      	ldr	r0, [pc, #208]	; (8001b48 <Data+0x228>)
 8001a78:	f005 ff3c 	bl	80078f4 <strcat>

				strcat(DATA,"E");
 8001a7c:	4832      	ldr	r0, [pc, #200]	; (8001b48 <Data+0x228>)
 8001a7e:	f7fe fbb9 	bl	80001f4 <strlen>
 8001a82:	4603      	mov	r3, r0
 8001a84:	461a      	mov	r2, r3
 8001a86:	4b30      	ldr	r3, [pc, #192]	; (8001b48 <Data+0x228>)
 8001a88:	4413      	add	r3, r2
 8001a8a:	493b      	ldr	r1, [pc, #236]	; (8001b78 <Data+0x258>)
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	460b      	mov	r3, r1
 8001a90:	881b      	ldrh	r3, [r3, #0]
 8001a92:	8013      	strh	r3, [r2, #0]
				strcat(DATA,Str_TB3);
 8001a94:	492f      	ldr	r1, [pc, #188]	; (8001b54 <Data+0x234>)
 8001a96:	482c      	ldr	r0, [pc, #176]	; (8001b48 <Data+0x228>)
 8001a98:	f005 ff2c 	bl	80078f4 <strcat>

				strcat(DATA,"F");
 8001a9c:	482a      	ldr	r0, [pc, #168]	; (8001b48 <Data+0x228>)
 8001a9e:	f7fe fba9 	bl	80001f4 <strlen>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	4b28      	ldr	r3, [pc, #160]	; (8001b48 <Data+0x228>)
 8001aa8:	4413      	add	r3, r2
 8001aaa:	4934      	ldr	r1, [pc, #208]	; (8001b7c <Data+0x25c>)
 8001aac:	461a      	mov	r2, r3
 8001aae:	460b      	mov	r3, r1
 8001ab0:	881b      	ldrh	r3, [r3, #0]
 8001ab2:	8013      	strh	r3, [r2, #0]
				strcat(DATA,Str_TB4);
 8001ab4:	4928      	ldr	r1, [pc, #160]	; (8001b58 <Data+0x238>)
 8001ab6:	4824      	ldr	r0, [pc, #144]	; (8001b48 <Data+0x228>)
 8001ab8:	f005 ff1c 	bl	80078f4 <strcat>

				strcat(DATA,"G");
 8001abc:	4822      	ldr	r0, [pc, #136]	; (8001b48 <Data+0x228>)
 8001abe:	f7fe fb99 	bl	80001f4 <strlen>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	4b20      	ldr	r3, [pc, #128]	; (8001b48 <Data+0x228>)
 8001ac8:	4413      	add	r3, r2
 8001aca:	492d      	ldr	r1, [pc, #180]	; (8001b80 <Data+0x260>)
 8001acc:	461a      	mov	r2, r3
 8001ace:	460b      	mov	r3, r1
 8001ad0:	881b      	ldrh	r3, [r3, #0]
 8001ad2:	8013      	strh	r3, [r2, #0]
				strcat(DATA,Str_TB5);
 8001ad4:	4921      	ldr	r1, [pc, #132]	; (8001b5c <Data+0x23c>)
 8001ad6:	481c      	ldr	r0, [pc, #112]	; (8001b48 <Data+0x228>)
 8001ad8:	f005 ff0c 	bl	80078f4 <strcat>

				strcat(DATA,"H");
 8001adc:	481a      	ldr	r0, [pc, #104]	; (8001b48 <Data+0x228>)
 8001ade:	f7fe fb89 	bl	80001f4 <strlen>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	4b18      	ldr	r3, [pc, #96]	; (8001b48 <Data+0x228>)
 8001ae8:	4413      	add	r3, r2
 8001aea:	4926      	ldr	r1, [pc, #152]	; (8001b84 <Data+0x264>)
 8001aec:	461a      	mov	r2, r3
 8001aee:	460b      	mov	r3, r1
 8001af0:	881b      	ldrh	r3, [r3, #0]
 8001af2:	8013      	strh	r3, [r2, #0]
				strcat(DATA,Str_TB6);
 8001af4:	491a      	ldr	r1, [pc, #104]	; (8001b60 <Data+0x240>)
 8001af6:	4814      	ldr	r0, [pc, #80]	; (8001b48 <Data+0x228>)
 8001af8:	f005 fefc 	bl	80078f4 <strcat>
				strcat(DATA,"J");
 8001afc:	4812      	ldr	r0, [pc, #72]	; (8001b48 <Data+0x228>)
 8001afe:	f7fe fb79 	bl	80001f4 <strlen>
 8001b02:	4603      	mov	r3, r0
 8001b04:	461a      	mov	r2, r3
 8001b06:	4b10      	ldr	r3, [pc, #64]	; (8001b48 <Data+0x228>)
 8001b08:	4413      	add	r3, r2
 8001b0a:	491f      	ldr	r1, [pc, #124]	; (8001b88 <Data+0x268>)
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	460b      	mov	r3, r1
 8001b10:	881b      	ldrh	r3, [r3, #0]
 8001b12:	8013      	strh	r3, [r2, #0]
				strcat(DATA,"\r\n");
 8001b14:	480c      	ldr	r0, [pc, #48]	; (8001b48 <Data+0x228>)
 8001b16:	f7fe fb6d 	bl	80001f4 <strlen>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	4b0a      	ldr	r3, [pc, #40]	; (8001b48 <Data+0x228>)
 8001b20:	4413      	add	r3, r2
 8001b22:	4a1a      	ldr	r2, [pc, #104]	; (8001b8c <Data+0x26c>)
 8001b24:	8811      	ldrh	r1, [r2, #0]
 8001b26:	7892      	ldrb	r2, [r2, #2]
 8001b28:	8019      	strh	r1, [r3, #0]
 8001b2a:	709a      	strb	r2, [r3, #2]
		//HAL_Delay(300);
		last = HAL_GetTick();
 8001b2c:	f000 ffba 	bl	8002aa4 <HAL_GetTick>
 8001b30:	4603      	mov	r3, r0
 8001b32:	461a      	mov	r2, r3
 8001b34:	4b16      	ldr	r3, [pc, #88]	; (8001b90 <Data+0x270>)
 8001b36:	601a      	str	r2, [r3, #0]

}
 8001b38:	bf00      	nop
 8001b3a:	3718      	adds	r7, #24
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	200001fc 	.word	0x200001fc
 8001b44:	200000cc 	.word	0x200000cc
 8001b48:	20000184 	.word	0x20000184
 8001b4c:	200002c0 	.word	0x200002c0
 8001b50:	200008c8 	.word	0x200008c8
 8001b54:	20000818 	.word	0x20000818
 8001b58:	20000914 	.word	0x20000914
 8001b5c:	2000091c 	.word	0x2000091c
 8001b60:	200002b8 	.word	0x200002b8
 8001b64:	08008c2c 	.word	0x08008c2c
 8001b68:	08008c30 	.word	0x08008c30
 8001b6c:	08008c34 	.word	0x08008c34
 8001b70:	08008c38 	.word	0x08008c38
 8001b74:	08008c3c 	.word	0x08008c3c
 8001b78:	08008c40 	.word	0x08008c40
 8001b7c:	08008c44 	.word	0x08008c44
 8001b80:	08008c48 	.word	0x08008c48
 8001b84:	08008c4c 	.word	0x08008c4c
 8001b88:	08008c50 	.word	0x08008c50
 8001b8c:	08008c54 	.word	0x08008c54
 8001b90:	200000bc 	.word	0x200000bc

08001b94 <SendData>:
void SendData()
{
 8001b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af04      	add	r7, sp, #16
		  		Data(temp, gas, TTTB1, TTTB2, TTTB3, TTTB4, TTTB5, TTTB6 );
 8001b9a:	4b1b      	ldr	r3, [pc, #108]	; (8001c08 <SendData+0x74>)
 8001b9c:	881b      	ldrh	r3, [r3, #0]
 8001b9e:	461c      	mov	r4, r3
 8001ba0:	4b1a      	ldr	r3, [pc, #104]	; (8001c0c <SendData+0x78>)
 8001ba2:	881b      	ldrh	r3, [r3, #0]
 8001ba4:	461d      	mov	r5, r3
 8001ba6:	4b1a      	ldr	r3, [pc, #104]	; (8001c10 <SendData+0x7c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	461e      	mov	r6, r3
 8001bac:	4b19      	ldr	r3, [pc, #100]	; (8001c14 <SendData+0x80>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	469c      	mov	ip, r3
 8001bb2:	4b19      	ldr	r3, [pc, #100]	; (8001c18 <SendData+0x84>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	4b18      	ldr	r3, [pc, #96]	; (8001c1c <SendData+0x88>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4b18      	ldr	r3, [pc, #96]	; (8001c20 <SendData+0x8c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	4b17      	ldr	r3, [pc, #92]	; (8001c24 <SendData+0x90>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	9303      	str	r3, [sp, #12]
 8001bca:	9002      	str	r0, [sp, #8]
 8001bcc:	9101      	str	r1, [sp, #4]
 8001bce:	9200      	str	r2, [sp, #0]
 8001bd0:	4663      	mov	r3, ip
 8001bd2:	4632      	mov	r2, r6
 8001bd4:	4629      	mov	r1, r5
 8001bd6:	4620      	mov	r0, r4
 8001bd8:	f7ff fea2 	bl	8001920 <Data>
		  		HAL_UART_Transmit(&huart2,(uint8_t *)DATA ,strlen(DATA),500);
 8001bdc:	4812      	ldr	r0, [pc, #72]	; (8001c28 <SendData+0x94>)
 8001bde:	f7fe fb09 	bl	80001f4 <strlen>
 8001be2:	4603      	mov	r3, r0
 8001be4:	b29a      	uxth	r2, r3
 8001be6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001bea:	490f      	ldr	r1, [pc, #60]	; (8001c28 <SendData+0x94>)
 8001bec:	480f      	ldr	r0, [pc, #60]	; (8001c2c <SendData+0x98>)
 8001bee:	f004 fce2 	bl	80065b6 <HAL_UART_Transmit>
		  		//printf("pc    %s\n", DATA);
		  		last = HAL_GetTick();
 8001bf2:	f000 ff57 	bl	8002aa4 <HAL_GetTick>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	4b0d      	ldr	r3, [pc, #52]	; (8001c30 <SendData+0x9c>)
 8001bfc:	601a      	str	r2, [r3, #0]


}
 8001bfe:	bf00      	nop
 8001c00:	3704      	adds	r7, #4
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c06:	bf00      	nop
 8001c08:	200000a0 	.word	0x200000a0
 8001c0c:	200000a2 	.word	0x200000a2
 8001c10:	200000a4 	.word	0x200000a4
 8001c14:	200000a8 	.word	0x200000a8
 8001c18:	200000ac 	.word	0x200000ac
 8001c1c:	200000b0 	.word	0x200000b0
 8001c20:	200000b4 	.word	0x200000b4
 8001c24:	200000b8 	.word	0x200000b8
 8001c28:	20000184 	.word	0x20000184
 8001c2c:	200008d0 	.word	0x200008d0
 8001c30:	200000bc 	.word	0x200000bc

08001c34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c38:	f000 fece 	bl	80029d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c3c:	f000 f854 	bl	8001ce8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c40:	f000 fa62 	bl	8002108 <MX_GPIO_Init>
  MX_DMA_Init();
 8001c44:	f000 fa40 	bl	80020c8 <MX_DMA_Init>
  MX_ADC1_Init();
 8001c48:	f000 f8b6 	bl	8001db8 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001c4c:	f000 f914 	bl	8001e78 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001c50:	f000 f940 	bl	8001ed4 <MX_I2C3_Init>
  MX_TIM3_Init();
 8001c54:	f000 f96c 	bl	8001f30 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001c58:	f000 f9e2 	bl	8002020 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8001c5c:	f000 fa0a 	bl	8002074 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart6,&rx_data6,1);
 8001c60:	2201      	movs	r2, #1
 8001c62:	491b      	ldr	r1, [pc, #108]	; (8001cd0 <main+0x9c>)
 8001c64:	481b      	ldr	r0, [pc, #108]	; (8001cd4 <main+0xa0>)
 8001c66:	f004 fd38 	bl	80066da <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2,&rx_data2,1);
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	491a      	ldr	r1, [pc, #104]	; (8001cd8 <main+0xa4>)
 8001c6e:	481b      	ldr	r0, [pc, #108]	; (8001cdc <main+0xa8>)
 8001c70:	f004 fd33 	bl	80066da <HAL_UART_Receive_IT>
  lcd_init();
 8001c74:	f005 fd82 	bl	800777c <lcd_init>
  lcd_init1();
 8001c78:	f005 fcc7 	bl	800760a <lcd_init1>
  lcd_clear();
 8001c7c:	f005 fd48 	bl	8007710 <lcd_clear>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001c80:	2108      	movs	r1, #8
 8001c82:	4817      	ldr	r0, [pc, #92]	; (8001ce0 <main+0xac>)
 8001c84:	f003 fed6 	bl	8005a34 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 25);
 8001c88:	4b15      	ldr	r3, [pc, #84]	; (8001ce0 <main+0xac>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2219      	movs	r2, #25
 8001c8e:	63da      	str	r2, [r3, #60]	; 0x3c
  last = HAL_GetTick();
 8001c90:	f000 ff08 	bl	8002aa4 <HAL_GetTick>
 8001c94:	4603      	mov	r3, r0
 8001c96:	461a      	mov	r2, r3
 8001c98:	4b12      	ldr	r3, [pc, #72]	; (8001ce4 <main+0xb0>)
 8001c9a:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_GetTick() - last >= 500)
 8001c9c:	f000 ff02 	bl	8002aa4 <HAL_GetTick>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	4a10      	ldr	r2, [pc, #64]	; (8001ce4 <main+0xb0>)
 8001ca4:	6812      	ldr	r2, [r2, #0]
 8001ca6:	1a9b      	subs	r3, r3, r2
 8001ca8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001cac:	d3f6      	bcc.n	8001c9c <main+0x68>
	 	  {
	 		matkhau();
 8001cae:	f7ff f989 	bl	8000fc4 <matkhau>
	 		RtC();
 8001cb2:	f7ff f9ed 	bl	8001090 <RtC>
	 	  	cambien();
 8001cb6:	f7ff fa3f 	bl	8001138 <cambien>
	 	  	Button();
 8001cba:	f7ff fae9 	bl	8001290 <Button>
	 	  	SendData();
 8001cbe:	f7ff ff69 	bl	8001b94 <SendData>
	 	  	last = HAL_GetTick();
 8001cc2:	f000 feef 	bl	8002aa4 <HAL_GetTick>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	461a      	mov	r2, r3
 8001cca:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <main+0xb0>)
 8001ccc:	601a      	str	r2, [r3, #0]
	  if(HAL_GetTick() - last >= 500)
 8001cce:	e7e5      	b.n	8001c9c <main+0x68>
 8001cd0:	200002b4 	.word	0x200002b4
 8001cd4:	20000884 	.word	0x20000884
 8001cd8:	2000081d 	.word	0x2000081d
 8001cdc:	200008d0 	.word	0x200008d0
 8001ce0:	200002d4 	.word	0x200002d4
 8001ce4:	200000bc 	.word	0x200000bc

08001ce8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b094      	sub	sp, #80	; 0x50
 8001cec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cee:	f107 0320 	add.w	r3, r7, #32
 8001cf2:	2230      	movs	r2, #48	; 0x30
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f005 fdbc 	bl	8007874 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cfc:	f107 030c 	add.w	r3, r7, #12
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	605a      	str	r2, [r3, #4]
 8001d06:	609a      	str	r2, [r3, #8]
 8001d08:	60da      	str	r2, [r3, #12]
 8001d0a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	60bb      	str	r3, [r7, #8]
 8001d10:	4b27      	ldr	r3, [pc, #156]	; (8001db0 <SystemClock_Config+0xc8>)
 8001d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d14:	4a26      	ldr	r2, [pc, #152]	; (8001db0 <SystemClock_Config+0xc8>)
 8001d16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d1a:	6413      	str	r3, [r2, #64]	; 0x40
 8001d1c:	4b24      	ldr	r3, [pc, #144]	; (8001db0 <SystemClock_Config+0xc8>)
 8001d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d24:	60bb      	str	r3, [r7, #8]
 8001d26:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d28:	2300      	movs	r3, #0
 8001d2a:	607b      	str	r3, [r7, #4]
 8001d2c:	4b21      	ldr	r3, [pc, #132]	; (8001db4 <SystemClock_Config+0xcc>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a20      	ldr	r2, [pc, #128]	; (8001db4 <SystemClock_Config+0xcc>)
 8001d32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d36:	6013      	str	r3, [r2, #0]
 8001d38:	4b1e      	ldr	r3, [pc, #120]	; (8001db4 <SystemClock_Config+0xcc>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d40:	607b      	str	r3, [r7, #4]
 8001d42:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d44:	2301      	movs	r3, #1
 8001d46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d4c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d52:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d56:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001d58:	2304      	movs	r3, #4
 8001d5a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001d5c:	2332      	movs	r3, #50	; 0x32
 8001d5e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d60:	2302      	movs	r3, #2
 8001d62:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001d64:	2304      	movs	r3, #4
 8001d66:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d68:	f107 0320 	add.w	r3, r7, #32
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f003 f945 	bl	8004ffc <HAL_RCC_OscConfig>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001d78:	f000 fad8 	bl	800232c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d7c:	230f      	movs	r3, #15
 8001d7e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d80:	2302      	movs	r3, #2
 8001d82:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d84:	2300      	movs	r3, #0
 8001d86:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001d90:	f107 030c 	add.w	r3, r7, #12
 8001d94:	2101      	movs	r1, #1
 8001d96:	4618      	mov	r0, r3
 8001d98:	f003 fba8 	bl	80054ec <HAL_RCC_ClockConfig>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001da2:	f000 fac3 	bl	800232c <Error_Handler>
  }
}
 8001da6:	bf00      	nop
 8001da8:	3750      	adds	r7, #80	; 0x50
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	40023800 	.word	0x40023800
 8001db4:	40007000 	.word	0x40007000

08001db8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001dbe:	463b      	mov	r3, r7
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	605a      	str	r2, [r3, #4]
 8001dc6:	609a      	str	r2, [r3, #8]
 8001dc8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001dca:	4b28      	ldr	r3, [pc, #160]	; (8001e6c <MX_ADC1_Init+0xb4>)
 8001dcc:	4a28      	ldr	r2, [pc, #160]	; (8001e70 <MX_ADC1_Init+0xb8>)
 8001dce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001dd0:	4b26      	ldr	r3, [pc, #152]	; (8001e6c <MX_ADC1_Init+0xb4>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001dd6:	4b25      	ldr	r3, [pc, #148]	; (8001e6c <MX_ADC1_Init+0xb4>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001ddc:	4b23      	ldr	r3, [pc, #140]	; (8001e6c <MX_ADC1_Init+0xb4>)
 8001dde:	2201      	movs	r2, #1
 8001de0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001de2:	4b22      	ldr	r3, [pc, #136]	; (8001e6c <MX_ADC1_Init+0xb4>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001de8:	4b20      	ldr	r3, [pc, #128]	; (8001e6c <MX_ADC1_Init+0xb4>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001df0:	4b1e      	ldr	r3, [pc, #120]	; (8001e6c <MX_ADC1_Init+0xb4>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001df6:	4b1d      	ldr	r3, [pc, #116]	; (8001e6c <MX_ADC1_Init+0xb4>)
 8001df8:	4a1e      	ldr	r2, [pc, #120]	; (8001e74 <MX_ADC1_Init+0xbc>)
 8001dfa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001dfc:	4b1b      	ldr	r3, [pc, #108]	; (8001e6c <MX_ADC1_Init+0xb4>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001e02:	4b1a      	ldr	r3, [pc, #104]	; (8001e6c <MX_ADC1_Init+0xb4>)
 8001e04:	2202      	movs	r2, #2
 8001e06:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001e08:	4b18      	ldr	r3, [pc, #96]	; (8001e6c <MX_ADC1_Init+0xb4>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e10:	4b16      	ldr	r3, [pc, #88]	; (8001e6c <MX_ADC1_Init+0xb4>)
 8001e12:	2201      	movs	r2, #1
 8001e14:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e16:	4815      	ldr	r0, [pc, #84]	; (8001e6c <MX_ADC1_Init+0xb4>)
 8001e18:	f000 fe74 	bl	8002b04 <HAL_ADC_Init>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001e22:	f000 fa83 	bl	800232c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001e26:	2305      	movs	r3, #5
 8001e28:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8001e2e:	2306      	movs	r3, #6
 8001e30:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e32:	463b      	mov	r3, r7
 8001e34:	4619      	mov	r1, r3
 8001e36:	480d      	ldr	r0, [pc, #52]	; (8001e6c <MX_ADC1_Init+0xb4>)
 8001e38:	f000 ffb6 	bl	8002da8 <HAL_ADC_ConfigChannel>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001e42:	f000 fa73 	bl	800232c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001e46:	2307      	movs	r3, #7
 8001e48:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e4e:	463b      	mov	r3, r7
 8001e50:	4619      	mov	r1, r3
 8001e52:	4806      	ldr	r0, [pc, #24]	; (8001e6c <MX_ADC1_Init+0xb4>)
 8001e54:	f000 ffa8 	bl	8002da8 <HAL_ADC_ConfigChannel>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8001e5e:	f000 fa65 	bl	800232c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e62:	bf00      	nop
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	20000510 	.word	0x20000510
 8001e70:	40012000 	.word	0x40012000
 8001e74:	0f000001 	.word	0x0f000001

08001e78 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e7c:	4b12      	ldr	r3, [pc, #72]	; (8001ec8 <MX_I2C1_Init+0x50>)
 8001e7e:	4a13      	ldr	r2, [pc, #76]	; (8001ecc <MX_I2C1_Init+0x54>)
 8001e80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001e82:	4b11      	ldr	r3, [pc, #68]	; (8001ec8 <MX_I2C1_Init+0x50>)
 8001e84:	4a12      	ldr	r2, [pc, #72]	; (8001ed0 <MX_I2C1_Init+0x58>)
 8001e86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e88:	4b0f      	ldr	r3, [pc, #60]	; (8001ec8 <MX_I2C1_Init+0x50>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001e8e:	4b0e      	ldr	r3, [pc, #56]	; (8001ec8 <MX_I2C1_Init+0x50>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e94:	4b0c      	ldr	r3, [pc, #48]	; (8001ec8 <MX_I2C1_Init+0x50>)
 8001e96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e9a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e9c:	4b0a      	ldr	r3, [pc, #40]	; (8001ec8 <MX_I2C1_Init+0x50>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001ea2:	4b09      	ldr	r3, [pc, #36]	; (8001ec8 <MX_I2C1_Init+0x50>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ea8:	4b07      	ldr	r3, [pc, #28]	; (8001ec8 <MX_I2C1_Init+0x50>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001eae:	4b06      	ldr	r3, [pc, #24]	; (8001ec8 <MX_I2C1_Init+0x50>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001eb4:	4804      	ldr	r0, [pc, #16]	; (8001ec8 <MX_I2C1_Init+0x50>)
 8001eb6:	f002 f8f1 	bl	800409c <HAL_I2C_Init>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ec0:	f000 fa34 	bl	800232c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ec4:	bf00      	nop
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	20000260 	.word	0x20000260
 8001ecc:	40005400 	.word	0x40005400
 8001ed0:	000186a0 	.word	0x000186a0

08001ed4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001ed8:	4b12      	ldr	r3, [pc, #72]	; (8001f24 <MX_I2C3_Init+0x50>)
 8001eda:	4a13      	ldr	r2, [pc, #76]	; (8001f28 <MX_I2C3_Init+0x54>)
 8001edc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001ede:	4b11      	ldr	r3, [pc, #68]	; (8001f24 <MX_I2C3_Init+0x50>)
 8001ee0:	4a12      	ldr	r2, [pc, #72]	; (8001f2c <MX_I2C3_Init+0x58>)
 8001ee2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ee4:	4b0f      	ldr	r3, [pc, #60]	; (8001f24 <MX_I2C3_Init+0x50>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001eea:	4b0e      	ldr	r3, [pc, #56]	; (8001f24 <MX_I2C3_Init+0x50>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ef0:	4b0c      	ldr	r3, [pc, #48]	; (8001f24 <MX_I2C3_Init+0x50>)
 8001ef2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ef6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ef8:	4b0a      	ldr	r3, [pc, #40]	; (8001f24 <MX_I2C3_Init+0x50>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001efe:	4b09      	ldr	r3, [pc, #36]	; (8001f24 <MX_I2C3_Init+0x50>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f04:	4b07      	ldr	r3, [pc, #28]	; (8001f24 <MX_I2C3_Init+0x50>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f0a:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <MX_I2C3_Init+0x50>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001f10:	4804      	ldr	r0, [pc, #16]	; (8001f24 <MX_I2C3_Init+0x50>)
 8001f12:	f002 f8c3 	bl	800409c <HAL_I2C_Init>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001f1c:	f000 fa06 	bl	800232c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001f20:	bf00      	nop
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	20000130 	.word	0x20000130
 8001f28:	40005c00 	.word	0x40005c00
 8001f2c:	000186a0 	.word	0x000186a0

08001f30 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b08e      	sub	sp, #56	; 0x38
 8001f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	601a      	str	r2, [r3, #0]
 8001f3e:	605a      	str	r2, [r3, #4]
 8001f40:	609a      	str	r2, [r3, #8]
 8001f42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f44:	f107 0320 	add.w	r3, r7, #32
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f4e:	1d3b      	adds	r3, r7, #4
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	609a      	str	r2, [r3, #8]
 8001f58:	60da      	str	r2, [r3, #12]
 8001f5a:	611a      	str	r2, [r3, #16]
 8001f5c:	615a      	str	r2, [r3, #20]
 8001f5e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f60:	4b2d      	ldr	r3, [pc, #180]	; (8002018 <MX_TIM3_Init+0xe8>)
 8001f62:	4a2e      	ldr	r2, [pc, #184]	; (800201c <MX_TIM3_Init+0xec>)
 8001f64:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 999;
 8001f66:	4b2c      	ldr	r3, [pc, #176]	; (8002018 <MX_TIM3_Init+0xe8>)
 8001f68:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f6c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f6e:	4b2a      	ldr	r3, [pc, #168]	; (8002018 <MX_TIM3_Init+0xe8>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001f74:	4b28      	ldr	r3, [pc, #160]	; (8002018 <MX_TIM3_Init+0xe8>)
 8001f76:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f7a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f7c:	4b26      	ldr	r3, [pc, #152]	; (8002018 <MX_TIM3_Init+0xe8>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f82:	4b25      	ldr	r3, [pc, #148]	; (8002018 <MX_TIM3_Init+0xe8>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f88:	4823      	ldr	r0, [pc, #140]	; (8002018 <MX_TIM3_Init+0xe8>)
 8001f8a:	f003 fcab 	bl	80058e4 <HAL_TIM_Base_Init>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001f94:	f000 f9ca 	bl	800232c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f9c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	481c      	ldr	r0, [pc, #112]	; (8002018 <MX_TIM3_Init+0xe8>)
 8001fa6:	f003 feb7 	bl	8005d18 <HAL_TIM_ConfigClockSource>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001fb0:	f000 f9bc 	bl	800232c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001fb4:	4818      	ldr	r0, [pc, #96]	; (8002018 <MX_TIM3_Init+0xe8>)
 8001fb6:	f003 fce4 	bl	8005982 <HAL_TIM_PWM_Init>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001fc0:	f000 f9b4 	bl	800232c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001fcc:	f107 0320 	add.w	r3, r7, #32
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	4811      	ldr	r0, [pc, #68]	; (8002018 <MX_TIM3_Init+0xe8>)
 8001fd4:	f004 fa34 	bl	8006440 <HAL_TIMEx_MasterConfigSynchronization>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001fde:	f000 f9a5 	bl	800232c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fe2:	2360      	movs	r3, #96	; 0x60
 8001fe4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8001fe6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001fea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fec:	2300      	movs	r3, #0
 8001fee:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ff4:	1d3b      	adds	r3, r7, #4
 8001ff6:	2208      	movs	r2, #8
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4807      	ldr	r0, [pc, #28]	; (8002018 <MX_TIM3_Init+0xe8>)
 8001ffc:	f003 fdca 	bl	8005b94 <HAL_TIM_PWM_ConfigChannel>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8002006:	f000 f991 	bl	800232c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800200a:	4803      	ldr	r0, [pc, #12]	; (8002018 <MX_TIM3_Init+0xe8>)
 800200c:	f000 faf4 	bl	80025f8 <HAL_TIM_MspPostInit>

}
 8002010:	bf00      	nop
 8002012:	3738      	adds	r7, #56	; 0x38
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	200002d4 	.word	0x200002d4
 800201c:	40000400 	.word	0x40000400

08002020 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002024:	4b11      	ldr	r3, [pc, #68]	; (800206c <MX_USART2_UART_Init+0x4c>)
 8002026:	4a12      	ldr	r2, [pc, #72]	; (8002070 <MX_USART2_UART_Init+0x50>)
 8002028:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800202a:	4b10      	ldr	r3, [pc, #64]	; (800206c <MX_USART2_UART_Init+0x4c>)
 800202c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002030:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002032:	4b0e      	ldr	r3, [pc, #56]	; (800206c <MX_USART2_UART_Init+0x4c>)
 8002034:	2200      	movs	r2, #0
 8002036:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002038:	4b0c      	ldr	r3, [pc, #48]	; (800206c <MX_USART2_UART_Init+0x4c>)
 800203a:	2200      	movs	r2, #0
 800203c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800203e:	4b0b      	ldr	r3, [pc, #44]	; (800206c <MX_USART2_UART_Init+0x4c>)
 8002040:	2200      	movs	r2, #0
 8002042:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002044:	4b09      	ldr	r3, [pc, #36]	; (800206c <MX_USART2_UART_Init+0x4c>)
 8002046:	220c      	movs	r2, #12
 8002048:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800204a:	4b08      	ldr	r3, [pc, #32]	; (800206c <MX_USART2_UART_Init+0x4c>)
 800204c:	2200      	movs	r2, #0
 800204e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002050:	4b06      	ldr	r3, [pc, #24]	; (800206c <MX_USART2_UART_Init+0x4c>)
 8002052:	2200      	movs	r2, #0
 8002054:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002056:	4805      	ldr	r0, [pc, #20]	; (800206c <MX_USART2_UART_Init+0x4c>)
 8002058:	f004 fa60 	bl	800651c <HAL_UART_Init>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002062:	f000 f963 	bl	800232c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002066:	bf00      	nop
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	200008d0 	.word	0x200008d0
 8002070:	40004400 	.word	0x40004400

08002074 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002078:	4b11      	ldr	r3, [pc, #68]	; (80020c0 <MX_USART6_UART_Init+0x4c>)
 800207a:	4a12      	ldr	r2, [pc, #72]	; (80020c4 <MX_USART6_UART_Init+0x50>)
 800207c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800207e:	4b10      	ldr	r3, [pc, #64]	; (80020c0 <MX_USART6_UART_Init+0x4c>)
 8002080:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002084:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002086:	4b0e      	ldr	r3, [pc, #56]	; (80020c0 <MX_USART6_UART_Init+0x4c>)
 8002088:	2200      	movs	r2, #0
 800208a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800208c:	4b0c      	ldr	r3, [pc, #48]	; (80020c0 <MX_USART6_UART_Init+0x4c>)
 800208e:	2200      	movs	r2, #0
 8002090:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002092:	4b0b      	ldr	r3, [pc, #44]	; (80020c0 <MX_USART6_UART_Init+0x4c>)
 8002094:	2200      	movs	r2, #0
 8002096:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002098:	4b09      	ldr	r3, [pc, #36]	; (80020c0 <MX_USART6_UART_Init+0x4c>)
 800209a:	220c      	movs	r2, #12
 800209c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800209e:	4b08      	ldr	r3, [pc, #32]	; (80020c0 <MX_USART6_UART_Init+0x4c>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80020a4:	4b06      	ldr	r3, [pc, #24]	; (80020c0 <MX_USART6_UART_Init+0x4c>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80020aa:	4805      	ldr	r0, [pc, #20]	; (80020c0 <MX_USART6_UART_Init+0x4c>)
 80020ac:	f004 fa36 	bl	800651c <HAL_UART_Init>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80020b6:	f000 f939 	bl	800232c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80020ba:	bf00      	nop
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	20000884 	.word	0x20000884
 80020c4:	40011400 	.word	0x40011400

080020c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	607b      	str	r3, [r7, #4]
 80020d2:	4b0c      	ldr	r3, [pc, #48]	; (8002104 <MX_DMA_Init+0x3c>)
 80020d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d6:	4a0b      	ldr	r2, [pc, #44]	; (8002104 <MX_DMA_Init+0x3c>)
 80020d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020dc:	6313      	str	r3, [r2, #48]	; 0x30
 80020de:	4b09      	ldr	r3, [pc, #36]	; (8002104 <MX_DMA_Init+0x3c>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020e6:	607b      	str	r3, [r7, #4]
 80020e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80020ea:	2200      	movs	r2, #0
 80020ec:	2100      	movs	r1, #0
 80020ee:	2038      	movs	r0, #56	; 0x38
 80020f0:	f001 f9e5 	bl	80034be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80020f4:	2038      	movs	r0, #56	; 0x38
 80020f6:	f001 f9fe 	bl	80034f6 <HAL_NVIC_EnableIRQ>

}
 80020fa:	bf00      	nop
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	40023800 	.word	0x40023800

08002108 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b08c      	sub	sp, #48	; 0x30
 800210c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800210e:	f107 031c 	add.w	r3, r7, #28
 8002112:	2200      	movs	r2, #0
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	605a      	str	r2, [r3, #4]
 8002118:	609a      	str	r2, [r3, #8]
 800211a:	60da      	str	r2, [r3, #12]
 800211c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	61bb      	str	r3, [r7, #24]
 8002122:	4b7c      	ldr	r3, [pc, #496]	; (8002314 <MX_GPIO_Init+0x20c>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	4a7b      	ldr	r2, [pc, #492]	; (8002314 <MX_GPIO_Init+0x20c>)
 8002128:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800212c:	6313      	str	r3, [r2, #48]	; 0x30
 800212e:	4b79      	ldr	r3, [pc, #484]	; (8002314 <MX_GPIO_Init+0x20c>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002136:	61bb      	str	r3, [r7, #24]
 8002138:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800213a:	2300      	movs	r3, #0
 800213c:	617b      	str	r3, [r7, #20]
 800213e:	4b75      	ldr	r3, [pc, #468]	; (8002314 <MX_GPIO_Init+0x20c>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002142:	4a74      	ldr	r2, [pc, #464]	; (8002314 <MX_GPIO_Init+0x20c>)
 8002144:	f043 0301 	orr.w	r3, r3, #1
 8002148:	6313      	str	r3, [r2, #48]	; 0x30
 800214a:	4b72      	ldr	r3, [pc, #456]	; (8002314 <MX_GPIO_Init+0x20c>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	617b      	str	r3, [r7, #20]
 8002154:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	613b      	str	r3, [r7, #16]
 800215a:	4b6e      	ldr	r3, [pc, #440]	; (8002314 <MX_GPIO_Init+0x20c>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	4a6d      	ldr	r2, [pc, #436]	; (8002314 <MX_GPIO_Init+0x20c>)
 8002160:	f043 0302 	orr.w	r3, r3, #2
 8002164:	6313      	str	r3, [r2, #48]	; 0x30
 8002166:	4b6b      	ldr	r3, [pc, #428]	; (8002314 <MX_GPIO_Init+0x20c>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	613b      	str	r3, [r7, #16]
 8002170:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002172:	2300      	movs	r3, #0
 8002174:	60fb      	str	r3, [r7, #12]
 8002176:	4b67      	ldr	r3, [pc, #412]	; (8002314 <MX_GPIO_Init+0x20c>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	4a66      	ldr	r2, [pc, #408]	; (8002314 <MX_GPIO_Init+0x20c>)
 800217c:	f043 0310 	orr.w	r3, r3, #16
 8002180:	6313      	str	r3, [r2, #48]	; 0x30
 8002182:	4b64      	ldr	r3, [pc, #400]	; (8002314 <MX_GPIO_Init+0x20c>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	f003 0310 	and.w	r3, r3, #16
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800218e:	2300      	movs	r3, #0
 8002190:	60bb      	str	r3, [r7, #8]
 8002192:	4b60      	ldr	r3, [pc, #384]	; (8002314 <MX_GPIO_Init+0x20c>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002196:	4a5f      	ldr	r2, [pc, #380]	; (8002314 <MX_GPIO_Init+0x20c>)
 8002198:	f043 0308 	orr.w	r3, r3, #8
 800219c:	6313      	str	r3, [r2, #48]	; 0x30
 800219e:	4b5d      	ldr	r3, [pc, #372]	; (8002314 <MX_GPIO_Init+0x20c>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	f003 0308 	and.w	r3, r3, #8
 80021a6:	60bb      	str	r3, [r7, #8]
 80021a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021aa:	2300      	movs	r3, #0
 80021ac:	607b      	str	r3, [r7, #4]
 80021ae:	4b59      	ldr	r3, [pc, #356]	; (8002314 <MX_GPIO_Init+0x20c>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	4a58      	ldr	r2, [pc, #352]	; (8002314 <MX_GPIO_Init+0x20c>)
 80021b4:	f043 0304 	orr.w	r3, r3, #4
 80021b8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ba:	4b56      	ldr	r3, [pc, #344]	; (8002314 <MX_GPIO_Init+0x20c>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	f003 0304 	and.w	r3, r3, #4
 80021c2:	607b      	str	r3, [r7, #4]
 80021c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12
 80021c6:	2201      	movs	r2, #1
 80021c8:	f245 412d 	movw	r1, #21549	; 0x542d
 80021cc:	4852      	ldr	r0, [pc, #328]	; (8002318 <MX_GPIO_Init+0x210>)
 80021ce:	f001 ff4b 	bl	8004068 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_3|GPIO_PIN_5, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_SET);
 80021d2:	2201      	movs	r2, #1
 80021d4:	f44f 41aa 	mov.w	r1, #21760	; 0x5500
 80021d8:	4850      	ldr	r0, [pc, #320]	; (800231c <MX_GPIO_Init+0x214>)
 80021da:	f001 ff45 	bl	8004068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_15, GPIO_PIN_RESET);
 80021de:	2200      	movs	r2, #0
 80021e0:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 80021e4:	484e      	ldr	r0, [pc, #312]	; (8002320 <MX_GPIO_Init+0x218>)
 80021e6:	f001 ff3f 	bl	8004068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_SET);
 80021ea:	2201      	movs	r2, #1
 80021ec:	2150      	movs	r1, #80	; 0x50
 80021ee:	484c      	ldr	r0, [pc, #304]	; (8002320 <MX_GPIO_Init+0x218>)
 80021f0:	f001 ff3a 	bl	8004068 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB2 PB10 PB12
                           PB14 PB3 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12
 80021f4:	f245 432d 	movw	r3, #21549	; 0x542d
 80021f8:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_14|GPIO_PIN_3|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021fa:	2301      	movs	r3, #1
 80021fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fe:	2300      	movs	r3, #0
 8002200:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002202:	2302      	movs	r3, #2
 8002204:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002206:	f107 031c 	add.w	r3, r7, #28
 800220a:	4619      	mov	r1, r3
 800220c:	4842      	ldr	r0, [pc, #264]	; (8002318 <MX_GPIO_Init+0x210>)
 800220e:	f001 fd8f 	bl	8003d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_15;
 8002212:	f24a 0302 	movw	r3, #40962	; 0xa002
 8002216:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002218:	2300      	movs	r3, #0
 800221a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800221c:	2301      	movs	r3, #1
 800221e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002220:	f107 031c 	add.w	r3, r7, #28
 8002224:	4619      	mov	r1, r3
 8002226:	483c      	ldr	r0, [pc, #240]	; (8002318 <MX_GPIO_Init+0x210>)
 8002228:	f001 fd82 	bl	8003d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE9 PE11 PE13
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13
 800222c:	f64a 2380 	movw	r3, #43648	; 0xaa80
 8002230:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002232:	2300      	movs	r3, #0
 8002234:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002236:	2301      	movs	r3, #1
 8002238:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800223a:	f107 031c 	add.w	r3, r7, #28
 800223e:	4619      	mov	r1, r3
 8002240:	4836      	ldr	r0, [pc, #216]	; (800231c <MX_GPIO_Init+0x214>)
 8002242:	f001 fd75 	bl	8003d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE8 PE10 PE12 PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14;
 8002246:	f44f 43aa 	mov.w	r3, #21760	; 0x5500
 800224a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800224c:	2301      	movs	r3, #1
 800224e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002250:	2300      	movs	r3, #0
 8002252:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002254:	2302      	movs	r3, #2
 8002256:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002258:	f107 031c 	add.w	r3, r7, #28
 800225c:	4619      	mov	r1, r3
 800225e:	482f      	ldr	r0, [pc, #188]	; (800231c <MX_GPIO_Init+0x214>)
 8002260:	f001 fd66 	bl	8003d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002264:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002268:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800226a:	2301      	movs	r3, #1
 800226c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800226e:	2302      	movs	r3, #2
 8002270:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002272:	2300      	movs	r3, #0
 8002274:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002276:	f107 031c 	add.w	r3, r7, #28
 800227a:	4619      	mov	r1, r3
 800227c:	4828      	ldr	r0, [pc, #160]	; (8002320 <MX_GPIO_Init+0x218>)
 800227e:	f001 fd57 	bl	8003d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD0 PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_0|GPIO_PIN_2;
 8002282:	f240 2305 	movw	r3, #517	; 0x205
 8002286:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002288:	2300      	movs	r3, #0
 800228a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800228c:	2301      	movs	r3, #1
 800228e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002290:	f107 031c 	add.w	r3, r7, #28
 8002294:	4619      	mov	r1, r3
 8002296:	4822      	ldr	r0, [pc, #136]	; (8002320 <MX_GPIO_Init+0x218>)
 8002298:	f001 fd4a 	bl	8003d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800229c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022a2:	2301      	movs	r3, #1
 80022a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a6:	2300      	movs	r3, #0
 80022a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022aa:	2300      	movs	r3, #0
 80022ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022ae:	f107 031c 	add.w	r3, r7, #28
 80022b2:	4619      	mov	r1, r3
 80022b4:	481a      	ldr	r0, [pc, #104]	; (8002320 <MX_GPIO_Init+0x218>)
 80022b6:	f001 fd3b 	bl	8003d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80022ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022c0:	2300      	movs	r3, #0
 80022c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022c4:	2301      	movs	r3, #1
 80022c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022c8:	f107 031c 	add.w	r3, r7, #28
 80022cc:	4619      	mov	r1, r3
 80022ce:	4815      	ldr	r0, [pc, #84]	; (8002324 <MX_GPIO_Init+0x21c>)
 80022d0:	f001 fd2e 	bl	8003d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80022d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80022d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022da:	2300      	movs	r3, #0
 80022dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022de:	2301      	movs	r3, #1
 80022e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022e2:	f107 031c 	add.w	r3, r7, #28
 80022e6:	4619      	mov	r1, r3
 80022e8:	480f      	ldr	r0, [pc, #60]	; (8002328 <MX_GPIO_Init+0x220>)
 80022ea:	f001 fd21 	bl	8003d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD4 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80022ee:	2350      	movs	r3, #80	; 0x50
 80022f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022f2:	2301      	movs	r3, #1
 80022f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f6:	2300      	movs	r3, #0
 80022f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022fa:	2302      	movs	r3, #2
 80022fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022fe:	f107 031c 	add.w	r3, r7, #28
 8002302:	4619      	mov	r1, r3
 8002304:	4806      	ldr	r0, [pc, #24]	; (8002320 <MX_GPIO_Init+0x218>)
 8002306:	f001 fd13 	bl	8003d30 <HAL_GPIO_Init>

}
 800230a:	bf00      	nop
 800230c:	3730      	adds	r7, #48	; 0x30
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	40023800 	.word	0x40023800
 8002318:	40020400 	.word	0x40020400
 800231c:	40021000 	.word	0x40021000
 8002320:	40020c00 	.word	0x40020c00
 8002324:	40020000 	.word	0x40020000
 8002328:	40020800 	.word	0x40020800

0800232c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002330:	b672      	cpsid	i
}
 8002332:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002334:	e7fe      	b.n	8002334 <Error_Handler+0x8>
	...

08002338 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800233e:	2300      	movs	r3, #0
 8002340:	607b      	str	r3, [r7, #4]
 8002342:	4b10      	ldr	r3, [pc, #64]	; (8002384 <HAL_MspInit+0x4c>)
 8002344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002346:	4a0f      	ldr	r2, [pc, #60]	; (8002384 <HAL_MspInit+0x4c>)
 8002348:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800234c:	6453      	str	r3, [r2, #68]	; 0x44
 800234e:	4b0d      	ldr	r3, [pc, #52]	; (8002384 <HAL_MspInit+0x4c>)
 8002350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002352:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002356:	607b      	str	r3, [r7, #4]
 8002358:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	603b      	str	r3, [r7, #0]
 800235e:	4b09      	ldr	r3, [pc, #36]	; (8002384 <HAL_MspInit+0x4c>)
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	4a08      	ldr	r2, [pc, #32]	; (8002384 <HAL_MspInit+0x4c>)
 8002364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002368:	6413      	str	r3, [r2, #64]	; 0x40
 800236a:	4b06      	ldr	r3, [pc, #24]	; (8002384 <HAL_MspInit+0x4c>)
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002372:	603b      	str	r3, [r7, #0]
 8002374:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002376:	bf00      	nop
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	40023800 	.word	0x40023800

08002388 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b08a      	sub	sp, #40	; 0x28
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002390:	f107 0314 	add.w	r3, r7, #20
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	605a      	str	r2, [r3, #4]
 800239a:	609a      	str	r2, [r3, #8]
 800239c:	60da      	str	r2, [r3, #12]
 800239e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a2e      	ldr	r2, [pc, #184]	; (8002460 <HAL_ADC_MspInit+0xd8>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d156      	bne.n	8002458 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80023aa:	2300      	movs	r3, #0
 80023ac:	613b      	str	r3, [r7, #16]
 80023ae:	4b2d      	ldr	r3, [pc, #180]	; (8002464 <HAL_ADC_MspInit+0xdc>)
 80023b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b2:	4a2c      	ldr	r2, [pc, #176]	; (8002464 <HAL_ADC_MspInit+0xdc>)
 80023b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023b8:	6453      	str	r3, [r2, #68]	; 0x44
 80023ba:	4b2a      	ldr	r3, [pc, #168]	; (8002464 <HAL_ADC_MspInit+0xdc>)
 80023bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c2:	613b      	str	r3, [r7, #16]
 80023c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023c6:	2300      	movs	r3, #0
 80023c8:	60fb      	str	r3, [r7, #12]
 80023ca:	4b26      	ldr	r3, [pc, #152]	; (8002464 <HAL_ADC_MspInit+0xdc>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ce:	4a25      	ldr	r2, [pc, #148]	; (8002464 <HAL_ADC_MspInit+0xdc>)
 80023d0:	f043 0301 	orr.w	r3, r3, #1
 80023d4:	6313      	str	r3, [r2, #48]	; 0x30
 80023d6:	4b23      	ldr	r3, [pc, #140]	; (8002464 <HAL_ADC_MspInit+0xdc>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	60fb      	str	r3, [r7, #12]
 80023e0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80023e2:	23a0      	movs	r3, #160	; 0xa0
 80023e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023e6:	2303      	movs	r3, #3
 80023e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ea:	2300      	movs	r3, #0
 80023ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ee:	f107 0314 	add.w	r3, r7, #20
 80023f2:	4619      	mov	r1, r3
 80023f4:	481c      	ldr	r0, [pc, #112]	; (8002468 <HAL_ADC_MspInit+0xe0>)
 80023f6:	f001 fc9b 	bl	8003d30 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80023fa:	4b1c      	ldr	r3, [pc, #112]	; (800246c <HAL_ADC_MspInit+0xe4>)
 80023fc:	4a1c      	ldr	r2, [pc, #112]	; (8002470 <HAL_ADC_MspInit+0xe8>)
 80023fe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002400:	4b1a      	ldr	r3, [pc, #104]	; (800246c <HAL_ADC_MspInit+0xe4>)
 8002402:	2200      	movs	r2, #0
 8002404:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002406:	4b19      	ldr	r3, [pc, #100]	; (800246c <HAL_ADC_MspInit+0xe4>)
 8002408:	2200      	movs	r2, #0
 800240a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800240c:	4b17      	ldr	r3, [pc, #92]	; (800246c <HAL_ADC_MspInit+0xe4>)
 800240e:	2200      	movs	r2, #0
 8002410:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002412:	4b16      	ldr	r3, [pc, #88]	; (800246c <HAL_ADC_MspInit+0xe4>)
 8002414:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002418:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800241a:	4b14      	ldr	r3, [pc, #80]	; (800246c <HAL_ADC_MspInit+0xe4>)
 800241c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002420:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002422:	4b12      	ldr	r3, [pc, #72]	; (800246c <HAL_ADC_MspInit+0xe4>)
 8002424:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002428:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800242a:	4b10      	ldr	r3, [pc, #64]	; (800246c <HAL_ADC_MspInit+0xe4>)
 800242c:	2200      	movs	r2, #0
 800242e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002430:	4b0e      	ldr	r3, [pc, #56]	; (800246c <HAL_ADC_MspInit+0xe4>)
 8002432:	2200      	movs	r2, #0
 8002434:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002436:	4b0d      	ldr	r3, [pc, #52]	; (800246c <HAL_ADC_MspInit+0xe4>)
 8002438:	2200      	movs	r2, #0
 800243a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800243c:	480b      	ldr	r0, [pc, #44]	; (800246c <HAL_ADC_MspInit+0xe4>)
 800243e:	f001 f875 	bl	800352c <HAL_DMA_Init>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8002448:	f7ff ff70 	bl	800232c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4a07      	ldr	r2, [pc, #28]	; (800246c <HAL_ADC_MspInit+0xe4>)
 8002450:	639a      	str	r2, [r3, #56]	; 0x38
 8002452:	4a06      	ldr	r2, [pc, #24]	; (800246c <HAL_ADC_MspInit+0xe4>)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002458:	bf00      	nop
 800245a:	3728      	adds	r7, #40	; 0x28
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	40012000 	.word	0x40012000
 8002464:	40023800 	.word	0x40023800
 8002468:	40020000 	.word	0x40020000
 800246c:	200007b8 	.word	0x200007b8
 8002470:	40026410 	.word	0x40026410

08002474 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b08c      	sub	sp, #48	; 0x30
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800247c:	f107 031c 	add.w	r3, r7, #28
 8002480:	2200      	movs	r2, #0
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	605a      	str	r2, [r3, #4]
 8002486:	609a      	str	r2, [r3, #8]
 8002488:	60da      	str	r2, [r3, #12]
 800248a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a42      	ldr	r2, [pc, #264]	; (800259c <HAL_I2C_MspInit+0x128>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d12d      	bne.n	80024f2 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002496:	2300      	movs	r3, #0
 8002498:	61bb      	str	r3, [r7, #24]
 800249a:	4b41      	ldr	r3, [pc, #260]	; (80025a0 <HAL_I2C_MspInit+0x12c>)
 800249c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249e:	4a40      	ldr	r2, [pc, #256]	; (80025a0 <HAL_I2C_MspInit+0x12c>)
 80024a0:	f043 0302 	orr.w	r3, r3, #2
 80024a4:	6313      	str	r3, [r2, #48]	; 0x30
 80024a6:	4b3e      	ldr	r3, [pc, #248]	; (80025a0 <HAL_I2C_MspInit+0x12c>)
 80024a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	61bb      	str	r3, [r7, #24]
 80024b0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80024b2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80024b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024b8:	2312      	movs	r3, #18
 80024ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024bc:	2301      	movs	r3, #1
 80024be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024c0:	2303      	movs	r3, #3
 80024c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80024c4:	2304      	movs	r3, #4
 80024c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024c8:	f107 031c 	add.w	r3, r7, #28
 80024cc:	4619      	mov	r1, r3
 80024ce:	4835      	ldr	r0, [pc, #212]	; (80025a4 <HAL_I2C_MspInit+0x130>)
 80024d0:	f001 fc2e 	bl	8003d30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80024d4:	2300      	movs	r3, #0
 80024d6:	617b      	str	r3, [r7, #20]
 80024d8:	4b31      	ldr	r3, [pc, #196]	; (80025a0 <HAL_I2C_MspInit+0x12c>)
 80024da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024dc:	4a30      	ldr	r2, [pc, #192]	; (80025a0 <HAL_I2C_MspInit+0x12c>)
 80024de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80024e2:	6413      	str	r3, [r2, #64]	; 0x40
 80024e4:	4b2e      	ldr	r3, [pc, #184]	; (80025a0 <HAL_I2C_MspInit+0x12c>)
 80024e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024ec:	617b      	str	r3, [r7, #20]
 80024ee:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80024f0:	e050      	b.n	8002594 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a2c      	ldr	r2, [pc, #176]	; (80025a8 <HAL_I2C_MspInit+0x134>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d14b      	bne.n	8002594 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024fc:	2300      	movs	r3, #0
 80024fe:	613b      	str	r3, [r7, #16]
 8002500:	4b27      	ldr	r3, [pc, #156]	; (80025a0 <HAL_I2C_MspInit+0x12c>)
 8002502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002504:	4a26      	ldr	r2, [pc, #152]	; (80025a0 <HAL_I2C_MspInit+0x12c>)
 8002506:	f043 0304 	orr.w	r3, r3, #4
 800250a:	6313      	str	r3, [r2, #48]	; 0x30
 800250c:	4b24      	ldr	r3, [pc, #144]	; (80025a0 <HAL_I2C_MspInit+0x12c>)
 800250e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002510:	f003 0304 	and.w	r3, r3, #4
 8002514:	613b      	str	r3, [r7, #16]
 8002516:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002518:	2300      	movs	r3, #0
 800251a:	60fb      	str	r3, [r7, #12]
 800251c:	4b20      	ldr	r3, [pc, #128]	; (80025a0 <HAL_I2C_MspInit+0x12c>)
 800251e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002520:	4a1f      	ldr	r2, [pc, #124]	; (80025a0 <HAL_I2C_MspInit+0x12c>)
 8002522:	f043 0301 	orr.w	r3, r3, #1
 8002526:	6313      	str	r3, [r2, #48]	; 0x30
 8002528:	4b1d      	ldr	r3, [pc, #116]	; (80025a0 <HAL_I2C_MspInit+0x12c>)
 800252a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252c:	f003 0301 	and.w	r3, r3, #1
 8002530:	60fb      	str	r3, [r7, #12]
 8002532:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002534:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002538:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800253a:	2312      	movs	r3, #18
 800253c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800253e:	2301      	movs	r3, #1
 8002540:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002542:	2303      	movs	r3, #3
 8002544:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002546:	2304      	movs	r3, #4
 8002548:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800254a:	f107 031c 	add.w	r3, r7, #28
 800254e:	4619      	mov	r1, r3
 8002550:	4816      	ldr	r0, [pc, #88]	; (80025ac <HAL_I2C_MspInit+0x138>)
 8002552:	f001 fbed 	bl	8003d30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002556:	f44f 7380 	mov.w	r3, #256	; 0x100
 800255a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800255c:	2312      	movs	r3, #18
 800255e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002560:	2301      	movs	r3, #1
 8002562:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002564:	2303      	movs	r3, #3
 8002566:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002568:	2304      	movs	r3, #4
 800256a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800256c:	f107 031c 	add.w	r3, r7, #28
 8002570:	4619      	mov	r1, r3
 8002572:	480f      	ldr	r0, [pc, #60]	; (80025b0 <HAL_I2C_MspInit+0x13c>)
 8002574:	f001 fbdc 	bl	8003d30 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002578:	2300      	movs	r3, #0
 800257a:	60bb      	str	r3, [r7, #8]
 800257c:	4b08      	ldr	r3, [pc, #32]	; (80025a0 <HAL_I2C_MspInit+0x12c>)
 800257e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002580:	4a07      	ldr	r2, [pc, #28]	; (80025a0 <HAL_I2C_MspInit+0x12c>)
 8002582:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002586:	6413      	str	r3, [r2, #64]	; 0x40
 8002588:	4b05      	ldr	r3, [pc, #20]	; (80025a0 <HAL_I2C_MspInit+0x12c>)
 800258a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002590:	60bb      	str	r3, [r7, #8]
 8002592:	68bb      	ldr	r3, [r7, #8]
}
 8002594:	bf00      	nop
 8002596:	3730      	adds	r7, #48	; 0x30
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40005400 	.word	0x40005400
 80025a0:	40023800 	.word	0x40023800
 80025a4:	40020400 	.word	0x40020400
 80025a8:	40005c00 	.word	0x40005c00
 80025ac:	40020800 	.word	0x40020800
 80025b0:	40020000 	.word	0x40020000

080025b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a0b      	ldr	r2, [pc, #44]	; (80025f0 <HAL_TIM_Base_MspInit+0x3c>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d10d      	bne.n	80025e2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025c6:	2300      	movs	r3, #0
 80025c8:	60fb      	str	r3, [r7, #12]
 80025ca:	4b0a      	ldr	r3, [pc, #40]	; (80025f4 <HAL_TIM_Base_MspInit+0x40>)
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	4a09      	ldr	r2, [pc, #36]	; (80025f4 <HAL_TIM_Base_MspInit+0x40>)
 80025d0:	f043 0302 	orr.w	r3, r3, #2
 80025d4:	6413      	str	r3, [r2, #64]	; 0x40
 80025d6:	4b07      	ldr	r3, [pc, #28]	; (80025f4 <HAL_TIM_Base_MspInit+0x40>)
 80025d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	60fb      	str	r3, [r7, #12]
 80025e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80025e2:	bf00      	nop
 80025e4:	3714      	adds	r7, #20
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	40000400 	.word	0x40000400
 80025f4:	40023800 	.word	0x40023800

080025f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b088      	sub	sp, #32
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002600:	f107 030c 	add.w	r3, r7, #12
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	605a      	str	r2, [r3, #4]
 800260a:	609a      	str	r2, [r3, #8]
 800260c:	60da      	str	r2, [r3, #12]
 800260e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a12      	ldr	r2, [pc, #72]	; (8002660 <HAL_TIM_MspPostInit+0x68>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d11e      	bne.n	8002658 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800261a:	2300      	movs	r3, #0
 800261c:	60bb      	str	r3, [r7, #8]
 800261e:	4b11      	ldr	r3, [pc, #68]	; (8002664 <HAL_TIM_MspPostInit+0x6c>)
 8002620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002622:	4a10      	ldr	r2, [pc, #64]	; (8002664 <HAL_TIM_MspPostInit+0x6c>)
 8002624:	f043 0304 	orr.w	r3, r3, #4
 8002628:	6313      	str	r3, [r2, #48]	; 0x30
 800262a:	4b0e      	ldr	r3, [pc, #56]	; (8002664 <HAL_TIM_MspPostInit+0x6c>)
 800262c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262e:	f003 0304 	and.w	r3, r3, #4
 8002632:	60bb      	str	r3, [r7, #8]
 8002634:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002636:	f44f 7380 	mov.w	r3, #256	; 0x100
 800263a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800263c:	2302      	movs	r3, #2
 800263e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002640:	2300      	movs	r3, #0
 8002642:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002644:	2300      	movs	r3, #0
 8002646:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002648:	2302      	movs	r3, #2
 800264a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800264c:	f107 030c 	add.w	r3, r7, #12
 8002650:	4619      	mov	r1, r3
 8002652:	4805      	ldr	r0, [pc, #20]	; (8002668 <HAL_TIM_MspPostInit+0x70>)
 8002654:	f001 fb6c 	bl	8003d30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002658:	bf00      	nop
 800265a:	3720      	adds	r7, #32
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40000400 	.word	0x40000400
 8002664:	40023800 	.word	0x40023800
 8002668:	40020800 	.word	0x40020800

0800266c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b08c      	sub	sp, #48	; 0x30
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002674:	f107 031c 	add.w	r3, r7, #28
 8002678:	2200      	movs	r2, #0
 800267a:	601a      	str	r2, [r3, #0]
 800267c:	605a      	str	r2, [r3, #4]
 800267e:	609a      	str	r2, [r3, #8]
 8002680:	60da      	str	r2, [r3, #12]
 8002682:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a3a      	ldr	r2, [pc, #232]	; (8002774 <HAL_UART_MspInit+0x108>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d134      	bne.n	80026f8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800268e:	2300      	movs	r3, #0
 8002690:	61bb      	str	r3, [r7, #24]
 8002692:	4b39      	ldr	r3, [pc, #228]	; (8002778 <HAL_UART_MspInit+0x10c>)
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	4a38      	ldr	r2, [pc, #224]	; (8002778 <HAL_UART_MspInit+0x10c>)
 8002698:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800269c:	6413      	str	r3, [r2, #64]	; 0x40
 800269e:	4b36      	ldr	r3, [pc, #216]	; (8002778 <HAL_UART_MspInit+0x10c>)
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a6:	61bb      	str	r3, [r7, #24]
 80026a8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026aa:	2300      	movs	r3, #0
 80026ac:	617b      	str	r3, [r7, #20]
 80026ae:	4b32      	ldr	r3, [pc, #200]	; (8002778 <HAL_UART_MspInit+0x10c>)
 80026b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b2:	4a31      	ldr	r2, [pc, #196]	; (8002778 <HAL_UART_MspInit+0x10c>)
 80026b4:	f043 0301 	orr.w	r3, r3, #1
 80026b8:	6313      	str	r3, [r2, #48]	; 0x30
 80026ba:	4b2f      	ldr	r3, [pc, #188]	; (8002778 <HAL_UART_MspInit+0x10c>)
 80026bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	617b      	str	r3, [r7, #20]
 80026c4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80026c6:	230c      	movs	r3, #12
 80026c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ca:	2302      	movs	r3, #2
 80026cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ce:	2300      	movs	r3, #0
 80026d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026d2:	2303      	movs	r3, #3
 80026d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026d6:	2307      	movs	r3, #7
 80026d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026da:	f107 031c 	add.w	r3, r7, #28
 80026de:	4619      	mov	r1, r3
 80026e0:	4826      	ldr	r0, [pc, #152]	; (800277c <HAL_UART_MspInit+0x110>)
 80026e2:	f001 fb25 	bl	8003d30 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80026e6:	2200      	movs	r2, #0
 80026e8:	2100      	movs	r1, #0
 80026ea:	2026      	movs	r0, #38	; 0x26
 80026ec:	f000 fee7 	bl	80034be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80026f0:	2026      	movs	r0, #38	; 0x26
 80026f2:	f000 ff00 	bl	80034f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80026f6:	e038      	b.n	800276a <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART6)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a20      	ldr	r2, [pc, #128]	; (8002780 <HAL_UART_MspInit+0x114>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d133      	bne.n	800276a <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002702:	2300      	movs	r3, #0
 8002704:	613b      	str	r3, [r7, #16]
 8002706:	4b1c      	ldr	r3, [pc, #112]	; (8002778 <HAL_UART_MspInit+0x10c>)
 8002708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270a:	4a1b      	ldr	r2, [pc, #108]	; (8002778 <HAL_UART_MspInit+0x10c>)
 800270c:	f043 0320 	orr.w	r3, r3, #32
 8002710:	6453      	str	r3, [r2, #68]	; 0x44
 8002712:	4b19      	ldr	r3, [pc, #100]	; (8002778 <HAL_UART_MspInit+0x10c>)
 8002714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002716:	f003 0320 	and.w	r3, r3, #32
 800271a:	613b      	str	r3, [r7, #16]
 800271c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800271e:	2300      	movs	r3, #0
 8002720:	60fb      	str	r3, [r7, #12]
 8002722:	4b15      	ldr	r3, [pc, #84]	; (8002778 <HAL_UART_MspInit+0x10c>)
 8002724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002726:	4a14      	ldr	r2, [pc, #80]	; (8002778 <HAL_UART_MspInit+0x10c>)
 8002728:	f043 0304 	orr.w	r3, r3, #4
 800272c:	6313      	str	r3, [r2, #48]	; 0x30
 800272e:	4b12      	ldr	r3, [pc, #72]	; (8002778 <HAL_UART_MspInit+0x10c>)
 8002730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002732:	f003 0304 	and.w	r3, r3, #4
 8002736:	60fb      	str	r3, [r7, #12]
 8002738:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800273a:	23c0      	movs	r3, #192	; 0xc0
 800273c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273e:	2302      	movs	r3, #2
 8002740:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002742:	2300      	movs	r3, #0
 8002744:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002746:	2303      	movs	r3, #3
 8002748:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800274a:	2308      	movs	r3, #8
 800274c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800274e:	f107 031c 	add.w	r3, r7, #28
 8002752:	4619      	mov	r1, r3
 8002754:	480b      	ldr	r0, [pc, #44]	; (8002784 <HAL_UART_MspInit+0x118>)
 8002756:	f001 faeb 	bl	8003d30 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800275a:	2200      	movs	r2, #0
 800275c:	2100      	movs	r1, #0
 800275e:	2047      	movs	r0, #71	; 0x47
 8002760:	f000 fead 	bl	80034be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002764:	2047      	movs	r0, #71	; 0x47
 8002766:	f000 fec6 	bl	80034f6 <HAL_NVIC_EnableIRQ>
}
 800276a:	bf00      	nop
 800276c:	3730      	adds	r7, #48	; 0x30
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	40004400 	.word	0x40004400
 8002778:	40023800 	.word	0x40023800
 800277c:	40020000 	.word	0x40020000
 8002780:	40011400 	.word	0x40011400
 8002784:	40020800 	.word	0x40020800

08002788 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800278c:	e7fe      	b.n	800278c <NMI_Handler+0x4>

0800278e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800278e:	b480      	push	{r7}
 8002790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002792:	e7fe      	b.n	8002792 <HardFault_Handler+0x4>

08002794 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002798:	e7fe      	b.n	8002798 <MemManage_Handler+0x4>

0800279a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800279a:	b480      	push	{r7}
 800279c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800279e:	e7fe      	b.n	800279e <BusFault_Handler+0x4>

080027a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027a4:	e7fe      	b.n	80027a4 <UsageFault_Handler+0x4>

080027a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027a6:	b480      	push	{r7}
 80027a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027aa:	bf00      	nop
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027b8:	bf00      	nop
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr

080027c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027c2:	b480      	push	{r7}
 80027c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027c6:	bf00      	nop
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027d4:	f000 f952 	bl	8002a7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027d8:	bf00      	nop
 80027da:	bd80      	pop	{r7, pc}

080027dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80027e0:	4802      	ldr	r0, [pc, #8]	; (80027ec <USART2_IRQHandler+0x10>)
 80027e2:	f003 ffab 	bl	800673c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80027e6:	bf00      	nop
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	200008d0 	.word	0x200008d0

080027f0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80027f4:	4802      	ldr	r0, [pc, #8]	; (8002800 <DMA2_Stream0_IRQHandler+0x10>)
 80027f6:	f001 f831 	bl	800385c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80027fa:	bf00      	nop
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	200007b8 	.word	0x200007b8

08002804 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002808:	4802      	ldr	r0, [pc, #8]	; (8002814 <USART6_IRQHandler+0x10>)
 800280a:	f003 ff97 	bl	800673c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800280e:	bf00      	nop
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	20000884 	.word	0x20000884

08002818 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b086      	sub	sp, #24
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002824:	2300      	movs	r3, #0
 8002826:	617b      	str	r3, [r7, #20]
 8002828:	e00a      	b.n	8002840 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800282a:	f3af 8000 	nop.w
 800282e:	4601      	mov	r1, r0
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	1c5a      	adds	r2, r3, #1
 8002834:	60ba      	str	r2, [r7, #8]
 8002836:	b2ca      	uxtb	r2, r1
 8002838:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	3301      	adds	r3, #1
 800283e:	617b      	str	r3, [r7, #20]
 8002840:	697a      	ldr	r2, [r7, #20]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	429a      	cmp	r2, r3
 8002846:	dbf0      	blt.n	800282a <_read+0x12>
	}

return len;
 8002848:	687b      	ldr	r3, [r7, #4]
}
 800284a:	4618      	mov	r0, r3
 800284c:	3718      	adds	r7, #24
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b086      	sub	sp, #24
 8002856:	af00      	add	r7, sp, #0
 8002858:	60f8      	str	r0, [r7, #12]
 800285a:	60b9      	str	r1, [r7, #8]
 800285c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800285e:	2300      	movs	r3, #0
 8002860:	617b      	str	r3, [r7, #20]
 8002862:	e009      	b.n	8002878 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	1c5a      	adds	r2, r3, #1
 8002868:	60ba      	str	r2, [r7, #8]
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	4618      	mov	r0, r3
 800286e:	f7fe f9a1 	bl	8000bb4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	3301      	adds	r3, #1
 8002876:	617b      	str	r3, [r7, #20]
 8002878:	697a      	ldr	r2, [r7, #20]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	429a      	cmp	r2, r3
 800287e:	dbf1      	blt.n	8002864 <_write+0x12>
	}
	return len;
 8002880:	687b      	ldr	r3, [r7, #4]
}
 8002882:	4618      	mov	r0, r3
 8002884:	3718      	adds	r7, #24
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <_close>:

int _close(int file)
{
 800288a:	b480      	push	{r7}
 800288c:	b083      	sub	sp, #12
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
	return -1;
 8002892:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002896:	4618      	mov	r0, r3
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr

080028a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028a2:	b480      	push	{r7}
 80028a4:	b083      	sub	sp, #12
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
 80028aa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028b2:	605a      	str	r2, [r3, #4]
	return 0;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr

080028c2 <_isatty>:

int _isatty(int file)
{
 80028c2:	b480      	push	{r7}
 80028c4:	b083      	sub	sp, #12
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
	return 1;
 80028ca:	2301      	movs	r3, #1
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028d8:	b480      	push	{r7}
 80028da:	b085      	sub	sp, #20
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	607a      	str	r2, [r7, #4]
	return 0;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3714      	adds	r7, #20
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
	...

080028f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b086      	sub	sp, #24
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028fc:	4a14      	ldr	r2, [pc, #80]	; (8002950 <_sbrk+0x5c>)
 80028fe:	4b15      	ldr	r3, [pc, #84]	; (8002954 <_sbrk+0x60>)
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002908:	4b13      	ldr	r3, [pc, #76]	; (8002958 <_sbrk+0x64>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d102      	bne.n	8002916 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002910:	4b11      	ldr	r3, [pc, #68]	; (8002958 <_sbrk+0x64>)
 8002912:	4a12      	ldr	r2, [pc, #72]	; (800295c <_sbrk+0x68>)
 8002914:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002916:	4b10      	ldr	r3, [pc, #64]	; (8002958 <_sbrk+0x64>)
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4413      	add	r3, r2
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	429a      	cmp	r2, r3
 8002922:	d207      	bcs.n	8002934 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002924:	f004 ff7c 	bl	8007820 <__errno>
 8002928:	4603      	mov	r3, r0
 800292a:	220c      	movs	r2, #12
 800292c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800292e:	f04f 33ff 	mov.w	r3, #4294967295
 8002932:	e009      	b.n	8002948 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002934:	4b08      	ldr	r3, [pc, #32]	; (8002958 <_sbrk+0x64>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800293a:	4b07      	ldr	r3, [pc, #28]	; (8002958 <_sbrk+0x64>)
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4413      	add	r3, r2
 8002942:	4a05      	ldr	r2, [pc, #20]	; (8002958 <_sbrk+0x64>)
 8002944:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002946:	68fb      	ldr	r3, [r7, #12]
}
 8002948:	4618      	mov	r0, r3
 800294a:	3718      	adds	r7, #24
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	20020000 	.word	0x20020000
 8002954:	00000400 	.word	0x00000400
 8002958:	200000c0 	.word	0x200000c0
 800295c:	20000940 	.word	0x20000940

08002960 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002964:	4b06      	ldr	r3, [pc, #24]	; (8002980 <SystemInit+0x20>)
 8002966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800296a:	4a05      	ldr	r2, [pc, #20]	; (8002980 <SystemInit+0x20>)
 800296c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002970:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002974:	bf00      	nop
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	e000ed00 	.word	0xe000ed00

08002984 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002984:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002988:	480d      	ldr	r0, [pc, #52]	; (80029c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800298a:	490e      	ldr	r1, [pc, #56]	; (80029c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800298c:	4a0e      	ldr	r2, [pc, #56]	; (80029c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800298e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002990:	e002      	b.n	8002998 <LoopCopyDataInit>

08002992 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002992:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002994:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002996:	3304      	adds	r3, #4

08002998 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002998:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800299a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800299c:	d3f9      	bcc.n	8002992 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800299e:	4a0b      	ldr	r2, [pc, #44]	; (80029cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80029a0:	4c0b      	ldr	r4, [pc, #44]	; (80029d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80029a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029a4:	e001      	b.n	80029aa <LoopFillZerobss>

080029a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029a8:	3204      	adds	r2, #4

080029aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029ac:	d3fb      	bcc.n	80029a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80029ae:	f7ff ffd7 	bl	8002960 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029b2:	f004 ff3b 	bl	800782c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029b6:	f7ff f93d 	bl	8001c34 <main>
  bx  lr    
 80029ba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80029bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80029c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029c4:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80029c8:	08008d20 	.word	0x08008d20
  ldr r2, =_sbss
 80029cc:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80029d0:	2000093c 	.word	0x2000093c

080029d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029d4:	e7fe      	b.n	80029d4 <ADC_IRQHandler>
	...

080029d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029dc:	4b0e      	ldr	r3, [pc, #56]	; (8002a18 <HAL_Init+0x40>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a0d      	ldr	r2, [pc, #52]	; (8002a18 <HAL_Init+0x40>)
 80029e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029e8:	4b0b      	ldr	r3, [pc, #44]	; (8002a18 <HAL_Init+0x40>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a0a      	ldr	r2, [pc, #40]	; (8002a18 <HAL_Init+0x40>)
 80029ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029f4:	4b08      	ldr	r3, [pc, #32]	; (8002a18 <HAL_Init+0x40>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a07      	ldr	r2, [pc, #28]	; (8002a18 <HAL_Init+0x40>)
 80029fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a00:	2003      	movs	r0, #3
 8002a02:	f000 fd51 	bl	80034a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a06:	2000      	movs	r0, #0
 8002a08:	f000 f808 	bl	8002a1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a0c:	f7ff fc94 	bl	8002338 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	40023c00 	.word	0x40023c00

08002a1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a24:	4b12      	ldr	r3, [pc, #72]	; (8002a70 <HAL_InitTick+0x54>)
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	4b12      	ldr	r3, [pc, #72]	; (8002a74 <HAL_InitTick+0x58>)
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a32:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f000 fd69 	bl	8003512 <HAL_SYSTICK_Config>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e00e      	b.n	8002a68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2b0f      	cmp	r3, #15
 8002a4e:	d80a      	bhi.n	8002a66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a50:	2200      	movs	r2, #0
 8002a52:	6879      	ldr	r1, [r7, #4]
 8002a54:	f04f 30ff 	mov.w	r0, #4294967295
 8002a58:	f000 fd31 	bl	80034be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a5c:	4a06      	ldr	r2, [pc, #24]	; (8002a78 <HAL_InitTick+0x5c>)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a62:	2300      	movs	r3, #0
 8002a64:	e000      	b.n	8002a68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3708      	adds	r7, #8
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	20000010 	.word	0x20000010
 8002a74:	20000018 	.word	0x20000018
 8002a78:	20000014 	.word	0x20000014

08002a7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a80:	4b06      	ldr	r3, [pc, #24]	; (8002a9c <HAL_IncTick+0x20>)
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	461a      	mov	r2, r3
 8002a86:	4b06      	ldr	r3, [pc, #24]	; (8002aa0 <HAL_IncTick+0x24>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	4a04      	ldr	r2, [pc, #16]	; (8002aa0 <HAL_IncTick+0x24>)
 8002a8e:	6013      	str	r3, [r2, #0]
}
 8002a90:	bf00      	nop
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	20000018 	.word	0x20000018
 8002aa0:	20000928 	.word	0x20000928

08002aa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
  return uwTick;
 8002aa8:	4b03      	ldr	r3, [pc, #12]	; (8002ab8 <HAL_GetTick+0x14>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	20000928 	.word	0x20000928

08002abc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ac4:	f7ff ffee 	bl	8002aa4 <HAL_GetTick>
 8002ac8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad4:	d005      	beq.n	8002ae2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ad6:	4b0a      	ldr	r3, [pc, #40]	; (8002b00 <HAL_Delay+0x44>)
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	461a      	mov	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	4413      	add	r3, r2
 8002ae0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ae2:	bf00      	nop
 8002ae4:	f7ff ffde 	bl	8002aa4 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d8f7      	bhi.n	8002ae4 <HAL_Delay+0x28>
  {
  }
}
 8002af4:	bf00      	nop
 8002af6:	bf00      	nop
 8002af8:	3710      	adds	r7, #16
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	20000018 	.word	0x20000018

08002b04 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d101      	bne.n	8002b1a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e033      	b.n	8002b82 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d109      	bne.n	8002b36 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f7ff fc30 	bl	8002388 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	f003 0310 	and.w	r3, r3, #16
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d118      	bne.n	8002b74 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b46:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002b4a:	f023 0302 	bic.w	r3, r3, #2
 8002b4e:	f043 0202 	orr.w	r2, r3, #2
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 fa58 	bl	800300c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b66:	f023 0303 	bic.w	r3, r3, #3
 8002b6a:	f043 0201 	orr.w	r2, r3, #1
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	641a      	str	r2, [r3, #64]	; 0x40
 8002b72:	e001      	b.n	8002b78 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3710      	adds	r7, #16
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
	...

08002b8c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d101      	bne.n	8002baa <HAL_ADC_Start_DMA+0x1e>
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	e0ce      	b.n	8002d48 <HAL_ADC_Start_DMA+0x1bc>
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2201      	movs	r2, #1
 8002bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f003 0301 	and.w	r3, r3, #1
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d018      	beq.n	8002bf2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	689a      	ldr	r2, [r3, #8]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f042 0201 	orr.w	r2, r2, #1
 8002bce:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002bd0:	4b5f      	ldr	r3, [pc, #380]	; (8002d50 <HAL_ADC_Start_DMA+0x1c4>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a5f      	ldr	r2, [pc, #380]	; (8002d54 <HAL_ADC_Start_DMA+0x1c8>)
 8002bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bda:	0c9a      	lsrs	r2, r3, #18
 8002bdc:	4613      	mov	r3, r2
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	4413      	add	r3, r2
 8002be2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002be4:	e002      	b.n	8002bec <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	3b01      	subs	r3, #1
 8002bea:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1f9      	bne.n	8002be6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c00:	d107      	bne.n	8002c12 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	689a      	ldr	r2, [r3, #8]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c10:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f003 0301 	and.w	r3, r3, #1
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	f040 8086 	bne.w	8002d2e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002c2a:	f023 0301 	bic.w	r3, r3, #1
 8002c2e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d007      	beq.n	8002c54 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c48:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c4c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c60:	d106      	bne.n	8002c70 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c66:	f023 0206 	bic.w	r2, r3, #6
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	645a      	str	r2, [r3, #68]	; 0x44
 8002c6e:	e002      	b.n	8002c76 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2200      	movs	r2, #0
 8002c74:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c7e:	4b36      	ldr	r3, [pc, #216]	; (8002d58 <HAL_ADC_Start_DMA+0x1cc>)
 8002c80:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c86:	4a35      	ldr	r2, [pc, #212]	; (8002d5c <HAL_ADC_Start_DMA+0x1d0>)
 8002c88:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c8e:	4a34      	ldr	r2, [pc, #208]	; (8002d60 <HAL_ADC_Start_DMA+0x1d4>)
 8002c90:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c96:	4a33      	ldr	r2, [pc, #204]	; (8002d64 <HAL_ADC_Start_DMA+0x1d8>)
 8002c98:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002ca2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	685a      	ldr	r2, [r3, #4]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002cb2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	689a      	ldr	r2, [r3, #8]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cc2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	334c      	adds	r3, #76	; 0x4c
 8002cce:	4619      	mov	r1, r3
 8002cd0:	68ba      	ldr	r2, [r7, #8]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f000 fcd8 	bl	8003688 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f003 031f 	and.w	r3, r3, #31
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d10f      	bne.n	8002d04 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d129      	bne.n	8002d46 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	689a      	ldr	r2, [r3, #8]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002d00:	609a      	str	r2, [r3, #8]
 8002d02:	e020      	b.n	8002d46 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a17      	ldr	r2, [pc, #92]	; (8002d68 <HAL_ADC_Start_DMA+0x1dc>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d11b      	bne.n	8002d46 <HAL_ADC_Start_DMA+0x1ba>
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d114      	bne.n	8002d46 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	689a      	ldr	r2, [r3, #8]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002d2a:	609a      	str	r2, [r3, #8]
 8002d2c:	e00b      	b.n	8002d46 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d32:	f043 0210 	orr.w	r2, r3, #16
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3e:	f043 0201 	orr.w	r2, r3, #1
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3718      	adds	r7, #24
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	20000010 	.word	0x20000010
 8002d54:	431bde83 	.word	0x431bde83
 8002d58:	40012300 	.word	0x40012300
 8002d5c:	08003205 	.word	0x08003205
 8002d60:	080032bf 	.word	0x080032bf
 8002d64:	080032db 	.word	0x080032db
 8002d68:	40012000 	.word	0x40012000

08002d6c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002db2:	2300      	movs	r3, #0
 8002db4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d101      	bne.n	8002dc4 <HAL_ADC_ConfigChannel+0x1c>
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	e113      	b.n	8002fec <HAL_ADC_ConfigChannel+0x244>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2b09      	cmp	r3, #9
 8002dd2:	d925      	bls.n	8002e20 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68d9      	ldr	r1, [r3, #12]
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	461a      	mov	r2, r3
 8002de2:	4613      	mov	r3, r2
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	4413      	add	r3, r2
 8002de8:	3b1e      	subs	r3, #30
 8002dea:	2207      	movs	r2, #7
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	43da      	mvns	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	400a      	ands	r2, r1
 8002df8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68d9      	ldr	r1, [r3, #12]
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	689a      	ldr	r2, [r3, #8]
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	4403      	add	r3, r0
 8002e12:	3b1e      	subs	r3, #30
 8002e14:	409a      	lsls	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	60da      	str	r2, [r3, #12]
 8002e1e:	e022      	b.n	8002e66 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	6919      	ldr	r1, [r3, #16]
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	4613      	mov	r3, r2
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	4413      	add	r3, r2
 8002e34:	2207      	movs	r2, #7
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	43da      	mvns	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	400a      	ands	r2, r1
 8002e42:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6919      	ldr	r1, [r3, #16]
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	689a      	ldr	r2, [r3, #8]
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	4618      	mov	r0, r3
 8002e56:	4603      	mov	r3, r0
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	4403      	add	r3, r0
 8002e5c:	409a      	lsls	r2, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	430a      	orrs	r2, r1
 8002e64:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	2b06      	cmp	r3, #6
 8002e6c:	d824      	bhi.n	8002eb8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685a      	ldr	r2, [r3, #4]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4413      	add	r3, r2
 8002e7e:	3b05      	subs	r3, #5
 8002e80:	221f      	movs	r2, #31
 8002e82:	fa02 f303 	lsl.w	r3, r2, r3
 8002e86:	43da      	mvns	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	400a      	ands	r2, r1
 8002e8e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	685a      	ldr	r2, [r3, #4]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	4413      	add	r3, r2
 8002ea8:	3b05      	subs	r3, #5
 8002eaa:	fa00 f203 	lsl.w	r2, r0, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	635a      	str	r2, [r3, #52]	; 0x34
 8002eb6:	e04c      	b.n	8002f52 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	2b0c      	cmp	r3, #12
 8002ebe:	d824      	bhi.n	8002f0a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685a      	ldr	r2, [r3, #4]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	4413      	add	r3, r2
 8002ed0:	3b23      	subs	r3, #35	; 0x23
 8002ed2:	221f      	movs	r2, #31
 8002ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed8:	43da      	mvns	r2, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	400a      	ands	r2, r1
 8002ee0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	4618      	mov	r0, r3
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685a      	ldr	r2, [r3, #4]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	4413      	add	r3, r2
 8002efa:	3b23      	subs	r3, #35	; 0x23
 8002efc:	fa00 f203 	lsl.w	r2, r0, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	430a      	orrs	r2, r1
 8002f06:	631a      	str	r2, [r3, #48]	; 0x30
 8002f08:	e023      	b.n	8002f52 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685a      	ldr	r2, [r3, #4]
 8002f14:	4613      	mov	r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	4413      	add	r3, r2
 8002f1a:	3b41      	subs	r3, #65	; 0x41
 8002f1c:	221f      	movs	r2, #31
 8002f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f22:	43da      	mvns	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	400a      	ands	r2, r1
 8002f2a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	4618      	mov	r0, r3
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685a      	ldr	r2, [r3, #4]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	4413      	add	r3, r2
 8002f44:	3b41      	subs	r3, #65	; 0x41
 8002f46:	fa00 f203 	lsl.w	r2, r0, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f52:	4b29      	ldr	r3, [pc, #164]	; (8002ff8 <HAL_ADC_ConfigChannel+0x250>)
 8002f54:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a28      	ldr	r2, [pc, #160]	; (8002ffc <HAL_ADC_ConfigChannel+0x254>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d10f      	bne.n	8002f80 <HAL_ADC_ConfigChannel+0x1d8>
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2b12      	cmp	r3, #18
 8002f66:	d10b      	bne.n	8002f80 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a1d      	ldr	r2, [pc, #116]	; (8002ffc <HAL_ADC_ConfigChannel+0x254>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d12b      	bne.n	8002fe2 <HAL_ADC_ConfigChannel+0x23a>
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a1c      	ldr	r2, [pc, #112]	; (8003000 <HAL_ADC_ConfigChannel+0x258>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d003      	beq.n	8002f9c <HAL_ADC_ConfigChannel+0x1f4>
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2b11      	cmp	r3, #17
 8002f9a:	d122      	bne.n	8002fe2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a11      	ldr	r2, [pc, #68]	; (8003000 <HAL_ADC_ConfigChannel+0x258>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d111      	bne.n	8002fe2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002fbe:	4b11      	ldr	r3, [pc, #68]	; (8003004 <HAL_ADC_ConfigChannel+0x25c>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a11      	ldr	r2, [pc, #68]	; (8003008 <HAL_ADC_ConfigChannel+0x260>)
 8002fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc8:	0c9a      	lsrs	r2, r3, #18
 8002fca:	4613      	mov	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	4413      	add	r3, r2
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002fd4:	e002      	b.n	8002fdc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1f9      	bne.n	8002fd6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3714      	adds	r7, #20
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr
 8002ff8:	40012300 	.word	0x40012300
 8002ffc:	40012000 	.word	0x40012000
 8003000:	10000012 	.word	0x10000012
 8003004:	20000010 	.word	0x20000010
 8003008:	431bde83 	.word	0x431bde83

0800300c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800300c:	b480      	push	{r7}
 800300e:	b085      	sub	sp, #20
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003014:	4b79      	ldr	r3, [pc, #484]	; (80031fc <ADC_Init+0x1f0>)
 8003016:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	685a      	ldr	r2, [r3, #4]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	431a      	orrs	r2, r3
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	685a      	ldr	r2, [r3, #4]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003040:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	6859      	ldr	r1, [r3, #4]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	021a      	lsls	r2, r3, #8
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	430a      	orrs	r2, r1
 8003054:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	685a      	ldr	r2, [r3, #4]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003064:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	6859      	ldr	r1, [r3, #4]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689a      	ldr	r2, [r3, #8]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	430a      	orrs	r2, r1
 8003076:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	689a      	ldr	r2, [r3, #8]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003086:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	6899      	ldr	r1, [r3, #8]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	68da      	ldr	r2, [r3, #12]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	430a      	orrs	r2, r1
 8003098:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309e:	4a58      	ldr	r2, [pc, #352]	; (8003200 <ADC_Init+0x1f4>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d022      	beq.n	80030ea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	689a      	ldr	r2, [r3, #8]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80030b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	6899      	ldr	r1, [r3, #8]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	430a      	orrs	r2, r1
 80030c4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	689a      	ldr	r2, [r3, #8]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80030d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	6899      	ldr	r1, [r3, #8]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	430a      	orrs	r2, r1
 80030e6:	609a      	str	r2, [r3, #8]
 80030e8:	e00f      	b.n	800310a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	689a      	ldr	r2, [r3, #8]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80030f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	689a      	ldr	r2, [r3, #8]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003108:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	689a      	ldr	r2, [r3, #8]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f022 0202 	bic.w	r2, r2, #2
 8003118:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	6899      	ldr	r1, [r3, #8]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	7e1b      	ldrb	r3, [r3, #24]
 8003124:	005a      	lsls	r2, r3, #1
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	430a      	orrs	r2, r1
 800312c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d01b      	beq.n	8003170 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	685a      	ldr	r2, [r3, #4]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003146:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	685a      	ldr	r2, [r3, #4]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003156:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	6859      	ldr	r1, [r3, #4]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003162:	3b01      	subs	r3, #1
 8003164:	035a      	lsls	r2, r3, #13
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	430a      	orrs	r2, r1
 800316c:	605a      	str	r2, [r3, #4]
 800316e:	e007      	b.n	8003180 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	685a      	ldr	r2, [r3, #4]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800317e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800318e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	3b01      	subs	r3, #1
 800319c:	051a      	lsls	r2, r3, #20
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	430a      	orrs	r2, r1
 80031a4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	689a      	ldr	r2, [r3, #8]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80031b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	6899      	ldr	r1, [r3, #8]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80031c2:	025a      	lsls	r2, r3, #9
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	430a      	orrs	r2, r1
 80031ca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	689a      	ldr	r2, [r3, #8]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	6899      	ldr	r1, [r3, #8]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	029a      	lsls	r2, r3, #10
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	430a      	orrs	r2, r1
 80031ee:	609a      	str	r2, [r3, #8]
}
 80031f0:	bf00      	nop
 80031f2:	3714      	adds	r7, #20
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr
 80031fc:	40012300 	.word	0x40012300
 8003200:	0f000001 	.word	0x0f000001

08003204 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003210:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003216:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800321a:	2b00      	cmp	r3, #0
 800321c:	d13c      	bne.n	8003298 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003222:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d12b      	bne.n	8003290 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800323c:	2b00      	cmp	r3, #0
 800323e:	d127      	bne.n	8003290 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003246:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800324a:	2b00      	cmp	r3, #0
 800324c:	d006      	beq.n	800325c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003258:	2b00      	cmp	r3, #0
 800325a:	d119      	bne.n	8003290 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	685a      	ldr	r2, [r3, #4]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f022 0220 	bic.w	r2, r2, #32
 800326a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003270:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d105      	bne.n	8003290 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003288:	f043 0201 	orr.w	r2, r3, #1
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003290:	68f8      	ldr	r0, [r7, #12]
 8003292:	f7ff fd6b 	bl	8002d6c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003296:	e00e      	b.n	80032b6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329c:	f003 0310 	and.w	r3, r3, #16
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d003      	beq.n	80032ac <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80032a4:	68f8      	ldr	r0, [r7, #12]
 80032a6:	f7ff fd75 	bl	8002d94 <HAL_ADC_ErrorCallback>
}
 80032aa:	e004      	b.n	80032b6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	4798      	blx	r3
}
 80032b6:	bf00      	nop
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80032be:	b580      	push	{r7, lr}
 80032c0:	b084      	sub	sp, #16
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ca:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80032cc:	68f8      	ldr	r0, [r7, #12]
 80032ce:	f7ff fd57 	bl	8002d80 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80032d2:	bf00      	nop
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b084      	sub	sp, #16
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2240      	movs	r2, #64	; 0x40
 80032ec:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f2:	f043 0204 	orr.w	r2, r3, #4
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80032fa:	68f8      	ldr	r0, [r7, #12]
 80032fc:	f7ff fd4a 	bl	8002d94 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003300:	bf00      	nop
 8003302:	3710      	adds	r7, #16
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f003 0307 	and.w	r3, r3, #7
 8003316:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003318:	4b0c      	ldr	r3, [pc, #48]	; (800334c <__NVIC_SetPriorityGrouping+0x44>)
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800331e:	68ba      	ldr	r2, [r7, #8]
 8003320:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003324:	4013      	ands	r3, r2
 8003326:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003330:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003334:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003338:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800333a:	4a04      	ldr	r2, [pc, #16]	; (800334c <__NVIC_SetPriorityGrouping+0x44>)
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	60d3      	str	r3, [r2, #12]
}
 8003340:	bf00      	nop
 8003342:	3714      	adds	r7, #20
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr
 800334c:	e000ed00 	.word	0xe000ed00

08003350 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003354:	4b04      	ldr	r3, [pc, #16]	; (8003368 <__NVIC_GetPriorityGrouping+0x18>)
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	0a1b      	lsrs	r3, r3, #8
 800335a:	f003 0307 	and.w	r3, r3, #7
}
 800335e:	4618      	mov	r0, r3
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr
 8003368:	e000ed00 	.word	0xe000ed00

0800336c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	4603      	mov	r3, r0
 8003374:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800337a:	2b00      	cmp	r3, #0
 800337c:	db0b      	blt.n	8003396 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800337e:	79fb      	ldrb	r3, [r7, #7]
 8003380:	f003 021f 	and.w	r2, r3, #31
 8003384:	4907      	ldr	r1, [pc, #28]	; (80033a4 <__NVIC_EnableIRQ+0x38>)
 8003386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800338a:	095b      	lsrs	r3, r3, #5
 800338c:	2001      	movs	r0, #1
 800338e:	fa00 f202 	lsl.w	r2, r0, r2
 8003392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003396:	bf00      	nop
 8003398:	370c      	adds	r7, #12
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	e000e100 	.word	0xe000e100

080033a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	4603      	mov	r3, r0
 80033b0:	6039      	str	r1, [r7, #0]
 80033b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	db0a      	blt.n	80033d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	b2da      	uxtb	r2, r3
 80033c0:	490c      	ldr	r1, [pc, #48]	; (80033f4 <__NVIC_SetPriority+0x4c>)
 80033c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c6:	0112      	lsls	r2, r2, #4
 80033c8:	b2d2      	uxtb	r2, r2
 80033ca:	440b      	add	r3, r1
 80033cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033d0:	e00a      	b.n	80033e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	b2da      	uxtb	r2, r3
 80033d6:	4908      	ldr	r1, [pc, #32]	; (80033f8 <__NVIC_SetPriority+0x50>)
 80033d8:	79fb      	ldrb	r3, [r7, #7]
 80033da:	f003 030f 	and.w	r3, r3, #15
 80033de:	3b04      	subs	r3, #4
 80033e0:	0112      	lsls	r2, r2, #4
 80033e2:	b2d2      	uxtb	r2, r2
 80033e4:	440b      	add	r3, r1
 80033e6:	761a      	strb	r2, [r3, #24]
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr
 80033f4:	e000e100 	.word	0xe000e100
 80033f8:	e000ed00 	.word	0xe000ed00

080033fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b089      	sub	sp, #36	; 0x24
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f003 0307 	and.w	r3, r3, #7
 800340e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	f1c3 0307 	rsb	r3, r3, #7
 8003416:	2b04      	cmp	r3, #4
 8003418:	bf28      	it	cs
 800341a:	2304      	movcs	r3, #4
 800341c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	3304      	adds	r3, #4
 8003422:	2b06      	cmp	r3, #6
 8003424:	d902      	bls.n	800342c <NVIC_EncodePriority+0x30>
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	3b03      	subs	r3, #3
 800342a:	e000      	b.n	800342e <NVIC_EncodePriority+0x32>
 800342c:	2300      	movs	r3, #0
 800342e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003430:	f04f 32ff 	mov.w	r2, #4294967295
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	fa02 f303 	lsl.w	r3, r2, r3
 800343a:	43da      	mvns	r2, r3
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	401a      	ands	r2, r3
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003444:	f04f 31ff 	mov.w	r1, #4294967295
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	fa01 f303 	lsl.w	r3, r1, r3
 800344e:	43d9      	mvns	r1, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003454:	4313      	orrs	r3, r2
         );
}
 8003456:	4618      	mov	r0, r3
 8003458:	3724      	adds	r7, #36	; 0x24
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
	...

08003464 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	3b01      	subs	r3, #1
 8003470:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003474:	d301      	bcc.n	800347a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003476:	2301      	movs	r3, #1
 8003478:	e00f      	b.n	800349a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800347a:	4a0a      	ldr	r2, [pc, #40]	; (80034a4 <SysTick_Config+0x40>)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	3b01      	subs	r3, #1
 8003480:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003482:	210f      	movs	r1, #15
 8003484:	f04f 30ff 	mov.w	r0, #4294967295
 8003488:	f7ff ff8e 	bl	80033a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800348c:	4b05      	ldr	r3, [pc, #20]	; (80034a4 <SysTick_Config+0x40>)
 800348e:	2200      	movs	r2, #0
 8003490:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003492:	4b04      	ldr	r3, [pc, #16]	; (80034a4 <SysTick_Config+0x40>)
 8003494:	2207      	movs	r2, #7
 8003496:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3708      	adds	r7, #8
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	e000e010 	.word	0xe000e010

080034a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f7ff ff29 	bl	8003308 <__NVIC_SetPriorityGrouping>
}
 80034b6:	bf00      	nop
 80034b8:	3708      	adds	r7, #8
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}

080034be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034be:	b580      	push	{r7, lr}
 80034c0:	b086      	sub	sp, #24
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	4603      	mov	r3, r0
 80034c6:	60b9      	str	r1, [r7, #8]
 80034c8:	607a      	str	r2, [r7, #4]
 80034ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034cc:	2300      	movs	r3, #0
 80034ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034d0:	f7ff ff3e 	bl	8003350 <__NVIC_GetPriorityGrouping>
 80034d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	68b9      	ldr	r1, [r7, #8]
 80034da:	6978      	ldr	r0, [r7, #20]
 80034dc:	f7ff ff8e 	bl	80033fc <NVIC_EncodePriority>
 80034e0:	4602      	mov	r2, r0
 80034e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034e6:	4611      	mov	r1, r2
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7ff ff5d 	bl	80033a8 <__NVIC_SetPriority>
}
 80034ee:	bf00      	nop
 80034f0:	3718      	adds	r7, #24
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b082      	sub	sp, #8
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	4603      	mov	r3, r0
 80034fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003504:	4618      	mov	r0, r3
 8003506:	f7ff ff31 	bl	800336c <__NVIC_EnableIRQ>
}
 800350a:	bf00      	nop
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003512:	b580      	push	{r7, lr}
 8003514:	b082      	sub	sp, #8
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f7ff ffa2 	bl	8003464 <SysTick_Config>
 8003520:	4603      	mov	r3, r0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3708      	adds	r7, #8
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
	...

0800352c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003534:	2300      	movs	r3, #0
 8003536:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003538:	f7ff fab4 	bl	8002aa4 <HAL_GetTick>
 800353c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d101      	bne.n	8003548 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e099      	b.n	800367c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2202      	movs	r2, #2
 800354c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f022 0201 	bic.w	r2, r2, #1
 8003566:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003568:	e00f      	b.n	800358a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800356a:	f7ff fa9b 	bl	8002aa4 <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	2b05      	cmp	r3, #5
 8003576:	d908      	bls.n	800358a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2220      	movs	r2, #32
 800357c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2203      	movs	r2, #3
 8003582:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e078      	b.n	800367c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0301 	and.w	r3, r3, #1
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1e8      	bne.n	800356a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80035a0:	697a      	ldr	r2, [r7, #20]
 80035a2:	4b38      	ldr	r3, [pc, #224]	; (8003684 <HAL_DMA_Init+0x158>)
 80035a4:	4013      	ands	r3, r2
 80035a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685a      	ldr	r2, [r3, #4]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	691b      	ldr	r3, [r3, #16]
 80035bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a1b      	ldr	r3, [r3, #32]
 80035d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035d6:	697a      	ldr	r2, [r7, #20]
 80035d8:	4313      	orrs	r3, r2
 80035da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e0:	2b04      	cmp	r3, #4
 80035e2:	d107      	bne.n	80035f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ec:	4313      	orrs	r3, r2
 80035ee:	697a      	ldr	r2, [r7, #20]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	697a      	ldr	r2, [r7, #20]
 80035fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	f023 0307 	bic.w	r3, r3, #7
 800360a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	4313      	orrs	r3, r2
 8003614:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361a:	2b04      	cmp	r3, #4
 800361c:	d117      	bne.n	800364e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	4313      	orrs	r3, r2
 8003626:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362c:	2b00      	cmp	r3, #0
 800362e:	d00e      	beq.n	800364e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f000 fb01 	bl	8003c38 <DMA_CheckFifoParam>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d008      	beq.n	800364e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2240      	movs	r2, #64	; 0x40
 8003640:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2201      	movs	r2, #1
 8003646:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800364a:	2301      	movs	r3, #1
 800364c:	e016      	b.n	800367c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	697a      	ldr	r2, [r7, #20]
 8003654:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 fab8 	bl	8003bcc <DMA_CalcBaseAndBitshift>
 800365c:	4603      	mov	r3, r0
 800365e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003664:	223f      	movs	r2, #63	; 0x3f
 8003666:	409a      	lsls	r2, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2201      	movs	r2, #1
 8003676:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	3718      	adds	r7, #24
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	f010803f 	.word	0xf010803f

08003688 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b086      	sub	sp, #24
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	607a      	str	r2, [r7, #4]
 8003694:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003696:	2300      	movs	r3, #0
 8003698:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800369e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d101      	bne.n	80036ae <HAL_DMA_Start_IT+0x26>
 80036aa:	2302      	movs	r3, #2
 80036ac:	e040      	b.n	8003730 <HAL_DMA_Start_IT+0xa8>
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2201      	movs	r2, #1
 80036b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d12f      	bne.n	8003722 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2202      	movs	r2, #2
 80036c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2200      	movs	r2, #0
 80036ce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	68b9      	ldr	r1, [r7, #8]
 80036d6:	68f8      	ldr	r0, [r7, #12]
 80036d8:	f000 fa4a 	bl	8003b70 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e0:	223f      	movs	r2, #63	; 0x3f
 80036e2:	409a      	lsls	r2, r3
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f042 0216 	orr.w	r2, r2, #22
 80036f6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d007      	beq.n	8003710 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f042 0208 	orr.w	r2, r2, #8
 800370e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f042 0201 	orr.w	r2, r2, #1
 800371e:	601a      	str	r2, [r3, #0]
 8003720:	e005      	b.n	800372e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800372a:	2302      	movs	r3, #2
 800372c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800372e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003730:	4618      	mov	r0, r3
 8003732:	3718      	adds	r7, #24
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003744:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003746:	f7ff f9ad 	bl	8002aa4 <HAL_GetTick>
 800374a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003752:	b2db      	uxtb	r3, r3
 8003754:	2b02      	cmp	r3, #2
 8003756:	d008      	beq.n	800376a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2280      	movs	r2, #128	; 0x80
 800375c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e052      	b.n	8003810 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f022 0216 	bic.w	r2, r2, #22
 8003778:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	695a      	ldr	r2, [r3, #20]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003788:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378e:	2b00      	cmp	r3, #0
 8003790:	d103      	bne.n	800379a <HAL_DMA_Abort+0x62>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003796:	2b00      	cmp	r3, #0
 8003798:	d007      	beq.n	80037aa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 0208 	bic.w	r2, r2, #8
 80037a8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f022 0201 	bic.w	r2, r2, #1
 80037b8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037ba:	e013      	b.n	80037e4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037bc:	f7ff f972 	bl	8002aa4 <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	2b05      	cmp	r3, #5
 80037c8:	d90c      	bls.n	80037e4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2220      	movs	r2, #32
 80037ce:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2203      	movs	r2, #3
 80037d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e015      	b.n	8003810 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0301 	and.w	r3, r3, #1
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d1e4      	bne.n	80037bc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037f6:	223f      	movs	r2, #63	; 0x3f
 80037f8:	409a      	lsls	r2, r3
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2201      	movs	r2, #1
 8003802:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800380e:	2300      	movs	r3, #0
}
 8003810:	4618      	mov	r0, r3
 8003812:	3710      	adds	r7, #16
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003826:	b2db      	uxtb	r3, r3
 8003828:	2b02      	cmp	r3, #2
 800382a:	d004      	beq.n	8003836 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2280      	movs	r2, #128	; 0x80
 8003830:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e00c      	b.n	8003850 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2205      	movs	r2, #5
 800383a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f022 0201 	bic.w	r2, r2, #1
 800384c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b086      	sub	sp, #24
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003864:	2300      	movs	r3, #0
 8003866:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003868:	4b92      	ldr	r3, [pc, #584]	; (8003ab4 <HAL_DMA_IRQHandler+0x258>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a92      	ldr	r2, [pc, #584]	; (8003ab8 <HAL_DMA_IRQHandler+0x25c>)
 800386e:	fba2 2303 	umull	r2, r3, r2, r3
 8003872:	0a9b      	lsrs	r3, r3, #10
 8003874:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800387a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003886:	2208      	movs	r2, #8
 8003888:	409a      	lsls	r2, r3
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	4013      	ands	r3, r2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d01a      	beq.n	80038c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0304 	and.w	r3, r3, #4
 800389c:	2b00      	cmp	r3, #0
 800389e:	d013      	beq.n	80038c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f022 0204 	bic.w	r2, r2, #4
 80038ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038b4:	2208      	movs	r2, #8
 80038b6:	409a      	lsls	r2, r3
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c0:	f043 0201 	orr.w	r2, r3, #1
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038cc:	2201      	movs	r2, #1
 80038ce:	409a      	lsls	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	4013      	ands	r3, r2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d012      	beq.n	80038fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00b      	beq.n	80038fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ea:	2201      	movs	r2, #1
 80038ec:	409a      	lsls	r2, r3
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038f6:	f043 0202 	orr.w	r2, r3, #2
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003902:	2204      	movs	r2, #4
 8003904:	409a      	lsls	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	4013      	ands	r3, r2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d012      	beq.n	8003934 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0302 	and.w	r3, r3, #2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d00b      	beq.n	8003934 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003920:	2204      	movs	r2, #4
 8003922:	409a      	lsls	r2, r3
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800392c:	f043 0204 	orr.w	r2, r3, #4
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003938:	2210      	movs	r2, #16
 800393a:	409a      	lsls	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	4013      	ands	r3, r2
 8003940:	2b00      	cmp	r3, #0
 8003942:	d043      	beq.n	80039cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0308 	and.w	r3, r3, #8
 800394e:	2b00      	cmp	r3, #0
 8003950:	d03c      	beq.n	80039cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003956:	2210      	movs	r2, #16
 8003958:	409a      	lsls	r2, r3
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d018      	beq.n	800399e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d108      	bne.n	800398c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397e:	2b00      	cmp	r3, #0
 8003980:	d024      	beq.n	80039cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	4798      	blx	r3
 800398a:	e01f      	b.n	80039cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003990:	2b00      	cmp	r3, #0
 8003992:	d01b      	beq.n	80039cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	4798      	blx	r3
 800399c:	e016      	b.n	80039cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d107      	bne.n	80039bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f022 0208 	bic.w	r2, r2, #8
 80039ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d003      	beq.n	80039cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d0:	2220      	movs	r2, #32
 80039d2:	409a      	lsls	r2, r3
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	4013      	ands	r3, r2
 80039d8:	2b00      	cmp	r3, #0
 80039da:	f000 808e 	beq.w	8003afa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0310 	and.w	r3, r3, #16
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f000 8086 	beq.w	8003afa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039f2:	2220      	movs	r2, #32
 80039f4:	409a      	lsls	r2, r3
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	2b05      	cmp	r3, #5
 8003a04:	d136      	bne.n	8003a74 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f022 0216 	bic.w	r2, r2, #22
 8003a14:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	695a      	ldr	r2, [r3, #20]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a24:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d103      	bne.n	8003a36 <HAL_DMA_IRQHandler+0x1da>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d007      	beq.n	8003a46 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f022 0208 	bic.w	r2, r2, #8
 8003a44:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a4a:	223f      	movs	r2, #63	; 0x3f
 8003a4c:	409a      	lsls	r2, r3
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2201      	movs	r2, #1
 8003a56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d07d      	beq.n	8003b66 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	4798      	blx	r3
        }
        return;
 8003a72:	e078      	b.n	8003b66 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d01c      	beq.n	8003abc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d108      	bne.n	8003aa2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d030      	beq.n	8003afa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	4798      	blx	r3
 8003aa0:	e02b      	b.n	8003afa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d027      	beq.n	8003afa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	4798      	blx	r3
 8003ab2:	e022      	b.n	8003afa <HAL_DMA_IRQHandler+0x29e>
 8003ab4:	20000010 	.word	0x20000010
 8003ab8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d10f      	bne.n	8003aea <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f022 0210 	bic.w	r2, r2, #16
 8003ad8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2201      	movs	r2, #1
 8003ade:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d003      	beq.n	8003afa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d032      	beq.n	8003b68 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d022      	beq.n	8003b54 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2205      	movs	r2, #5
 8003b12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f022 0201 	bic.w	r2, r2, #1
 8003b24:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	3301      	adds	r3, #1
 8003b2a:	60bb      	str	r3, [r7, #8]
 8003b2c:	697a      	ldr	r2, [r7, #20]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d307      	bcc.n	8003b42 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0301 	and.w	r3, r3, #1
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d1f2      	bne.n	8003b26 <HAL_DMA_IRQHandler+0x2ca>
 8003b40:	e000      	b.n	8003b44 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003b42:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d005      	beq.n	8003b68 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	4798      	blx	r3
 8003b64:	e000      	b.n	8003b68 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003b66:	bf00      	nop
    }
  }
}
 8003b68:	3718      	adds	r7, #24
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop

08003b70 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b085      	sub	sp, #20
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]
 8003b7c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b8c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	683a      	ldr	r2, [r7, #0]
 8003b94:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	2b40      	cmp	r3, #64	; 0x40
 8003b9c:	d108      	bne.n	8003bb0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68ba      	ldr	r2, [r7, #8]
 8003bac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003bae:	e007      	b.n	8003bc0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68ba      	ldr	r2, [r7, #8]
 8003bb6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	60da      	str	r2, [r3, #12]
}
 8003bc0:	bf00      	nop
 8003bc2:	3714      	adds	r7, #20
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b085      	sub	sp, #20
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	3b10      	subs	r3, #16
 8003bdc:	4a14      	ldr	r2, [pc, #80]	; (8003c30 <DMA_CalcBaseAndBitshift+0x64>)
 8003bde:	fba2 2303 	umull	r2, r3, r2, r3
 8003be2:	091b      	lsrs	r3, r3, #4
 8003be4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003be6:	4a13      	ldr	r2, [pc, #76]	; (8003c34 <DMA_CalcBaseAndBitshift+0x68>)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	4413      	add	r3, r2
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	461a      	mov	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2b03      	cmp	r3, #3
 8003bf8:	d909      	bls.n	8003c0e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c02:	f023 0303 	bic.w	r3, r3, #3
 8003c06:	1d1a      	adds	r2, r3, #4
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	659a      	str	r2, [r3, #88]	; 0x58
 8003c0c:	e007      	b.n	8003c1e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c16:	f023 0303 	bic.w	r3, r3, #3
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3714      	adds	r7, #20
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	aaaaaaab 	.word	0xaaaaaaab
 8003c34:	08008c70 	.word	0x08008c70

08003c38 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c40:	2300      	movs	r3, #0
 8003c42:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c48:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d11f      	bne.n	8003c92 <DMA_CheckFifoParam+0x5a>
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	2b03      	cmp	r3, #3
 8003c56:	d856      	bhi.n	8003d06 <DMA_CheckFifoParam+0xce>
 8003c58:	a201      	add	r2, pc, #4	; (adr r2, 8003c60 <DMA_CheckFifoParam+0x28>)
 8003c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c5e:	bf00      	nop
 8003c60:	08003c71 	.word	0x08003c71
 8003c64:	08003c83 	.word	0x08003c83
 8003c68:	08003c71 	.word	0x08003c71
 8003c6c:	08003d07 	.word	0x08003d07
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d046      	beq.n	8003d0a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c80:	e043      	b.n	8003d0a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c86:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c8a:	d140      	bne.n	8003d0e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c90:	e03d      	b.n	8003d0e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c9a:	d121      	bne.n	8003ce0 <DMA_CheckFifoParam+0xa8>
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	2b03      	cmp	r3, #3
 8003ca0:	d837      	bhi.n	8003d12 <DMA_CheckFifoParam+0xda>
 8003ca2:	a201      	add	r2, pc, #4	; (adr r2, 8003ca8 <DMA_CheckFifoParam+0x70>)
 8003ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca8:	08003cb9 	.word	0x08003cb9
 8003cac:	08003cbf 	.word	0x08003cbf
 8003cb0:	08003cb9 	.word	0x08003cb9
 8003cb4:	08003cd1 	.word	0x08003cd1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	73fb      	strb	r3, [r7, #15]
      break;
 8003cbc:	e030      	b.n	8003d20 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d025      	beq.n	8003d16 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cce:	e022      	b.n	8003d16 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003cd8:	d11f      	bne.n	8003d1a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003cde:	e01c      	b.n	8003d1a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d903      	bls.n	8003cee <DMA_CheckFifoParam+0xb6>
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	2b03      	cmp	r3, #3
 8003cea:	d003      	beq.n	8003cf4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003cec:	e018      	b.n	8003d20 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	73fb      	strb	r3, [r7, #15]
      break;
 8003cf2:	e015      	b.n	8003d20 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d00e      	beq.n	8003d1e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	73fb      	strb	r3, [r7, #15]
      break;
 8003d04:	e00b      	b.n	8003d1e <DMA_CheckFifoParam+0xe6>
      break;
 8003d06:	bf00      	nop
 8003d08:	e00a      	b.n	8003d20 <DMA_CheckFifoParam+0xe8>
      break;
 8003d0a:	bf00      	nop
 8003d0c:	e008      	b.n	8003d20 <DMA_CheckFifoParam+0xe8>
      break;
 8003d0e:	bf00      	nop
 8003d10:	e006      	b.n	8003d20 <DMA_CheckFifoParam+0xe8>
      break;
 8003d12:	bf00      	nop
 8003d14:	e004      	b.n	8003d20 <DMA_CheckFifoParam+0xe8>
      break;
 8003d16:	bf00      	nop
 8003d18:	e002      	b.n	8003d20 <DMA_CheckFifoParam+0xe8>
      break;   
 8003d1a:	bf00      	nop
 8003d1c:	e000      	b.n	8003d20 <DMA_CheckFifoParam+0xe8>
      break;
 8003d1e:	bf00      	nop
    }
  } 
  
  return status; 
 8003d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3714      	adds	r7, #20
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop

08003d30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b089      	sub	sp, #36	; 0x24
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003d42:	2300      	movs	r3, #0
 8003d44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d46:	2300      	movs	r3, #0
 8003d48:	61fb      	str	r3, [r7, #28]
 8003d4a:	e159      	b.n	8004000 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	fa02 f303 	lsl.w	r3, r2, r3
 8003d54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	697a      	ldr	r2, [r7, #20]
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d60:	693a      	ldr	r2, [r7, #16]
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	f040 8148 	bne.w	8003ffa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f003 0303 	and.w	r3, r3, #3
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d005      	beq.n	8003d82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d130      	bne.n	8003de4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	005b      	lsls	r3, r3, #1
 8003d8c:	2203      	movs	r2, #3
 8003d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d92:	43db      	mvns	r3, r3
 8003d94:	69ba      	ldr	r2, [r7, #24]
 8003d96:	4013      	ands	r3, r2
 8003d98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	68da      	ldr	r2, [r3, #12]
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	005b      	lsls	r3, r3, #1
 8003da2:	fa02 f303 	lsl.w	r3, r2, r3
 8003da6:	69ba      	ldr	r2, [r7, #24]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	69ba      	ldr	r2, [r7, #24]
 8003db0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003db8:	2201      	movs	r2, #1
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc0:	43db      	mvns	r3, r3
 8003dc2:	69ba      	ldr	r2, [r7, #24]
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	091b      	lsrs	r3, r3, #4
 8003dce:	f003 0201 	and.w	r2, r3, #1
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd8:	69ba      	ldr	r2, [r7, #24]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	69ba      	ldr	r2, [r7, #24]
 8003de2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f003 0303 	and.w	r3, r3, #3
 8003dec:	2b03      	cmp	r3, #3
 8003dee:	d017      	beq.n	8003e20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	005b      	lsls	r3, r3, #1
 8003dfa:	2203      	movs	r2, #3
 8003dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003e00:	43db      	mvns	r3, r3
 8003e02:	69ba      	ldr	r2, [r7, #24]
 8003e04:	4013      	ands	r3, r2
 8003e06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	689a      	ldr	r2, [r3, #8]
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	005b      	lsls	r3, r3, #1
 8003e10:	fa02 f303 	lsl.w	r3, r2, r3
 8003e14:	69ba      	ldr	r2, [r7, #24]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	69ba      	ldr	r2, [r7, #24]
 8003e1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f003 0303 	and.w	r3, r3, #3
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d123      	bne.n	8003e74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	08da      	lsrs	r2, r3, #3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	3208      	adds	r2, #8
 8003e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	f003 0307 	and.w	r3, r3, #7
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	220f      	movs	r2, #15
 8003e44:	fa02 f303 	lsl.w	r3, r2, r3
 8003e48:	43db      	mvns	r3, r3
 8003e4a:	69ba      	ldr	r2, [r7, #24]
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	691a      	ldr	r2, [r3, #16]
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	f003 0307 	and.w	r3, r3, #7
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e60:	69ba      	ldr	r2, [r7, #24]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	08da      	lsrs	r2, r3, #3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	3208      	adds	r2, #8
 8003e6e:	69b9      	ldr	r1, [r7, #24]
 8003e70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	005b      	lsls	r3, r3, #1
 8003e7e:	2203      	movs	r2, #3
 8003e80:	fa02 f303 	lsl.w	r3, r2, r3
 8003e84:	43db      	mvns	r3, r3
 8003e86:	69ba      	ldr	r2, [r7, #24]
 8003e88:	4013      	ands	r3, r2
 8003e8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f003 0203 	and.w	r2, r3, #3
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	005b      	lsls	r3, r3, #1
 8003e98:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9c:	69ba      	ldr	r2, [r7, #24]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	69ba      	ldr	r2, [r7, #24]
 8003ea6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	f000 80a2 	beq.w	8003ffa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	60fb      	str	r3, [r7, #12]
 8003eba:	4b57      	ldr	r3, [pc, #348]	; (8004018 <HAL_GPIO_Init+0x2e8>)
 8003ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ebe:	4a56      	ldr	r2, [pc, #344]	; (8004018 <HAL_GPIO_Init+0x2e8>)
 8003ec0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ec4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ec6:	4b54      	ldr	r3, [pc, #336]	; (8004018 <HAL_GPIO_Init+0x2e8>)
 8003ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ece:	60fb      	str	r3, [r7, #12]
 8003ed0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ed2:	4a52      	ldr	r2, [pc, #328]	; (800401c <HAL_GPIO_Init+0x2ec>)
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	089b      	lsrs	r3, r3, #2
 8003ed8:	3302      	adds	r3, #2
 8003eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	f003 0303 	and.w	r3, r3, #3
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	220f      	movs	r2, #15
 8003eea:	fa02 f303 	lsl.w	r3, r2, r3
 8003eee:	43db      	mvns	r3, r3
 8003ef0:	69ba      	ldr	r2, [r7, #24]
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a49      	ldr	r2, [pc, #292]	; (8004020 <HAL_GPIO_Init+0x2f0>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d019      	beq.n	8003f32 <HAL_GPIO_Init+0x202>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a48      	ldr	r2, [pc, #288]	; (8004024 <HAL_GPIO_Init+0x2f4>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d013      	beq.n	8003f2e <HAL_GPIO_Init+0x1fe>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a47      	ldr	r2, [pc, #284]	; (8004028 <HAL_GPIO_Init+0x2f8>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d00d      	beq.n	8003f2a <HAL_GPIO_Init+0x1fa>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a46      	ldr	r2, [pc, #280]	; (800402c <HAL_GPIO_Init+0x2fc>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d007      	beq.n	8003f26 <HAL_GPIO_Init+0x1f6>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a45      	ldr	r2, [pc, #276]	; (8004030 <HAL_GPIO_Init+0x300>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d101      	bne.n	8003f22 <HAL_GPIO_Init+0x1f2>
 8003f1e:	2304      	movs	r3, #4
 8003f20:	e008      	b.n	8003f34 <HAL_GPIO_Init+0x204>
 8003f22:	2307      	movs	r3, #7
 8003f24:	e006      	b.n	8003f34 <HAL_GPIO_Init+0x204>
 8003f26:	2303      	movs	r3, #3
 8003f28:	e004      	b.n	8003f34 <HAL_GPIO_Init+0x204>
 8003f2a:	2302      	movs	r3, #2
 8003f2c:	e002      	b.n	8003f34 <HAL_GPIO_Init+0x204>
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e000      	b.n	8003f34 <HAL_GPIO_Init+0x204>
 8003f32:	2300      	movs	r3, #0
 8003f34:	69fa      	ldr	r2, [r7, #28]
 8003f36:	f002 0203 	and.w	r2, r2, #3
 8003f3a:	0092      	lsls	r2, r2, #2
 8003f3c:	4093      	lsls	r3, r2
 8003f3e:	69ba      	ldr	r2, [r7, #24]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f44:	4935      	ldr	r1, [pc, #212]	; (800401c <HAL_GPIO_Init+0x2ec>)
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	089b      	lsrs	r3, r3, #2
 8003f4a:	3302      	adds	r3, #2
 8003f4c:	69ba      	ldr	r2, [r7, #24]
 8003f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f52:	4b38      	ldr	r3, [pc, #224]	; (8004034 <HAL_GPIO_Init+0x304>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	43db      	mvns	r3, r3
 8003f5c:	69ba      	ldr	r2, [r7, #24]
 8003f5e:	4013      	ands	r3, r2
 8003f60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d003      	beq.n	8003f76 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003f6e:	69ba      	ldr	r2, [r7, #24]
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f76:	4a2f      	ldr	r2, [pc, #188]	; (8004034 <HAL_GPIO_Init+0x304>)
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003f7c:	4b2d      	ldr	r3, [pc, #180]	; (8004034 <HAL_GPIO_Init+0x304>)
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	43db      	mvns	r3, r3
 8003f86:	69ba      	ldr	r2, [r7, #24]
 8003f88:	4013      	ands	r3, r2
 8003f8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d003      	beq.n	8003fa0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003fa0:	4a24      	ldr	r2, [pc, #144]	; (8004034 <HAL_GPIO_Init+0x304>)
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003fa6:	4b23      	ldr	r3, [pc, #140]	; (8004034 <HAL_GPIO_Init+0x304>)
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	43db      	mvns	r3, r3
 8003fb0:	69ba      	ldr	r2, [r7, #24]
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d003      	beq.n	8003fca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003fc2:	69ba      	ldr	r2, [r7, #24]
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003fca:	4a1a      	ldr	r2, [pc, #104]	; (8004034 <HAL_GPIO_Init+0x304>)
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003fd0:	4b18      	ldr	r3, [pc, #96]	; (8004034 <HAL_GPIO_Init+0x304>)
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	43db      	mvns	r3, r3
 8003fda:	69ba      	ldr	r2, [r7, #24]
 8003fdc:	4013      	ands	r3, r2
 8003fde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d003      	beq.n	8003ff4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003fec:	69ba      	ldr	r2, [r7, #24]
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ff4:	4a0f      	ldr	r2, [pc, #60]	; (8004034 <HAL_GPIO_Init+0x304>)
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	61fb      	str	r3, [r7, #28]
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	2b0f      	cmp	r3, #15
 8004004:	f67f aea2 	bls.w	8003d4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004008:	bf00      	nop
 800400a:	bf00      	nop
 800400c:	3724      	adds	r7, #36	; 0x24
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop
 8004018:	40023800 	.word	0x40023800
 800401c:	40013800 	.word	0x40013800
 8004020:	40020000 	.word	0x40020000
 8004024:	40020400 	.word	0x40020400
 8004028:	40020800 	.word	0x40020800
 800402c:	40020c00 	.word	0x40020c00
 8004030:	40021000 	.word	0x40021000
 8004034:	40013c00 	.word	0x40013c00

08004038 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004038:	b480      	push	{r7}
 800403a:	b085      	sub	sp, #20
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	460b      	mov	r3, r1
 8004042:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	691a      	ldr	r2, [r3, #16]
 8004048:	887b      	ldrh	r3, [r7, #2]
 800404a:	4013      	ands	r3, r2
 800404c:	2b00      	cmp	r3, #0
 800404e:	d002      	beq.n	8004056 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004050:	2301      	movs	r3, #1
 8004052:	73fb      	strb	r3, [r7, #15]
 8004054:	e001      	b.n	800405a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004056:	2300      	movs	r3, #0
 8004058:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800405a:	7bfb      	ldrb	r3, [r7, #15]
}
 800405c:	4618      	mov	r0, r3
 800405e:	3714      	adds	r7, #20
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	460b      	mov	r3, r1
 8004072:	807b      	strh	r3, [r7, #2]
 8004074:	4613      	mov	r3, r2
 8004076:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004078:	787b      	ldrb	r3, [r7, #1]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d003      	beq.n	8004086 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800407e:	887a      	ldrh	r2, [r7, #2]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004084:	e003      	b.n	800408e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004086:	887b      	ldrh	r3, [r7, #2]
 8004088:	041a      	lsls	r2, r3, #16
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	619a      	str	r2, [r3, #24]
}
 800408e:	bf00      	nop
 8004090:	370c      	adds	r7, #12
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
	...

0800409c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d101      	bne.n	80040ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e12b      	b.n	8004306 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d106      	bne.n	80040c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f7fe f9d6 	bl	8002474 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2224      	movs	r2, #36	; 0x24
 80040cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f022 0201 	bic.w	r2, r2, #1
 80040de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004100:	f001 fbc8 	bl	8005894 <HAL_RCC_GetPCLK1Freq>
 8004104:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	4a81      	ldr	r2, [pc, #516]	; (8004310 <HAL_I2C_Init+0x274>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d807      	bhi.n	8004120 <HAL_I2C_Init+0x84>
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	4a80      	ldr	r2, [pc, #512]	; (8004314 <HAL_I2C_Init+0x278>)
 8004114:	4293      	cmp	r3, r2
 8004116:	bf94      	ite	ls
 8004118:	2301      	movls	r3, #1
 800411a:	2300      	movhi	r3, #0
 800411c:	b2db      	uxtb	r3, r3
 800411e:	e006      	b.n	800412e <HAL_I2C_Init+0x92>
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	4a7d      	ldr	r2, [pc, #500]	; (8004318 <HAL_I2C_Init+0x27c>)
 8004124:	4293      	cmp	r3, r2
 8004126:	bf94      	ite	ls
 8004128:	2301      	movls	r3, #1
 800412a:	2300      	movhi	r3, #0
 800412c:	b2db      	uxtb	r3, r3
 800412e:	2b00      	cmp	r3, #0
 8004130:	d001      	beq.n	8004136 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e0e7      	b.n	8004306 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	4a78      	ldr	r2, [pc, #480]	; (800431c <HAL_I2C_Init+0x280>)
 800413a:	fba2 2303 	umull	r2, r3, r2, r3
 800413e:	0c9b      	lsrs	r3, r3, #18
 8004140:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68ba      	ldr	r2, [r7, #8]
 8004152:	430a      	orrs	r2, r1
 8004154:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	6a1b      	ldr	r3, [r3, #32]
 800415c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	4a6a      	ldr	r2, [pc, #424]	; (8004310 <HAL_I2C_Init+0x274>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d802      	bhi.n	8004170 <HAL_I2C_Init+0xd4>
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	3301      	adds	r3, #1
 800416e:	e009      	b.n	8004184 <HAL_I2C_Init+0xe8>
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004176:	fb02 f303 	mul.w	r3, r2, r3
 800417a:	4a69      	ldr	r2, [pc, #420]	; (8004320 <HAL_I2C_Init+0x284>)
 800417c:	fba2 2303 	umull	r2, r3, r2, r3
 8004180:	099b      	lsrs	r3, r3, #6
 8004182:	3301      	adds	r3, #1
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	6812      	ldr	r2, [r2, #0]
 8004188:	430b      	orrs	r3, r1
 800418a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	69db      	ldr	r3, [r3, #28]
 8004192:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004196:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	495c      	ldr	r1, [pc, #368]	; (8004310 <HAL_I2C_Init+0x274>)
 80041a0:	428b      	cmp	r3, r1
 80041a2:	d819      	bhi.n	80041d8 <HAL_I2C_Init+0x13c>
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	1e59      	subs	r1, r3, #1
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	005b      	lsls	r3, r3, #1
 80041ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80041b2:	1c59      	adds	r1, r3, #1
 80041b4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80041b8:	400b      	ands	r3, r1
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00a      	beq.n	80041d4 <HAL_I2C_Init+0x138>
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	1e59      	subs	r1, r3, #1
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	005b      	lsls	r3, r3, #1
 80041c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80041cc:	3301      	adds	r3, #1
 80041ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041d2:	e051      	b.n	8004278 <HAL_I2C_Init+0x1dc>
 80041d4:	2304      	movs	r3, #4
 80041d6:	e04f      	b.n	8004278 <HAL_I2C_Init+0x1dc>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d111      	bne.n	8004204 <HAL_I2C_Init+0x168>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	1e58      	subs	r0, r3, #1
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6859      	ldr	r1, [r3, #4]
 80041e8:	460b      	mov	r3, r1
 80041ea:	005b      	lsls	r3, r3, #1
 80041ec:	440b      	add	r3, r1
 80041ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80041f2:	3301      	adds	r3, #1
 80041f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	bf0c      	ite	eq
 80041fc:	2301      	moveq	r3, #1
 80041fe:	2300      	movne	r3, #0
 8004200:	b2db      	uxtb	r3, r3
 8004202:	e012      	b.n	800422a <HAL_I2C_Init+0x18e>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	1e58      	subs	r0, r3, #1
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6859      	ldr	r1, [r3, #4]
 800420c:	460b      	mov	r3, r1
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	440b      	add	r3, r1
 8004212:	0099      	lsls	r1, r3, #2
 8004214:	440b      	add	r3, r1
 8004216:	fbb0 f3f3 	udiv	r3, r0, r3
 800421a:	3301      	adds	r3, #1
 800421c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004220:	2b00      	cmp	r3, #0
 8004222:	bf0c      	ite	eq
 8004224:	2301      	moveq	r3, #1
 8004226:	2300      	movne	r3, #0
 8004228:	b2db      	uxtb	r3, r3
 800422a:	2b00      	cmp	r3, #0
 800422c:	d001      	beq.n	8004232 <HAL_I2C_Init+0x196>
 800422e:	2301      	movs	r3, #1
 8004230:	e022      	b.n	8004278 <HAL_I2C_Init+0x1dc>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d10e      	bne.n	8004258 <HAL_I2C_Init+0x1bc>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	1e58      	subs	r0, r3, #1
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6859      	ldr	r1, [r3, #4]
 8004242:	460b      	mov	r3, r1
 8004244:	005b      	lsls	r3, r3, #1
 8004246:	440b      	add	r3, r1
 8004248:	fbb0 f3f3 	udiv	r3, r0, r3
 800424c:	3301      	adds	r3, #1
 800424e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004252:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004256:	e00f      	b.n	8004278 <HAL_I2C_Init+0x1dc>
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	1e58      	subs	r0, r3, #1
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6859      	ldr	r1, [r3, #4]
 8004260:	460b      	mov	r3, r1
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	440b      	add	r3, r1
 8004266:	0099      	lsls	r1, r3, #2
 8004268:	440b      	add	r3, r1
 800426a:	fbb0 f3f3 	udiv	r3, r0, r3
 800426e:	3301      	adds	r3, #1
 8004270:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004274:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004278:	6879      	ldr	r1, [r7, #4]
 800427a:	6809      	ldr	r1, [r1, #0]
 800427c:	4313      	orrs	r3, r2
 800427e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	69da      	ldr	r2, [r3, #28]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a1b      	ldr	r3, [r3, #32]
 8004292:	431a      	orrs	r2, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	430a      	orrs	r2, r1
 800429a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80042a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	6911      	ldr	r1, [r2, #16]
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	68d2      	ldr	r2, [r2, #12]
 80042b2:	4311      	orrs	r1, r2
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	6812      	ldr	r2, [r2, #0]
 80042b8:	430b      	orrs	r3, r1
 80042ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	695a      	ldr	r2, [r3, #20]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	431a      	orrs	r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	430a      	orrs	r2, r1
 80042d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f042 0201 	orr.w	r2, r2, #1
 80042e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2220      	movs	r2, #32
 80042f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004304:	2300      	movs	r3, #0
}
 8004306:	4618      	mov	r0, r3
 8004308:	3710      	adds	r7, #16
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	000186a0 	.word	0x000186a0
 8004314:	001e847f 	.word	0x001e847f
 8004318:	003d08ff 	.word	0x003d08ff
 800431c:	431bde83 	.word	0x431bde83
 8004320:	10624dd3 	.word	0x10624dd3

08004324 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b088      	sub	sp, #32
 8004328:	af02      	add	r7, sp, #8
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	607a      	str	r2, [r7, #4]
 800432e:	461a      	mov	r2, r3
 8004330:	460b      	mov	r3, r1
 8004332:	817b      	strh	r3, [r7, #10]
 8004334:	4613      	mov	r3, r2
 8004336:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004338:	f7fe fbb4 	bl	8002aa4 <HAL_GetTick>
 800433c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b20      	cmp	r3, #32
 8004348:	f040 80e0 	bne.w	800450c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	9300      	str	r3, [sp, #0]
 8004350:	2319      	movs	r3, #25
 8004352:	2201      	movs	r2, #1
 8004354:	4970      	ldr	r1, [pc, #448]	; (8004518 <HAL_I2C_Master_Transmit+0x1f4>)
 8004356:	68f8      	ldr	r0, [r7, #12]
 8004358:	f000 fc72 	bl	8004c40 <I2C_WaitOnFlagUntilTimeout>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d001      	beq.n	8004366 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004362:	2302      	movs	r3, #2
 8004364:	e0d3      	b.n	800450e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800436c:	2b01      	cmp	r3, #1
 800436e:	d101      	bne.n	8004374 <HAL_I2C_Master_Transmit+0x50>
 8004370:	2302      	movs	r3, #2
 8004372:	e0cc      	b.n	800450e <HAL_I2C_Master_Transmit+0x1ea>
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0301 	and.w	r3, r3, #1
 8004386:	2b01      	cmp	r3, #1
 8004388:	d007      	beq.n	800439a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f042 0201 	orr.w	r2, r2, #1
 8004398:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043a8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2221      	movs	r2, #33	; 0x21
 80043ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2210      	movs	r2, #16
 80043b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2200      	movs	r2, #0
 80043be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	893a      	ldrh	r2, [r7, #8]
 80043ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d0:	b29a      	uxth	r2, r3
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	4a50      	ldr	r2, [pc, #320]	; (800451c <HAL_I2C_Master_Transmit+0x1f8>)
 80043da:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80043dc:	8979      	ldrh	r1, [r7, #10]
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	6a3a      	ldr	r2, [r7, #32]
 80043e2:	68f8      	ldr	r0, [r7, #12]
 80043e4:	f000 fac2 	bl	800496c <I2C_MasterRequestWrite>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d001      	beq.n	80043f2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e08d      	b.n	800450e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043f2:	2300      	movs	r3, #0
 80043f4:	613b      	str	r3, [r7, #16]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	695b      	ldr	r3, [r3, #20]
 80043fc:	613b      	str	r3, [r7, #16]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	613b      	str	r3, [r7, #16]
 8004406:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004408:	e066      	b.n	80044d8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800440a:	697a      	ldr	r2, [r7, #20]
 800440c:	6a39      	ldr	r1, [r7, #32]
 800440e:	68f8      	ldr	r0, [r7, #12]
 8004410:	f000 fcec 	bl	8004dec <I2C_WaitOnTXEFlagUntilTimeout>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00d      	beq.n	8004436 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441e:	2b04      	cmp	r3, #4
 8004420:	d107      	bne.n	8004432 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004430:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e06b      	b.n	800450e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443a:	781a      	ldrb	r2, [r3, #0]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004446:	1c5a      	adds	r2, r3, #1
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004450:	b29b      	uxth	r3, r3
 8004452:	3b01      	subs	r3, #1
 8004454:	b29a      	uxth	r2, r3
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800445e:	3b01      	subs	r3, #1
 8004460:	b29a      	uxth	r2, r3
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	695b      	ldr	r3, [r3, #20]
 800446c:	f003 0304 	and.w	r3, r3, #4
 8004470:	2b04      	cmp	r3, #4
 8004472:	d11b      	bne.n	80044ac <HAL_I2C_Master_Transmit+0x188>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004478:	2b00      	cmp	r3, #0
 800447a:	d017      	beq.n	80044ac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004480:	781a      	ldrb	r2, [r3, #0]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448c:	1c5a      	adds	r2, r3, #1
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004496:	b29b      	uxth	r3, r3
 8004498:	3b01      	subs	r3, #1
 800449a:	b29a      	uxth	r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044a4:	3b01      	subs	r3, #1
 80044a6:	b29a      	uxth	r2, r3
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044ac:	697a      	ldr	r2, [r7, #20]
 80044ae:	6a39      	ldr	r1, [r7, #32]
 80044b0:	68f8      	ldr	r0, [r7, #12]
 80044b2:	f000 fcdc 	bl	8004e6e <I2C_WaitOnBTFFlagUntilTimeout>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d00d      	beq.n	80044d8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c0:	2b04      	cmp	r3, #4
 80044c2:	d107      	bne.n	80044d4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044d2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e01a      	b.n	800450e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d194      	bne.n	800440a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2220      	movs	r2, #32
 80044f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2200      	movs	r2, #0
 80044fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004508:	2300      	movs	r3, #0
 800450a:	e000      	b.n	800450e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800450c:	2302      	movs	r3, #2
  }
}
 800450e:	4618      	mov	r0, r3
 8004510:	3718      	adds	r7, #24
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	00100002 	.word	0x00100002
 800451c:	ffff0000 	.word	0xffff0000

08004520 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b08c      	sub	sp, #48	; 0x30
 8004524:	af02      	add	r7, sp, #8
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	4608      	mov	r0, r1
 800452a:	4611      	mov	r1, r2
 800452c:	461a      	mov	r2, r3
 800452e:	4603      	mov	r3, r0
 8004530:	817b      	strh	r3, [r7, #10]
 8004532:	460b      	mov	r3, r1
 8004534:	813b      	strh	r3, [r7, #8]
 8004536:	4613      	mov	r3, r2
 8004538:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800453a:	f7fe fab3 	bl	8002aa4 <HAL_GetTick>
 800453e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004546:	b2db      	uxtb	r3, r3
 8004548:	2b20      	cmp	r3, #32
 800454a:	f040 8208 	bne.w	800495e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800454e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004550:	9300      	str	r3, [sp, #0]
 8004552:	2319      	movs	r3, #25
 8004554:	2201      	movs	r2, #1
 8004556:	497b      	ldr	r1, [pc, #492]	; (8004744 <HAL_I2C_Mem_Read+0x224>)
 8004558:	68f8      	ldr	r0, [r7, #12]
 800455a:	f000 fb71 	bl	8004c40 <I2C_WaitOnFlagUntilTimeout>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d001      	beq.n	8004568 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004564:	2302      	movs	r3, #2
 8004566:	e1fb      	b.n	8004960 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800456e:	2b01      	cmp	r3, #1
 8004570:	d101      	bne.n	8004576 <HAL_I2C_Mem_Read+0x56>
 8004572:	2302      	movs	r3, #2
 8004574:	e1f4      	b.n	8004960 <HAL_I2C_Mem_Read+0x440>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2201      	movs	r2, #1
 800457a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0301 	and.w	r3, r3, #1
 8004588:	2b01      	cmp	r3, #1
 800458a:	d007      	beq.n	800459c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f042 0201 	orr.w	r2, r2, #1
 800459a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2222      	movs	r2, #34	; 0x22
 80045b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2240      	movs	r2, #64	; 0x40
 80045b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80045cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045d2:	b29a      	uxth	r2, r3
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	4a5b      	ldr	r2, [pc, #364]	; (8004748 <HAL_I2C_Mem_Read+0x228>)
 80045dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80045de:	88f8      	ldrh	r0, [r7, #6]
 80045e0:	893a      	ldrh	r2, [r7, #8]
 80045e2:	8979      	ldrh	r1, [r7, #10]
 80045e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e6:	9301      	str	r3, [sp, #4]
 80045e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ea:	9300      	str	r3, [sp, #0]
 80045ec:	4603      	mov	r3, r0
 80045ee:	68f8      	ldr	r0, [r7, #12]
 80045f0:	f000 fa3e 	bl	8004a70 <I2C_RequestMemoryRead>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d001      	beq.n	80045fe <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e1b0      	b.n	8004960 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004602:	2b00      	cmp	r3, #0
 8004604:	d113      	bne.n	800462e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004606:	2300      	movs	r3, #0
 8004608:	623b      	str	r3, [r7, #32]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	695b      	ldr	r3, [r3, #20]
 8004610:	623b      	str	r3, [r7, #32]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	699b      	ldr	r3, [r3, #24]
 8004618:	623b      	str	r3, [r7, #32]
 800461a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800462a:	601a      	str	r2, [r3, #0]
 800462c:	e184      	b.n	8004938 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004632:	2b01      	cmp	r3, #1
 8004634:	d11b      	bne.n	800466e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004644:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004646:	2300      	movs	r3, #0
 8004648:	61fb      	str	r3, [r7, #28]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	695b      	ldr	r3, [r3, #20]
 8004650:	61fb      	str	r3, [r7, #28]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	699b      	ldr	r3, [r3, #24]
 8004658:	61fb      	str	r3, [r7, #28]
 800465a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800466a:	601a      	str	r2, [r3, #0]
 800466c:	e164      	b.n	8004938 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004672:	2b02      	cmp	r3, #2
 8004674:	d11b      	bne.n	80046ae <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004684:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004694:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004696:	2300      	movs	r3, #0
 8004698:	61bb      	str	r3, [r7, #24]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	695b      	ldr	r3, [r3, #20]
 80046a0:	61bb      	str	r3, [r7, #24]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	61bb      	str	r3, [r7, #24]
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	e144      	b.n	8004938 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046ae:	2300      	movs	r3, #0
 80046b0:	617b      	str	r3, [r7, #20]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	695b      	ldr	r3, [r3, #20]
 80046b8:	617b      	str	r3, [r7, #20]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	699b      	ldr	r3, [r3, #24]
 80046c0:	617b      	str	r3, [r7, #20]
 80046c2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80046c4:	e138      	b.n	8004938 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ca:	2b03      	cmp	r3, #3
 80046cc:	f200 80f1 	bhi.w	80048b2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d123      	bne.n	8004720 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80046dc:	68f8      	ldr	r0, [r7, #12]
 80046de:	f000 fc07 	bl	8004ef0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d001      	beq.n	80046ec <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e139      	b.n	8004960 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	691a      	ldr	r2, [r3, #16]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f6:	b2d2      	uxtb	r2, r2
 80046f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fe:	1c5a      	adds	r2, r3, #1
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004708:	3b01      	subs	r3, #1
 800470a:	b29a      	uxth	r2, r3
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004714:	b29b      	uxth	r3, r3
 8004716:	3b01      	subs	r3, #1
 8004718:	b29a      	uxth	r2, r3
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800471e:	e10b      	b.n	8004938 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004724:	2b02      	cmp	r3, #2
 8004726:	d14e      	bne.n	80047c6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472a:	9300      	str	r3, [sp, #0]
 800472c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800472e:	2200      	movs	r2, #0
 8004730:	4906      	ldr	r1, [pc, #24]	; (800474c <HAL_I2C_Mem_Read+0x22c>)
 8004732:	68f8      	ldr	r0, [r7, #12]
 8004734:	f000 fa84 	bl	8004c40 <I2C_WaitOnFlagUntilTimeout>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d008      	beq.n	8004750 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e10e      	b.n	8004960 <HAL_I2C_Mem_Read+0x440>
 8004742:	bf00      	nop
 8004744:	00100002 	.word	0x00100002
 8004748:	ffff0000 	.word	0xffff0000
 800474c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800475e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	691a      	ldr	r2, [r3, #16]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476a:	b2d2      	uxtb	r2, r2
 800476c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004772:	1c5a      	adds	r2, r3, #1
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800477c:	3b01      	subs	r3, #1
 800477e:	b29a      	uxth	r2, r3
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004788:	b29b      	uxth	r3, r3
 800478a:	3b01      	subs	r3, #1
 800478c:	b29a      	uxth	r2, r3
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	691a      	ldr	r2, [r3, #16]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479c:	b2d2      	uxtb	r2, r2
 800479e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a4:	1c5a      	adds	r2, r3, #1
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047ae:	3b01      	subs	r3, #1
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	3b01      	subs	r3, #1
 80047be:	b29a      	uxth	r2, r3
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80047c4:	e0b8      	b.n	8004938 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80047c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c8:	9300      	str	r3, [sp, #0]
 80047ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047cc:	2200      	movs	r2, #0
 80047ce:	4966      	ldr	r1, [pc, #408]	; (8004968 <HAL_I2C_Mem_Read+0x448>)
 80047d0:	68f8      	ldr	r0, [r7, #12]
 80047d2:	f000 fa35 	bl	8004c40 <I2C_WaitOnFlagUntilTimeout>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d001      	beq.n	80047e0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e0bf      	b.n	8004960 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	691a      	ldr	r2, [r3, #16]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fa:	b2d2      	uxtb	r2, r2
 80047fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004802:	1c5a      	adds	r2, r3, #1
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800480c:	3b01      	subs	r3, #1
 800480e:	b29a      	uxth	r2, r3
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004818:	b29b      	uxth	r3, r3
 800481a:	3b01      	subs	r3, #1
 800481c:	b29a      	uxth	r2, r3
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004824:	9300      	str	r3, [sp, #0]
 8004826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004828:	2200      	movs	r2, #0
 800482a:	494f      	ldr	r1, [pc, #316]	; (8004968 <HAL_I2C_Mem_Read+0x448>)
 800482c:	68f8      	ldr	r0, [r7, #12]
 800482e:	f000 fa07 	bl	8004c40 <I2C_WaitOnFlagUntilTimeout>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d001      	beq.n	800483c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e091      	b.n	8004960 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800484a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	691a      	ldr	r2, [r3, #16]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004856:	b2d2      	uxtb	r2, r2
 8004858:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485e:	1c5a      	adds	r2, r3, #1
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004868:	3b01      	subs	r3, #1
 800486a:	b29a      	uxth	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004874:	b29b      	uxth	r3, r3
 8004876:	3b01      	subs	r3, #1
 8004878:	b29a      	uxth	r2, r3
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	691a      	ldr	r2, [r3, #16]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004888:	b2d2      	uxtb	r2, r2
 800488a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004890:	1c5a      	adds	r2, r3, #1
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800489a:	3b01      	subs	r3, #1
 800489c:	b29a      	uxth	r2, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	3b01      	subs	r3, #1
 80048aa:	b29a      	uxth	r2, r3
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80048b0:	e042      	b.n	8004938 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80048b6:	68f8      	ldr	r0, [r7, #12]
 80048b8:	f000 fb1a 	bl	8004ef0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d001      	beq.n	80048c6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e04c      	b.n	8004960 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	691a      	ldr	r2, [r3, #16]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d0:	b2d2      	uxtb	r2, r2
 80048d2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d8:	1c5a      	adds	r2, r3, #1
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048e2:	3b01      	subs	r3, #1
 80048e4:	b29a      	uxth	r2, r3
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	3b01      	subs	r3, #1
 80048f2:	b29a      	uxth	r2, r3
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	695b      	ldr	r3, [r3, #20]
 80048fe:	f003 0304 	and.w	r3, r3, #4
 8004902:	2b04      	cmp	r3, #4
 8004904:	d118      	bne.n	8004938 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	691a      	ldr	r2, [r3, #16]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004910:	b2d2      	uxtb	r2, r2
 8004912:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004918:	1c5a      	adds	r2, r3, #1
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004922:	3b01      	subs	r3, #1
 8004924:	b29a      	uxth	r2, r3
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800492e:	b29b      	uxth	r3, r3
 8004930:	3b01      	subs	r3, #1
 8004932:	b29a      	uxth	r2, r3
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800493c:	2b00      	cmp	r3, #0
 800493e:	f47f aec2 	bne.w	80046c6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2220      	movs	r2, #32
 8004946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800495a:	2300      	movs	r3, #0
 800495c:	e000      	b.n	8004960 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800495e:	2302      	movs	r3, #2
  }
}
 8004960:	4618      	mov	r0, r3
 8004962:	3728      	adds	r7, #40	; 0x28
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}
 8004968:	00010004 	.word	0x00010004

0800496c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b088      	sub	sp, #32
 8004970:	af02      	add	r7, sp, #8
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	607a      	str	r2, [r7, #4]
 8004976:	603b      	str	r3, [r7, #0]
 8004978:	460b      	mov	r3, r1
 800497a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004980:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	2b08      	cmp	r3, #8
 8004986:	d006      	beq.n	8004996 <I2C_MasterRequestWrite+0x2a>
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	2b01      	cmp	r3, #1
 800498c:	d003      	beq.n	8004996 <I2C_MasterRequestWrite+0x2a>
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004994:	d108      	bne.n	80049a8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049a4:	601a      	str	r2, [r3, #0]
 80049a6:	e00b      	b.n	80049c0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ac:	2b12      	cmp	r3, #18
 80049ae:	d107      	bne.n	80049c0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	9300      	str	r3, [sp, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80049cc:	68f8      	ldr	r0, [r7, #12]
 80049ce:	f000 f937 	bl	8004c40 <I2C_WaitOnFlagUntilTimeout>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d00d      	beq.n	80049f4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049e6:	d103      	bne.n	80049f0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80049f0:	2303      	movs	r3, #3
 80049f2:	e035      	b.n	8004a60 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049fc:	d108      	bne.n	8004a10 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80049fe:	897b      	ldrh	r3, [r7, #10]
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	461a      	mov	r2, r3
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a0c:	611a      	str	r2, [r3, #16]
 8004a0e:	e01b      	b.n	8004a48 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004a10:	897b      	ldrh	r3, [r7, #10]
 8004a12:	11db      	asrs	r3, r3, #7
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	f003 0306 	and.w	r3, r3, #6
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	f063 030f 	orn	r3, r3, #15
 8004a20:	b2da      	uxtb	r2, r3
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	490e      	ldr	r1, [pc, #56]	; (8004a68 <I2C_MasterRequestWrite+0xfc>)
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	f000 f95d 	bl	8004cee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d001      	beq.n	8004a3e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e010      	b.n	8004a60 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004a3e:	897b      	ldrh	r3, [r7, #10]
 8004a40:	b2da      	uxtb	r2, r3
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	4907      	ldr	r1, [pc, #28]	; (8004a6c <I2C_MasterRequestWrite+0x100>)
 8004a4e:	68f8      	ldr	r0, [r7, #12]
 8004a50:	f000 f94d 	bl	8004cee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d001      	beq.n	8004a5e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e000      	b.n	8004a60 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3718      	adds	r7, #24
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	00010008 	.word	0x00010008
 8004a6c:	00010002 	.word	0x00010002

08004a70 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b088      	sub	sp, #32
 8004a74:	af02      	add	r7, sp, #8
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	4608      	mov	r0, r1
 8004a7a:	4611      	mov	r1, r2
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	4603      	mov	r3, r0
 8004a80:	817b      	strh	r3, [r7, #10]
 8004a82:	460b      	mov	r3, r1
 8004a84:	813b      	strh	r3, [r7, #8]
 8004a86:	4613      	mov	r3, r2
 8004a88:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a98:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004aa8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aac:	9300      	str	r3, [sp, #0]
 8004aae:	6a3b      	ldr	r3, [r7, #32]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ab6:	68f8      	ldr	r0, [r7, #12]
 8004ab8:	f000 f8c2 	bl	8004c40 <I2C_WaitOnFlagUntilTimeout>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d00d      	beq.n	8004ade <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004acc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ad0:	d103      	bne.n	8004ada <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ad8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e0aa      	b.n	8004c34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004ade:	897b      	ldrh	r3, [r7, #10]
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004aec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af0:	6a3a      	ldr	r2, [r7, #32]
 8004af2:	4952      	ldr	r1, [pc, #328]	; (8004c3c <I2C_RequestMemoryRead+0x1cc>)
 8004af4:	68f8      	ldr	r0, [r7, #12]
 8004af6:	f000 f8fa 	bl	8004cee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d001      	beq.n	8004b04 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e097      	b.n	8004c34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b04:	2300      	movs	r3, #0
 8004b06:	617b      	str	r3, [r7, #20]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	695b      	ldr	r3, [r3, #20]
 8004b0e:	617b      	str	r3, [r7, #20]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	617b      	str	r3, [r7, #20]
 8004b18:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b1c:	6a39      	ldr	r1, [r7, #32]
 8004b1e:	68f8      	ldr	r0, [r7, #12]
 8004b20:	f000 f964 	bl	8004dec <I2C_WaitOnTXEFlagUntilTimeout>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00d      	beq.n	8004b46 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2e:	2b04      	cmp	r3, #4
 8004b30:	d107      	bne.n	8004b42 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b40:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e076      	b.n	8004c34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b46:	88fb      	ldrh	r3, [r7, #6]
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d105      	bne.n	8004b58 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b4c:	893b      	ldrh	r3, [r7, #8]
 8004b4e:	b2da      	uxtb	r2, r3
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	611a      	str	r2, [r3, #16]
 8004b56:	e021      	b.n	8004b9c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004b58:	893b      	ldrh	r3, [r7, #8]
 8004b5a:	0a1b      	lsrs	r3, r3, #8
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	b2da      	uxtb	r2, r3
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b68:	6a39      	ldr	r1, [r7, #32]
 8004b6a:	68f8      	ldr	r0, [r7, #12]
 8004b6c:	f000 f93e 	bl	8004dec <I2C_WaitOnTXEFlagUntilTimeout>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00d      	beq.n	8004b92 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7a:	2b04      	cmp	r3, #4
 8004b7c:	d107      	bne.n	8004b8e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b8c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e050      	b.n	8004c34 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b92:	893b      	ldrh	r3, [r7, #8]
 8004b94:	b2da      	uxtb	r2, r3
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b9e:	6a39      	ldr	r1, [r7, #32]
 8004ba0:	68f8      	ldr	r0, [r7, #12]
 8004ba2:	f000 f923 	bl	8004dec <I2C_WaitOnTXEFlagUntilTimeout>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d00d      	beq.n	8004bc8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb0:	2b04      	cmp	r3, #4
 8004bb2:	d107      	bne.n	8004bc4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bc2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e035      	b.n	8004c34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bd6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bda:	9300      	str	r3, [sp, #0]
 8004bdc:	6a3b      	ldr	r3, [r7, #32]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004be4:	68f8      	ldr	r0, [r7, #12]
 8004be6:	f000 f82b 	bl	8004c40 <I2C_WaitOnFlagUntilTimeout>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d00d      	beq.n	8004c0c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bfe:	d103      	bne.n	8004c08 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c06:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e013      	b.n	8004c34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004c0c:	897b      	ldrh	r3, [r7, #10]
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	f043 0301 	orr.w	r3, r3, #1
 8004c14:	b2da      	uxtb	r2, r3
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1e:	6a3a      	ldr	r2, [r7, #32]
 8004c20:	4906      	ldr	r1, [pc, #24]	; (8004c3c <I2C_RequestMemoryRead+0x1cc>)
 8004c22:	68f8      	ldr	r0, [r7, #12]
 8004c24:	f000 f863 	bl	8004cee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d001      	beq.n	8004c32 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e000      	b.n	8004c34 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004c32:	2300      	movs	r3, #0
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3718      	adds	r7, #24
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	00010002 	.word	0x00010002

08004c40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	603b      	str	r3, [r7, #0]
 8004c4c:	4613      	mov	r3, r2
 8004c4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c50:	e025      	b.n	8004c9e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c58:	d021      	beq.n	8004c9e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c5a:	f7fd ff23 	bl	8002aa4 <HAL_GetTick>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	683a      	ldr	r2, [r7, #0]
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d302      	bcc.n	8004c70 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d116      	bne.n	8004c9e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2200      	movs	r2, #0
 8004c74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2220      	movs	r2, #32
 8004c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8a:	f043 0220 	orr.w	r2, r3, #32
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e023      	b.n	8004ce6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	0c1b      	lsrs	r3, r3, #16
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d10d      	bne.n	8004cc4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	695b      	ldr	r3, [r3, #20]
 8004cae:	43da      	mvns	r2, r3
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	bf0c      	ite	eq
 8004cba:	2301      	moveq	r3, #1
 8004cbc:	2300      	movne	r3, #0
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	e00c      	b.n	8004cde <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	699b      	ldr	r3, [r3, #24]
 8004cca:	43da      	mvns	r2, r3
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	4013      	ands	r3, r2
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	bf0c      	ite	eq
 8004cd6:	2301      	moveq	r3, #1
 8004cd8:	2300      	movne	r3, #0
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	461a      	mov	r2, r3
 8004cde:	79fb      	ldrb	r3, [r7, #7]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d0b6      	beq.n	8004c52 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3710      	adds	r7, #16
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}

08004cee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004cee:	b580      	push	{r7, lr}
 8004cf0:	b084      	sub	sp, #16
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	60f8      	str	r0, [r7, #12]
 8004cf6:	60b9      	str	r1, [r7, #8]
 8004cf8:	607a      	str	r2, [r7, #4]
 8004cfa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004cfc:	e051      	b.n	8004da2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	695b      	ldr	r3, [r3, #20]
 8004d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d0c:	d123      	bne.n	8004d56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d1c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d26:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2220      	movs	r2, #32
 8004d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d42:	f043 0204 	orr.w	r2, r3, #4
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e046      	b.n	8004de4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d5c:	d021      	beq.n	8004da2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d5e:	f7fd fea1 	bl	8002aa4 <HAL_GetTick>
 8004d62:	4602      	mov	r2, r0
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d302      	bcc.n	8004d74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d116      	bne.n	8004da2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2200      	movs	r2, #0
 8004d78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2220      	movs	r2, #32
 8004d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8e:	f043 0220 	orr.w	r2, r3, #32
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e020      	b.n	8004de4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	0c1b      	lsrs	r3, r3, #16
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d10c      	bne.n	8004dc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	695b      	ldr	r3, [r3, #20]
 8004db2:	43da      	mvns	r2, r3
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	4013      	ands	r3, r2
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	bf14      	ite	ne
 8004dbe:	2301      	movne	r3, #1
 8004dc0:	2300      	moveq	r3, #0
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	e00b      	b.n	8004dde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	699b      	ldr	r3, [r3, #24]
 8004dcc:	43da      	mvns	r2, r3
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	bf14      	ite	ne
 8004dd8:	2301      	movne	r3, #1
 8004dda:	2300      	moveq	r3, #0
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d18d      	bne.n	8004cfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004de2:	2300      	movs	r3, #0
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3710      	adds	r7, #16
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}

08004dec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004df8:	e02d      	b.n	8004e56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004dfa:	68f8      	ldr	r0, [r7, #12]
 8004dfc:	f000 f8ce 	bl	8004f9c <I2C_IsAcknowledgeFailed>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d001      	beq.n	8004e0a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e02d      	b.n	8004e66 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e10:	d021      	beq.n	8004e56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e12:	f7fd fe47 	bl	8002aa4 <HAL_GetTick>
 8004e16:	4602      	mov	r2, r0
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	68ba      	ldr	r2, [r7, #8]
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d302      	bcc.n	8004e28 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d116      	bne.n	8004e56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2220      	movs	r2, #32
 8004e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e42:	f043 0220 	orr.w	r2, r3, #32
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e007      	b.n	8004e66 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	695b      	ldr	r3, [r3, #20]
 8004e5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e60:	2b80      	cmp	r3, #128	; 0x80
 8004e62:	d1ca      	bne.n	8004dfa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3710      	adds	r7, #16
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}

08004e6e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e6e:	b580      	push	{r7, lr}
 8004e70:	b084      	sub	sp, #16
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	60f8      	str	r0, [r7, #12]
 8004e76:	60b9      	str	r1, [r7, #8]
 8004e78:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e7a:	e02d      	b.n	8004ed8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e7c:	68f8      	ldr	r0, [r7, #12]
 8004e7e:	f000 f88d 	bl	8004f9c <I2C_IsAcknowledgeFailed>
 8004e82:	4603      	mov	r3, r0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d001      	beq.n	8004e8c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e02d      	b.n	8004ee8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e92:	d021      	beq.n	8004ed8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e94:	f7fd fe06 	bl	8002aa4 <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	68ba      	ldr	r2, [r7, #8]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d302      	bcc.n	8004eaa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d116      	bne.n	8004ed8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2200      	movs	r2, #0
 8004eae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2220      	movs	r2, #32
 8004eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec4:	f043 0220 	orr.w	r2, r3, #32
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e007      	b.n	8004ee8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	695b      	ldr	r3, [r3, #20]
 8004ede:	f003 0304 	and.w	r3, r3, #4
 8004ee2:	2b04      	cmp	r3, #4
 8004ee4:	d1ca      	bne.n	8004e7c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ee6:	2300      	movs	r3, #0
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3710      	adds	r7, #16
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	60b9      	str	r1, [r7, #8]
 8004efa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004efc:	e042      	b.n	8004f84 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	695b      	ldr	r3, [r3, #20]
 8004f04:	f003 0310 	and.w	r3, r3, #16
 8004f08:	2b10      	cmp	r3, #16
 8004f0a:	d119      	bne.n	8004f40 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f06f 0210 	mvn.w	r2, #16
 8004f14:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2220      	movs	r2, #32
 8004f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e029      	b.n	8004f94 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f40:	f7fd fdb0 	bl	8002aa4 <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	68ba      	ldr	r2, [r7, #8]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d302      	bcc.n	8004f56 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d116      	bne.n	8004f84 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2220      	movs	r2, #32
 8004f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f70:	f043 0220 	orr.w	r2, r3, #32
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e007      	b.n	8004f94 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f8e:	2b40      	cmp	r3, #64	; 0x40
 8004f90:	d1b5      	bne.n	8004efe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004f92:	2300      	movs	r3, #0
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3710      	adds	r7, #16
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	695b      	ldr	r3, [r3, #20]
 8004faa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fb2:	d11b      	bne.n	8004fec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004fbc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2220      	movs	r2, #32
 8004fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd8:	f043 0204 	orr.w	r2, r3, #4
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e000      	b.n	8004fee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	370c      	adds	r7, #12
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
	...

08004ffc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b086      	sub	sp, #24
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d101      	bne.n	800500e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e264      	b.n	80054d8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 0301 	and.w	r3, r3, #1
 8005016:	2b00      	cmp	r3, #0
 8005018:	d075      	beq.n	8005106 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800501a:	4ba3      	ldr	r3, [pc, #652]	; (80052a8 <HAL_RCC_OscConfig+0x2ac>)
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	f003 030c 	and.w	r3, r3, #12
 8005022:	2b04      	cmp	r3, #4
 8005024:	d00c      	beq.n	8005040 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005026:	4ba0      	ldr	r3, [pc, #640]	; (80052a8 <HAL_RCC_OscConfig+0x2ac>)
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800502e:	2b08      	cmp	r3, #8
 8005030:	d112      	bne.n	8005058 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005032:	4b9d      	ldr	r3, [pc, #628]	; (80052a8 <HAL_RCC_OscConfig+0x2ac>)
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800503a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800503e:	d10b      	bne.n	8005058 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005040:	4b99      	ldr	r3, [pc, #612]	; (80052a8 <HAL_RCC_OscConfig+0x2ac>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005048:	2b00      	cmp	r3, #0
 800504a:	d05b      	beq.n	8005104 <HAL_RCC_OscConfig+0x108>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d157      	bne.n	8005104 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e23f      	b.n	80054d8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005060:	d106      	bne.n	8005070 <HAL_RCC_OscConfig+0x74>
 8005062:	4b91      	ldr	r3, [pc, #580]	; (80052a8 <HAL_RCC_OscConfig+0x2ac>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a90      	ldr	r2, [pc, #576]	; (80052a8 <HAL_RCC_OscConfig+0x2ac>)
 8005068:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800506c:	6013      	str	r3, [r2, #0]
 800506e:	e01d      	b.n	80050ac <HAL_RCC_OscConfig+0xb0>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005078:	d10c      	bne.n	8005094 <HAL_RCC_OscConfig+0x98>
 800507a:	4b8b      	ldr	r3, [pc, #556]	; (80052a8 <HAL_RCC_OscConfig+0x2ac>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a8a      	ldr	r2, [pc, #552]	; (80052a8 <HAL_RCC_OscConfig+0x2ac>)
 8005080:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005084:	6013      	str	r3, [r2, #0]
 8005086:	4b88      	ldr	r3, [pc, #544]	; (80052a8 <HAL_RCC_OscConfig+0x2ac>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a87      	ldr	r2, [pc, #540]	; (80052a8 <HAL_RCC_OscConfig+0x2ac>)
 800508c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005090:	6013      	str	r3, [r2, #0]
 8005092:	e00b      	b.n	80050ac <HAL_RCC_OscConfig+0xb0>
 8005094:	4b84      	ldr	r3, [pc, #528]	; (80052a8 <HAL_RCC_OscConfig+0x2ac>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a83      	ldr	r2, [pc, #524]	; (80052a8 <HAL_RCC_OscConfig+0x2ac>)
 800509a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800509e:	6013      	str	r3, [r2, #0]
 80050a0:	4b81      	ldr	r3, [pc, #516]	; (80052a8 <HAL_RCC_OscConfig+0x2ac>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a80      	ldr	r2, [pc, #512]	; (80052a8 <HAL_RCC_OscConfig+0x2ac>)
 80050a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d013      	beq.n	80050dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050b4:	f7fd fcf6 	bl	8002aa4 <HAL_GetTick>
 80050b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ba:	e008      	b.n	80050ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050bc:	f7fd fcf2 	bl	8002aa4 <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	2b64      	cmp	r3, #100	; 0x64
 80050c8:	d901      	bls.n	80050ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e204      	b.n	80054d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ce:	4b76      	ldr	r3, [pc, #472]	; (80052a8 <HAL_RCC_OscConfig+0x2ac>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d0f0      	beq.n	80050bc <HAL_RCC_OscConfig+0xc0>
 80050da:	e014      	b.n	8005106 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050dc:	f7fd fce2 	bl	8002aa4 <HAL_GetTick>
 80050e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050e2:	e008      	b.n	80050f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050e4:	f7fd fcde 	bl	8002aa4 <HAL_GetTick>
 80050e8:	4602      	mov	r2, r0
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	2b64      	cmp	r3, #100	; 0x64
 80050f0:	d901      	bls.n	80050f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e1f0      	b.n	80054d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050f6:	4b6c      	ldr	r3, [pc, #432]	; (80052a8 <HAL_RCC_OscConfig+0x2ac>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d1f0      	bne.n	80050e4 <HAL_RCC_OscConfig+0xe8>
 8005102:	e000      	b.n	8005106 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005104:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0302 	and.w	r3, r3, #2
 800510e:	2b00      	cmp	r3, #0
 8005110:	d063      	beq.n	80051da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005112:	4b65      	ldr	r3, [pc, #404]	; (80052a8 <HAL_RCC_OscConfig+0x2ac>)
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	f003 030c 	and.w	r3, r3, #12
 800511a:	2b00      	cmp	r3, #0
 800511c:	d00b      	beq.n	8005136 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800511e:	4b62      	ldr	r3, [pc, #392]	; (80052a8 <HAL_RCC_OscConfig+0x2ac>)
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005126:	2b08      	cmp	r3, #8
 8005128:	d11c      	bne.n	8005164 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800512a:	4b5f      	ldr	r3, [pc, #380]	; (80052a8 <HAL_RCC_OscConfig+0x2ac>)
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005132:	2b00      	cmp	r3, #0
 8005134:	d116      	bne.n	8005164 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005136:	4b5c      	ldr	r3, [pc, #368]	; (80052a8 <HAL_RCC_OscConfig+0x2ac>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 0302 	and.w	r3, r3, #2
 800513e:	2b00      	cmp	r3, #0
 8005140:	d005      	beq.n	800514e <HAL_RCC_OscConfig+0x152>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	2b01      	cmp	r3, #1
 8005148:	d001      	beq.n	800514e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e1c4      	b.n	80054d8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800514e:	4b56      	ldr	r3, [pc, #344]	; (80052a8 <HAL_RCC_OscConfig+0x2ac>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	00db      	lsls	r3, r3, #3
 800515c:	4952      	ldr	r1, [pc, #328]	; (80052a8 <HAL_RCC_OscConfig+0x2ac>)
 800515e:	4313      	orrs	r3, r2
 8005160:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005162:	e03a      	b.n	80051da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d020      	beq.n	80051ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800516c:	4b4f      	ldr	r3, [pc, #316]	; (80052ac <HAL_RCC_OscConfig+0x2b0>)
 800516e:	2201      	movs	r2, #1
 8005170:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005172:	f7fd fc97 	bl	8002aa4 <HAL_GetTick>
 8005176:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005178:	e008      	b.n	800518c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800517a:	f7fd fc93 	bl	8002aa4 <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	2b02      	cmp	r3, #2
 8005186:	d901      	bls.n	800518c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e1a5      	b.n	80054d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800518c:	4b46      	ldr	r3, [pc, #280]	; (80052a8 <HAL_RCC_OscConfig+0x2ac>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 0302 	and.w	r3, r3, #2
 8005194:	2b00      	cmp	r3, #0
 8005196:	d0f0      	beq.n	800517a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005198:	4b43      	ldr	r3, [pc, #268]	; (80052a8 <HAL_RCC_OscConfig+0x2ac>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	691b      	ldr	r3, [r3, #16]
 80051a4:	00db      	lsls	r3, r3, #3
 80051a6:	4940      	ldr	r1, [pc, #256]	; (80052a8 <HAL_RCC_OscConfig+0x2ac>)
 80051a8:	4313      	orrs	r3, r2
 80051aa:	600b      	str	r3, [r1, #0]
 80051ac:	e015      	b.n	80051da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051ae:	4b3f      	ldr	r3, [pc, #252]	; (80052ac <HAL_RCC_OscConfig+0x2b0>)
 80051b0:	2200      	movs	r2, #0
 80051b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051b4:	f7fd fc76 	bl	8002aa4 <HAL_GetTick>
 80051b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051ba:	e008      	b.n	80051ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051bc:	f7fd fc72 	bl	8002aa4 <HAL_GetTick>
 80051c0:	4602      	mov	r2, r0
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	2b02      	cmp	r3, #2
 80051c8:	d901      	bls.n	80051ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80051ca:	2303      	movs	r3, #3
 80051cc:	e184      	b.n	80054d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051ce:	4b36      	ldr	r3, [pc, #216]	; (80052a8 <HAL_RCC_OscConfig+0x2ac>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0302 	and.w	r3, r3, #2
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d1f0      	bne.n	80051bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 0308 	and.w	r3, r3, #8
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d030      	beq.n	8005248 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d016      	beq.n	800521c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051ee:	4b30      	ldr	r3, [pc, #192]	; (80052b0 <HAL_RCC_OscConfig+0x2b4>)
 80051f0:	2201      	movs	r2, #1
 80051f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051f4:	f7fd fc56 	bl	8002aa4 <HAL_GetTick>
 80051f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051fa:	e008      	b.n	800520e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051fc:	f7fd fc52 	bl	8002aa4 <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	2b02      	cmp	r3, #2
 8005208:	d901      	bls.n	800520e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e164      	b.n	80054d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800520e:	4b26      	ldr	r3, [pc, #152]	; (80052a8 <HAL_RCC_OscConfig+0x2ac>)
 8005210:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005212:	f003 0302 	and.w	r3, r3, #2
 8005216:	2b00      	cmp	r3, #0
 8005218:	d0f0      	beq.n	80051fc <HAL_RCC_OscConfig+0x200>
 800521a:	e015      	b.n	8005248 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800521c:	4b24      	ldr	r3, [pc, #144]	; (80052b0 <HAL_RCC_OscConfig+0x2b4>)
 800521e:	2200      	movs	r2, #0
 8005220:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005222:	f7fd fc3f 	bl	8002aa4 <HAL_GetTick>
 8005226:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005228:	e008      	b.n	800523c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800522a:	f7fd fc3b 	bl	8002aa4 <HAL_GetTick>
 800522e:	4602      	mov	r2, r0
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	1ad3      	subs	r3, r2, r3
 8005234:	2b02      	cmp	r3, #2
 8005236:	d901      	bls.n	800523c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005238:	2303      	movs	r3, #3
 800523a:	e14d      	b.n	80054d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800523c:	4b1a      	ldr	r3, [pc, #104]	; (80052a8 <HAL_RCC_OscConfig+0x2ac>)
 800523e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005240:	f003 0302 	and.w	r3, r3, #2
 8005244:	2b00      	cmp	r3, #0
 8005246:	d1f0      	bne.n	800522a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0304 	and.w	r3, r3, #4
 8005250:	2b00      	cmp	r3, #0
 8005252:	f000 80a0 	beq.w	8005396 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005256:	2300      	movs	r3, #0
 8005258:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800525a:	4b13      	ldr	r3, [pc, #76]	; (80052a8 <HAL_RCC_OscConfig+0x2ac>)
 800525c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d10f      	bne.n	8005286 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005266:	2300      	movs	r3, #0
 8005268:	60bb      	str	r3, [r7, #8]
 800526a:	4b0f      	ldr	r3, [pc, #60]	; (80052a8 <HAL_RCC_OscConfig+0x2ac>)
 800526c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526e:	4a0e      	ldr	r2, [pc, #56]	; (80052a8 <HAL_RCC_OscConfig+0x2ac>)
 8005270:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005274:	6413      	str	r3, [r2, #64]	; 0x40
 8005276:	4b0c      	ldr	r3, [pc, #48]	; (80052a8 <HAL_RCC_OscConfig+0x2ac>)
 8005278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800527e:	60bb      	str	r3, [r7, #8]
 8005280:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005282:	2301      	movs	r3, #1
 8005284:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005286:	4b0b      	ldr	r3, [pc, #44]	; (80052b4 <HAL_RCC_OscConfig+0x2b8>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800528e:	2b00      	cmp	r3, #0
 8005290:	d121      	bne.n	80052d6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005292:	4b08      	ldr	r3, [pc, #32]	; (80052b4 <HAL_RCC_OscConfig+0x2b8>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a07      	ldr	r2, [pc, #28]	; (80052b4 <HAL_RCC_OscConfig+0x2b8>)
 8005298:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800529c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800529e:	f7fd fc01 	bl	8002aa4 <HAL_GetTick>
 80052a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052a4:	e011      	b.n	80052ca <HAL_RCC_OscConfig+0x2ce>
 80052a6:	bf00      	nop
 80052a8:	40023800 	.word	0x40023800
 80052ac:	42470000 	.word	0x42470000
 80052b0:	42470e80 	.word	0x42470e80
 80052b4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052b8:	f7fd fbf4 	bl	8002aa4 <HAL_GetTick>
 80052bc:	4602      	mov	r2, r0
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	2b02      	cmp	r3, #2
 80052c4:	d901      	bls.n	80052ca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e106      	b.n	80054d8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052ca:	4b85      	ldr	r3, [pc, #532]	; (80054e0 <HAL_RCC_OscConfig+0x4e4>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d0f0      	beq.n	80052b8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d106      	bne.n	80052ec <HAL_RCC_OscConfig+0x2f0>
 80052de:	4b81      	ldr	r3, [pc, #516]	; (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 80052e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052e2:	4a80      	ldr	r2, [pc, #512]	; (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 80052e4:	f043 0301 	orr.w	r3, r3, #1
 80052e8:	6713      	str	r3, [r2, #112]	; 0x70
 80052ea:	e01c      	b.n	8005326 <HAL_RCC_OscConfig+0x32a>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	2b05      	cmp	r3, #5
 80052f2:	d10c      	bne.n	800530e <HAL_RCC_OscConfig+0x312>
 80052f4:	4b7b      	ldr	r3, [pc, #492]	; (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 80052f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052f8:	4a7a      	ldr	r2, [pc, #488]	; (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 80052fa:	f043 0304 	orr.w	r3, r3, #4
 80052fe:	6713      	str	r3, [r2, #112]	; 0x70
 8005300:	4b78      	ldr	r3, [pc, #480]	; (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 8005302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005304:	4a77      	ldr	r2, [pc, #476]	; (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 8005306:	f043 0301 	orr.w	r3, r3, #1
 800530a:	6713      	str	r3, [r2, #112]	; 0x70
 800530c:	e00b      	b.n	8005326 <HAL_RCC_OscConfig+0x32a>
 800530e:	4b75      	ldr	r3, [pc, #468]	; (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 8005310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005312:	4a74      	ldr	r2, [pc, #464]	; (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 8005314:	f023 0301 	bic.w	r3, r3, #1
 8005318:	6713      	str	r3, [r2, #112]	; 0x70
 800531a:	4b72      	ldr	r3, [pc, #456]	; (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 800531c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800531e:	4a71      	ldr	r2, [pc, #452]	; (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 8005320:	f023 0304 	bic.w	r3, r3, #4
 8005324:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d015      	beq.n	800535a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800532e:	f7fd fbb9 	bl	8002aa4 <HAL_GetTick>
 8005332:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005334:	e00a      	b.n	800534c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005336:	f7fd fbb5 	bl	8002aa4 <HAL_GetTick>
 800533a:	4602      	mov	r2, r0
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	1ad3      	subs	r3, r2, r3
 8005340:	f241 3288 	movw	r2, #5000	; 0x1388
 8005344:	4293      	cmp	r3, r2
 8005346:	d901      	bls.n	800534c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005348:	2303      	movs	r3, #3
 800534a:	e0c5      	b.n	80054d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800534c:	4b65      	ldr	r3, [pc, #404]	; (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 800534e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005350:	f003 0302 	and.w	r3, r3, #2
 8005354:	2b00      	cmp	r3, #0
 8005356:	d0ee      	beq.n	8005336 <HAL_RCC_OscConfig+0x33a>
 8005358:	e014      	b.n	8005384 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800535a:	f7fd fba3 	bl	8002aa4 <HAL_GetTick>
 800535e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005360:	e00a      	b.n	8005378 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005362:	f7fd fb9f 	bl	8002aa4 <HAL_GetTick>
 8005366:	4602      	mov	r2, r0
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005370:	4293      	cmp	r3, r2
 8005372:	d901      	bls.n	8005378 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	e0af      	b.n	80054d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005378:	4b5a      	ldr	r3, [pc, #360]	; (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 800537a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800537c:	f003 0302 	and.w	r3, r3, #2
 8005380:	2b00      	cmp	r3, #0
 8005382:	d1ee      	bne.n	8005362 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005384:	7dfb      	ldrb	r3, [r7, #23]
 8005386:	2b01      	cmp	r3, #1
 8005388:	d105      	bne.n	8005396 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800538a:	4b56      	ldr	r3, [pc, #344]	; (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 800538c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538e:	4a55      	ldr	r2, [pc, #340]	; (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 8005390:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005394:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	699b      	ldr	r3, [r3, #24]
 800539a:	2b00      	cmp	r3, #0
 800539c:	f000 809b 	beq.w	80054d6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80053a0:	4b50      	ldr	r3, [pc, #320]	; (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	f003 030c 	and.w	r3, r3, #12
 80053a8:	2b08      	cmp	r3, #8
 80053aa:	d05c      	beq.n	8005466 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	699b      	ldr	r3, [r3, #24]
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	d141      	bne.n	8005438 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053b4:	4b4c      	ldr	r3, [pc, #304]	; (80054e8 <HAL_RCC_OscConfig+0x4ec>)
 80053b6:	2200      	movs	r2, #0
 80053b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053ba:	f7fd fb73 	bl	8002aa4 <HAL_GetTick>
 80053be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053c0:	e008      	b.n	80053d4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053c2:	f7fd fb6f 	bl	8002aa4 <HAL_GetTick>
 80053c6:	4602      	mov	r2, r0
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	2b02      	cmp	r3, #2
 80053ce:	d901      	bls.n	80053d4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80053d0:	2303      	movs	r3, #3
 80053d2:	e081      	b.n	80054d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053d4:	4b43      	ldr	r3, [pc, #268]	; (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d1f0      	bne.n	80053c2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	69da      	ldr	r2, [r3, #28]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a1b      	ldr	r3, [r3, #32]
 80053e8:	431a      	orrs	r2, r3
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ee:	019b      	lsls	r3, r3, #6
 80053f0:	431a      	orrs	r2, r3
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f6:	085b      	lsrs	r3, r3, #1
 80053f8:	3b01      	subs	r3, #1
 80053fa:	041b      	lsls	r3, r3, #16
 80053fc:	431a      	orrs	r2, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005402:	061b      	lsls	r3, r3, #24
 8005404:	4937      	ldr	r1, [pc, #220]	; (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 8005406:	4313      	orrs	r3, r2
 8005408:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800540a:	4b37      	ldr	r3, [pc, #220]	; (80054e8 <HAL_RCC_OscConfig+0x4ec>)
 800540c:	2201      	movs	r2, #1
 800540e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005410:	f7fd fb48 	bl	8002aa4 <HAL_GetTick>
 8005414:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005416:	e008      	b.n	800542a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005418:	f7fd fb44 	bl	8002aa4 <HAL_GetTick>
 800541c:	4602      	mov	r2, r0
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	2b02      	cmp	r3, #2
 8005424:	d901      	bls.n	800542a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005426:	2303      	movs	r3, #3
 8005428:	e056      	b.n	80054d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800542a:	4b2e      	ldr	r3, [pc, #184]	; (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005432:	2b00      	cmp	r3, #0
 8005434:	d0f0      	beq.n	8005418 <HAL_RCC_OscConfig+0x41c>
 8005436:	e04e      	b.n	80054d6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005438:	4b2b      	ldr	r3, [pc, #172]	; (80054e8 <HAL_RCC_OscConfig+0x4ec>)
 800543a:	2200      	movs	r2, #0
 800543c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800543e:	f7fd fb31 	bl	8002aa4 <HAL_GetTick>
 8005442:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005444:	e008      	b.n	8005458 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005446:	f7fd fb2d 	bl	8002aa4 <HAL_GetTick>
 800544a:	4602      	mov	r2, r0
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	2b02      	cmp	r3, #2
 8005452:	d901      	bls.n	8005458 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005454:	2303      	movs	r3, #3
 8005456:	e03f      	b.n	80054d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005458:	4b22      	ldr	r3, [pc, #136]	; (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005460:	2b00      	cmp	r3, #0
 8005462:	d1f0      	bne.n	8005446 <HAL_RCC_OscConfig+0x44a>
 8005464:	e037      	b.n	80054d6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	699b      	ldr	r3, [r3, #24]
 800546a:	2b01      	cmp	r3, #1
 800546c:	d101      	bne.n	8005472 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e032      	b.n	80054d8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005472:	4b1c      	ldr	r3, [pc, #112]	; (80054e4 <HAL_RCC_OscConfig+0x4e8>)
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	699b      	ldr	r3, [r3, #24]
 800547c:	2b01      	cmp	r3, #1
 800547e:	d028      	beq.n	80054d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800548a:	429a      	cmp	r2, r3
 800548c:	d121      	bne.n	80054d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005498:	429a      	cmp	r2, r3
 800549a:	d11a      	bne.n	80054d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80054a2:	4013      	ands	r3, r2
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80054a8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d111      	bne.n	80054d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b8:	085b      	lsrs	r3, r3, #1
 80054ba:	3b01      	subs	r3, #1
 80054bc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054be:	429a      	cmp	r2, r3
 80054c0:	d107      	bne.n	80054d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054cc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d001      	beq.n	80054d6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e000      	b.n	80054d8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80054d6:	2300      	movs	r3, #0
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3718      	adds	r7, #24
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	40007000 	.word	0x40007000
 80054e4:	40023800 	.word	0x40023800
 80054e8:	42470060 	.word	0x42470060

080054ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b084      	sub	sp, #16
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d101      	bne.n	8005500 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	e0cc      	b.n	800569a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005500:	4b68      	ldr	r3, [pc, #416]	; (80056a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 0307 	and.w	r3, r3, #7
 8005508:	683a      	ldr	r2, [r7, #0]
 800550a:	429a      	cmp	r2, r3
 800550c:	d90c      	bls.n	8005528 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800550e:	4b65      	ldr	r3, [pc, #404]	; (80056a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005510:	683a      	ldr	r2, [r7, #0]
 8005512:	b2d2      	uxtb	r2, r2
 8005514:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005516:	4b63      	ldr	r3, [pc, #396]	; (80056a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 0307 	and.w	r3, r3, #7
 800551e:	683a      	ldr	r2, [r7, #0]
 8005520:	429a      	cmp	r2, r3
 8005522:	d001      	beq.n	8005528 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	e0b8      	b.n	800569a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0302 	and.w	r3, r3, #2
 8005530:	2b00      	cmp	r3, #0
 8005532:	d020      	beq.n	8005576 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0304 	and.w	r3, r3, #4
 800553c:	2b00      	cmp	r3, #0
 800553e:	d005      	beq.n	800554c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005540:	4b59      	ldr	r3, [pc, #356]	; (80056a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	4a58      	ldr	r2, [pc, #352]	; (80056a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005546:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800554a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 0308 	and.w	r3, r3, #8
 8005554:	2b00      	cmp	r3, #0
 8005556:	d005      	beq.n	8005564 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005558:	4b53      	ldr	r3, [pc, #332]	; (80056a8 <HAL_RCC_ClockConfig+0x1bc>)
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	4a52      	ldr	r2, [pc, #328]	; (80056a8 <HAL_RCC_ClockConfig+0x1bc>)
 800555e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005562:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005564:	4b50      	ldr	r3, [pc, #320]	; (80056a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	494d      	ldr	r1, [pc, #308]	; (80056a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005572:	4313      	orrs	r3, r2
 8005574:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0301 	and.w	r3, r3, #1
 800557e:	2b00      	cmp	r3, #0
 8005580:	d044      	beq.n	800560c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	2b01      	cmp	r3, #1
 8005588:	d107      	bne.n	800559a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800558a:	4b47      	ldr	r3, [pc, #284]	; (80056a8 <HAL_RCC_ClockConfig+0x1bc>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d119      	bne.n	80055ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e07f      	b.n	800569a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d003      	beq.n	80055aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055a6:	2b03      	cmp	r3, #3
 80055a8:	d107      	bne.n	80055ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055aa:	4b3f      	ldr	r3, [pc, #252]	; (80056a8 <HAL_RCC_ClockConfig+0x1bc>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d109      	bne.n	80055ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e06f      	b.n	800569a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055ba:	4b3b      	ldr	r3, [pc, #236]	; (80056a8 <HAL_RCC_ClockConfig+0x1bc>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0302 	and.w	r3, r3, #2
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d101      	bne.n	80055ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e067      	b.n	800569a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80055ca:	4b37      	ldr	r3, [pc, #220]	; (80056a8 <HAL_RCC_ClockConfig+0x1bc>)
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	f023 0203 	bic.w	r2, r3, #3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	4934      	ldr	r1, [pc, #208]	; (80056a8 <HAL_RCC_ClockConfig+0x1bc>)
 80055d8:	4313      	orrs	r3, r2
 80055da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80055dc:	f7fd fa62 	bl	8002aa4 <HAL_GetTick>
 80055e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055e2:	e00a      	b.n	80055fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055e4:	f7fd fa5e 	bl	8002aa4 <HAL_GetTick>
 80055e8:	4602      	mov	r2, r0
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d901      	bls.n	80055fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80055f6:	2303      	movs	r3, #3
 80055f8:	e04f      	b.n	800569a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055fa:	4b2b      	ldr	r3, [pc, #172]	; (80056a8 <HAL_RCC_ClockConfig+0x1bc>)
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	f003 020c 	and.w	r2, r3, #12
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	429a      	cmp	r2, r3
 800560a:	d1eb      	bne.n	80055e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800560c:	4b25      	ldr	r3, [pc, #148]	; (80056a4 <HAL_RCC_ClockConfig+0x1b8>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 0307 	and.w	r3, r3, #7
 8005614:	683a      	ldr	r2, [r7, #0]
 8005616:	429a      	cmp	r2, r3
 8005618:	d20c      	bcs.n	8005634 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800561a:	4b22      	ldr	r3, [pc, #136]	; (80056a4 <HAL_RCC_ClockConfig+0x1b8>)
 800561c:	683a      	ldr	r2, [r7, #0]
 800561e:	b2d2      	uxtb	r2, r2
 8005620:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005622:	4b20      	ldr	r3, [pc, #128]	; (80056a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 0307 	and.w	r3, r3, #7
 800562a:	683a      	ldr	r2, [r7, #0]
 800562c:	429a      	cmp	r2, r3
 800562e:	d001      	beq.n	8005634 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	e032      	b.n	800569a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 0304 	and.w	r3, r3, #4
 800563c:	2b00      	cmp	r3, #0
 800563e:	d008      	beq.n	8005652 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005640:	4b19      	ldr	r3, [pc, #100]	; (80056a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	4916      	ldr	r1, [pc, #88]	; (80056a8 <HAL_RCC_ClockConfig+0x1bc>)
 800564e:	4313      	orrs	r3, r2
 8005650:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 0308 	and.w	r3, r3, #8
 800565a:	2b00      	cmp	r3, #0
 800565c:	d009      	beq.n	8005672 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800565e:	4b12      	ldr	r3, [pc, #72]	; (80056a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	00db      	lsls	r3, r3, #3
 800566c:	490e      	ldr	r1, [pc, #56]	; (80056a8 <HAL_RCC_ClockConfig+0x1bc>)
 800566e:	4313      	orrs	r3, r2
 8005670:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005672:	f000 f821 	bl	80056b8 <HAL_RCC_GetSysClockFreq>
 8005676:	4602      	mov	r2, r0
 8005678:	4b0b      	ldr	r3, [pc, #44]	; (80056a8 <HAL_RCC_ClockConfig+0x1bc>)
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	091b      	lsrs	r3, r3, #4
 800567e:	f003 030f 	and.w	r3, r3, #15
 8005682:	490a      	ldr	r1, [pc, #40]	; (80056ac <HAL_RCC_ClockConfig+0x1c0>)
 8005684:	5ccb      	ldrb	r3, [r1, r3]
 8005686:	fa22 f303 	lsr.w	r3, r2, r3
 800568a:	4a09      	ldr	r2, [pc, #36]	; (80056b0 <HAL_RCC_ClockConfig+0x1c4>)
 800568c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800568e:	4b09      	ldr	r3, [pc, #36]	; (80056b4 <HAL_RCC_ClockConfig+0x1c8>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4618      	mov	r0, r3
 8005694:	f7fd f9c2 	bl	8002a1c <HAL_InitTick>

  return HAL_OK;
 8005698:	2300      	movs	r3, #0
}
 800569a:	4618      	mov	r0, r3
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	40023c00 	.word	0x40023c00
 80056a8:	40023800 	.word	0x40023800
 80056ac:	08008c58 	.word	0x08008c58
 80056b0:	20000010 	.word	0x20000010
 80056b4:	20000014 	.word	0x20000014

080056b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80056bc:	b084      	sub	sp, #16
 80056be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80056c0:	2300      	movs	r3, #0
 80056c2:	607b      	str	r3, [r7, #4]
 80056c4:	2300      	movs	r3, #0
 80056c6:	60fb      	str	r3, [r7, #12]
 80056c8:	2300      	movs	r3, #0
 80056ca:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80056cc:	2300      	movs	r3, #0
 80056ce:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80056d0:	4b67      	ldr	r3, [pc, #412]	; (8005870 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	f003 030c 	and.w	r3, r3, #12
 80056d8:	2b08      	cmp	r3, #8
 80056da:	d00d      	beq.n	80056f8 <HAL_RCC_GetSysClockFreq+0x40>
 80056dc:	2b08      	cmp	r3, #8
 80056de:	f200 80bd 	bhi.w	800585c <HAL_RCC_GetSysClockFreq+0x1a4>
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d002      	beq.n	80056ec <HAL_RCC_GetSysClockFreq+0x34>
 80056e6:	2b04      	cmp	r3, #4
 80056e8:	d003      	beq.n	80056f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80056ea:	e0b7      	b.n	800585c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80056ec:	4b61      	ldr	r3, [pc, #388]	; (8005874 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80056ee:	60bb      	str	r3, [r7, #8]
       break;
 80056f0:	e0b7      	b.n	8005862 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80056f2:	4b61      	ldr	r3, [pc, #388]	; (8005878 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80056f4:	60bb      	str	r3, [r7, #8]
      break;
 80056f6:	e0b4      	b.n	8005862 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80056f8:	4b5d      	ldr	r3, [pc, #372]	; (8005870 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005700:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005702:	4b5b      	ldr	r3, [pc, #364]	; (8005870 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800570a:	2b00      	cmp	r3, #0
 800570c:	d04d      	beq.n	80057aa <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800570e:	4b58      	ldr	r3, [pc, #352]	; (8005870 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	099b      	lsrs	r3, r3, #6
 8005714:	461a      	mov	r2, r3
 8005716:	f04f 0300 	mov.w	r3, #0
 800571a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800571e:	f04f 0100 	mov.w	r1, #0
 8005722:	ea02 0800 	and.w	r8, r2, r0
 8005726:	ea03 0901 	and.w	r9, r3, r1
 800572a:	4640      	mov	r0, r8
 800572c:	4649      	mov	r1, r9
 800572e:	f04f 0200 	mov.w	r2, #0
 8005732:	f04f 0300 	mov.w	r3, #0
 8005736:	014b      	lsls	r3, r1, #5
 8005738:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800573c:	0142      	lsls	r2, r0, #5
 800573e:	4610      	mov	r0, r2
 8005740:	4619      	mov	r1, r3
 8005742:	ebb0 0008 	subs.w	r0, r0, r8
 8005746:	eb61 0109 	sbc.w	r1, r1, r9
 800574a:	f04f 0200 	mov.w	r2, #0
 800574e:	f04f 0300 	mov.w	r3, #0
 8005752:	018b      	lsls	r3, r1, #6
 8005754:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005758:	0182      	lsls	r2, r0, #6
 800575a:	1a12      	subs	r2, r2, r0
 800575c:	eb63 0301 	sbc.w	r3, r3, r1
 8005760:	f04f 0000 	mov.w	r0, #0
 8005764:	f04f 0100 	mov.w	r1, #0
 8005768:	00d9      	lsls	r1, r3, #3
 800576a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800576e:	00d0      	lsls	r0, r2, #3
 8005770:	4602      	mov	r2, r0
 8005772:	460b      	mov	r3, r1
 8005774:	eb12 0208 	adds.w	r2, r2, r8
 8005778:	eb43 0309 	adc.w	r3, r3, r9
 800577c:	f04f 0000 	mov.w	r0, #0
 8005780:	f04f 0100 	mov.w	r1, #0
 8005784:	0259      	lsls	r1, r3, #9
 8005786:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800578a:	0250      	lsls	r0, r2, #9
 800578c:	4602      	mov	r2, r0
 800578e:	460b      	mov	r3, r1
 8005790:	4610      	mov	r0, r2
 8005792:	4619      	mov	r1, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	461a      	mov	r2, r3
 8005798:	f04f 0300 	mov.w	r3, #0
 800579c:	f7fb f88e 	bl	80008bc <__aeabi_uldivmod>
 80057a0:	4602      	mov	r2, r0
 80057a2:	460b      	mov	r3, r1
 80057a4:	4613      	mov	r3, r2
 80057a6:	60fb      	str	r3, [r7, #12]
 80057a8:	e04a      	b.n	8005840 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057aa:	4b31      	ldr	r3, [pc, #196]	; (8005870 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	099b      	lsrs	r3, r3, #6
 80057b0:	461a      	mov	r2, r3
 80057b2:	f04f 0300 	mov.w	r3, #0
 80057b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80057ba:	f04f 0100 	mov.w	r1, #0
 80057be:	ea02 0400 	and.w	r4, r2, r0
 80057c2:	ea03 0501 	and.w	r5, r3, r1
 80057c6:	4620      	mov	r0, r4
 80057c8:	4629      	mov	r1, r5
 80057ca:	f04f 0200 	mov.w	r2, #0
 80057ce:	f04f 0300 	mov.w	r3, #0
 80057d2:	014b      	lsls	r3, r1, #5
 80057d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80057d8:	0142      	lsls	r2, r0, #5
 80057da:	4610      	mov	r0, r2
 80057dc:	4619      	mov	r1, r3
 80057de:	1b00      	subs	r0, r0, r4
 80057e0:	eb61 0105 	sbc.w	r1, r1, r5
 80057e4:	f04f 0200 	mov.w	r2, #0
 80057e8:	f04f 0300 	mov.w	r3, #0
 80057ec:	018b      	lsls	r3, r1, #6
 80057ee:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80057f2:	0182      	lsls	r2, r0, #6
 80057f4:	1a12      	subs	r2, r2, r0
 80057f6:	eb63 0301 	sbc.w	r3, r3, r1
 80057fa:	f04f 0000 	mov.w	r0, #0
 80057fe:	f04f 0100 	mov.w	r1, #0
 8005802:	00d9      	lsls	r1, r3, #3
 8005804:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005808:	00d0      	lsls	r0, r2, #3
 800580a:	4602      	mov	r2, r0
 800580c:	460b      	mov	r3, r1
 800580e:	1912      	adds	r2, r2, r4
 8005810:	eb45 0303 	adc.w	r3, r5, r3
 8005814:	f04f 0000 	mov.w	r0, #0
 8005818:	f04f 0100 	mov.w	r1, #0
 800581c:	0299      	lsls	r1, r3, #10
 800581e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005822:	0290      	lsls	r0, r2, #10
 8005824:	4602      	mov	r2, r0
 8005826:	460b      	mov	r3, r1
 8005828:	4610      	mov	r0, r2
 800582a:	4619      	mov	r1, r3
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	461a      	mov	r2, r3
 8005830:	f04f 0300 	mov.w	r3, #0
 8005834:	f7fb f842 	bl	80008bc <__aeabi_uldivmod>
 8005838:	4602      	mov	r2, r0
 800583a:	460b      	mov	r3, r1
 800583c:	4613      	mov	r3, r2
 800583e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005840:	4b0b      	ldr	r3, [pc, #44]	; (8005870 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	0c1b      	lsrs	r3, r3, #16
 8005846:	f003 0303 	and.w	r3, r3, #3
 800584a:	3301      	adds	r3, #1
 800584c:	005b      	lsls	r3, r3, #1
 800584e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	fbb2 f3f3 	udiv	r3, r2, r3
 8005858:	60bb      	str	r3, [r7, #8]
      break;
 800585a:	e002      	b.n	8005862 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800585c:	4b05      	ldr	r3, [pc, #20]	; (8005874 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800585e:	60bb      	str	r3, [r7, #8]
      break;
 8005860:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005862:	68bb      	ldr	r3, [r7, #8]
}
 8005864:	4618      	mov	r0, r3
 8005866:	3710      	adds	r7, #16
 8005868:	46bd      	mov	sp, r7
 800586a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800586e:	bf00      	nop
 8005870:	40023800 	.word	0x40023800
 8005874:	00f42400 	.word	0x00f42400
 8005878:	007a1200 	.word	0x007a1200

0800587c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800587c:	b480      	push	{r7}
 800587e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005880:	4b03      	ldr	r3, [pc, #12]	; (8005890 <HAL_RCC_GetHCLKFreq+0x14>)
 8005882:	681b      	ldr	r3, [r3, #0]
}
 8005884:	4618      	mov	r0, r3
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr
 800588e:	bf00      	nop
 8005890:	20000010 	.word	0x20000010

08005894 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005898:	f7ff fff0 	bl	800587c <HAL_RCC_GetHCLKFreq>
 800589c:	4602      	mov	r2, r0
 800589e:	4b05      	ldr	r3, [pc, #20]	; (80058b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	0a9b      	lsrs	r3, r3, #10
 80058a4:	f003 0307 	and.w	r3, r3, #7
 80058a8:	4903      	ldr	r1, [pc, #12]	; (80058b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80058aa:	5ccb      	ldrb	r3, [r1, r3]
 80058ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	bd80      	pop	{r7, pc}
 80058b4:	40023800 	.word	0x40023800
 80058b8:	08008c68 	.word	0x08008c68

080058bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80058c0:	f7ff ffdc 	bl	800587c <HAL_RCC_GetHCLKFreq>
 80058c4:	4602      	mov	r2, r0
 80058c6:	4b05      	ldr	r3, [pc, #20]	; (80058dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	0b5b      	lsrs	r3, r3, #13
 80058cc:	f003 0307 	and.w	r3, r3, #7
 80058d0:	4903      	ldr	r1, [pc, #12]	; (80058e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80058d2:	5ccb      	ldrb	r3, [r1, r3]
 80058d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058d8:	4618      	mov	r0, r3
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	40023800 	.word	0x40023800
 80058e0:	08008c68 	.word	0x08008c68

080058e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b082      	sub	sp, #8
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d101      	bne.n	80058f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e041      	b.n	800597a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d106      	bne.n	8005910 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f7fc fe52 	bl	80025b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2202      	movs	r2, #2
 8005914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	3304      	adds	r3, #4
 8005920:	4619      	mov	r1, r3
 8005922:	4610      	mov	r0, r2
 8005924:	f000 fac0 	bl	8005ea8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005978:	2300      	movs	r3, #0
}
 800597a:	4618      	mov	r0, r3
 800597c:	3708      	adds	r7, #8
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}

08005982 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005982:	b580      	push	{r7, lr}
 8005984:	b082      	sub	sp, #8
 8005986:	af00      	add	r7, sp, #0
 8005988:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d101      	bne.n	8005994 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	e041      	b.n	8005a18 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800599a:	b2db      	uxtb	r3, r3
 800599c:	2b00      	cmp	r3, #0
 800599e:	d106      	bne.n	80059ae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f000 f839 	bl	8005a20 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2202      	movs	r2, #2
 80059b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	3304      	adds	r3, #4
 80059be:	4619      	mov	r1, r3
 80059c0:	4610      	mov	r0, r2
 80059c2:	f000 fa71 	bl	8005ea8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2201      	movs	r2, #1
 80059ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2201      	movs	r2, #1
 80059d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2201      	movs	r2, #1
 80059da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2201      	movs	r2, #1
 80059e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2201      	movs	r2, #1
 80059ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2201      	movs	r2, #1
 80059f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2201      	movs	r2, #1
 80059fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2201      	movs	r2, #1
 8005a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a16:	2300      	movs	r3, #0
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3708      	adds	r7, #8
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005a28:	bf00      	nop
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b084      	sub	sp, #16
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d109      	bne.n	8005a58 <HAL_TIM_PWM_Start+0x24>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	bf14      	ite	ne
 8005a50:	2301      	movne	r3, #1
 8005a52:	2300      	moveq	r3, #0
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	e022      	b.n	8005a9e <HAL_TIM_PWM_Start+0x6a>
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	2b04      	cmp	r3, #4
 8005a5c:	d109      	bne.n	8005a72 <HAL_TIM_PWM_Start+0x3e>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	bf14      	ite	ne
 8005a6a:	2301      	movne	r3, #1
 8005a6c:	2300      	moveq	r3, #0
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	e015      	b.n	8005a9e <HAL_TIM_PWM_Start+0x6a>
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	2b08      	cmp	r3, #8
 8005a76:	d109      	bne.n	8005a8c <HAL_TIM_PWM_Start+0x58>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	bf14      	ite	ne
 8005a84:	2301      	movne	r3, #1
 8005a86:	2300      	moveq	r3, #0
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	e008      	b.n	8005a9e <HAL_TIM_PWM_Start+0x6a>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	bf14      	ite	ne
 8005a98:	2301      	movne	r3, #1
 8005a9a:	2300      	moveq	r3, #0
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d001      	beq.n	8005aa6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e068      	b.n	8005b78 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d104      	bne.n	8005ab6 <HAL_TIM_PWM_Start+0x82>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2202      	movs	r2, #2
 8005ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ab4:	e013      	b.n	8005ade <HAL_TIM_PWM_Start+0xaa>
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	2b04      	cmp	r3, #4
 8005aba:	d104      	bne.n	8005ac6 <HAL_TIM_PWM_Start+0x92>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2202      	movs	r2, #2
 8005ac0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ac4:	e00b      	b.n	8005ade <HAL_TIM_PWM_Start+0xaa>
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	2b08      	cmp	r3, #8
 8005aca:	d104      	bne.n	8005ad6 <HAL_TIM_PWM_Start+0xa2>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2202      	movs	r2, #2
 8005ad0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ad4:	e003      	b.n	8005ade <HAL_TIM_PWM_Start+0xaa>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2202      	movs	r2, #2
 8005ada:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	6839      	ldr	r1, [r7, #0]
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f000 fc84 	bl	80063f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a23      	ldr	r2, [pc, #140]	; (8005b80 <HAL_TIM_PWM_Start+0x14c>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d107      	bne.n	8005b06 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b04:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a1d      	ldr	r2, [pc, #116]	; (8005b80 <HAL_TIM_PWM_Start+0x14c>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d018      	beq.n	8005b42 <HAL_TIM_PWM_Start+0x10e>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b18:	d013      	beq.n	8005b42 <HAL_TIM_PWM_Start+0x10e>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a19      	ldr	r2, [pc, #100]	; (8005b84 <HAL_TIM_PWM_Start+0x150>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d00e      	beq.n	8005b42 <HAL_TIM_PWM_Start+0x10e>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a17      	ldr	r2, [pc, #92]	; (8005b88 <HAL_TIM_PWM_Start+0x154>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d009      	beq.n	8005b42 <HAL_TIM_PWM_Start+0x10e>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a16      	ldr	r2, [pc, #88]	; (8005b8c <HAL_TIM_PWM_Start+0x158>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d004      	beq.n	8005b42 <HAL_TIM_PWM_Start+0x10e>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a14      	ldr	r2, [pc, #80]	; (8005b90 <HAL_TIM_PWM_Start+0x15c>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d111      	bne.n	8005b66 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	f003 0307 	and.w	r3, r3, #7
 8005b4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2b06      	cmp	r3, #6
 8005b52:	d010      	beq.n	8005b76 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f042 0201 	orr.w	r2, r2, #1
 8005b62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b64:	e007      	b.n	8005b76 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f042 0201 	orr.w	r2, r2, #1
 8005b74:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b76:	2300      	movs	r3, #0
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3710      	adds	r7, #16
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	40010000 	.word	0x40010000
 8005b84:	40000400 	.word	0x40000400
 8005b88:	40000800 	.word	0x40000800
 8005b8c:	40000c00 	.word	0x40000c00
 8005b90:	40014000 	.word	0x40014000

08005b94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b086      	sub	sp, #24
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	60b9      	str	r1, [r7, #8]
 8005b9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d101      	bne.n	8005bb2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005bae:	2302      	movs	r3, #2
 8005bb0:	e0ae      	b.n	8005d10 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2b0c      	cmp	r3, #12
 8005bbe:	f200 809f 	bhi.w	8005d00 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005bc2:	a201      	add	r2, pc, #4	; (adr r2, 8005bc8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc8:	08005bfd 	.word	0x08005bfd
 8005bcc:	08005d01 	.word	0x08005d01
 8005bd0:	08005d01 	.word	0x08005d01
 8005bd4:	08005d01 	.word	0x08005d01
 8005bd8:	08005c3d 	.word	0x08005c3d
 8005bdc:	08005d01 	.word	0x08005d01
 8005be0:	08005d01 	.word	0x08005d01
 8005be4:	08005d01 	.word	0x08005d01
 8005be8:	08005c7f 	.word	0x08005c7f
 8005bec:	08005d01 	.word	0x08005d01
 8005bf0:	08005d01 	.word	0x08005d01
 8005bf4:	08005d01 	.word	0x08005d01
 8005bf8:	08005cbf 	.word	0x08005cbf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	68b9      	ldr	r1, [r7, #8]
 8005c02:	4618      	mov	r0, r3
 8005c04:	f000 f9d0 	bl	8005fa8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	699a      	ldr	r2, [r3, #24]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f042 0208 	orr.w	r2, r2, #8
 8005c16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	699a      	ldr	r2, [r3, #24]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f022 0204 	bic.w	r2, r2, #4
 8005c26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	6999      	ldr	r1, [r3, #24]
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	691a      	ldr	r2, [r3, #16]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	430a      	orrs	r2, r1
 8005c38:	619a      	str	r2, [r3, #24]
      break;
 8005c3a:	e064      	b.n	8005d06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	68b9      	ldr	r1, [r7, #8]
 8005c42:	4618      	mov	r0, r3
 8005c44:	f000 fa16 	bl	8006074 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	699a      	ldr	r2, [r3, #24]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	699a      	ldr	r2, [r3, #24]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	6999      	ldr	r1, [r3, #24]
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	021a      	lsls	r2, r3, #8
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	430a      	orrs	r2, r1
 8005c7a:	619a      	str	r2, [r3, #24]
      break;
 8005c7c:	e043      	b.n	8005d06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68b9      	ldr	r1, [r7, #8]
 8005c84:	4618      	mov	r0, r3
 8005c86:	f000 fa61 	bl	800614c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	69da      	ldr	r2, [r3, #28]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f042 0208 	orr.w	r2, r2, #8
 8005c98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	69da      	ldr	r2, [r3, #28]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f022 0204 	bic.w	r2, r2, #4
 8005ca8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	69d9      	ldr	r1, [r3, #28]
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	691a      	ldr	r2, [r3, #16]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	430a      	orrs	r2, r1
 8005cba:	61da      	str	r2, [r3, #28]
      break;
 8005cbc:	e023      	b.n	8005d06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68b9      	ldr	r1, [r7, #8]
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f000 faab 	bl	8006220 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	69da      	ldr	r2, [r3, #28]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	69da      	ldr	r2, [r3, #28]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ce8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	69d9      	ldr	r1, [r3, #28]
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	691b      	ldr	r3, [r3, #16]
 8005cf4:	021a      	lsls	r2, r3, #8
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	430a      	orrs	r2, r1
 8005cfc:	61da      	str	r2, [r3, #28]
      break;
 8005cfe:	e002      	b.n	8005d06 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	75fb      	strb	r3, [r7, #23]
      break;
 8005d04:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3718      	adds	r7, #24
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d22:	2300      	movs	r3, #0
 8005d24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d101      	bne.n	8005d34 <HAL_TIM_ConfigClockSource+0x1c>
 8005d30:	2302      	movs	r3, #2
 8005d32:	e0b4      	b.n	8005e9e <HAL_TIM_ConfigClockSource+0x186>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2202      	movs	r2, #2
 8005d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005d52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d5a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	68ba      	ldr	r2, [r7, #8]
 8005d62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d6c:	d03e      	beq.n	8005dec <HAL_TIM_ConfigClockSource+0xd4>
 8005d6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d72:	f200 8087 	bhi.w	8005e84 <HAL_TIM_ConfigClockSource+0x16c>
 8005d76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d7a:	f000 8086 	beq.w	8005e8a <HAL_TIM_ConfigClockSource+0x172>
 8005d7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d82:	d87f      	bhi.n	8005e84 <HAL_TIM_ConfigClockSource+0x16c>
 8005d84:	2b70      	cmp	r3, #112	; 0x70
 8005d86:	d01a      	beq.n	8005dbe <HAL_TIM_ConfigClockSource+0xa6>
 8005d88:	2b70      	cmp	r3, #112	; 0x70
 8005d8a:	d87b      	bhi.n	8005e84 <HAL_TIM_ConfigClockSource+0x16c>
 8005d8c:	2b60      	cmp	r3, #96	; 0x60
 8005d8e:	d050      	beq.n	8005e32 <HAL_TIM_ConfigClockSource+0x11a>
 8005d90:	2b60      	cmp	r3, #96	; 0x60
 8005d92:	d877      	bhi.n	8005e84 <HAL_TIM_ConfigClockSource+0x16c>
 8005d94:	2b50      	cmp	r3, #80	; 0x50
 8005d96:	d03c      	beq.n	8005e12 <HAL_TIM_ConfigClockSource+0xfa>
 8005d98:	2b50      	cmp	r3, #80	; 0x50
 8005d9a:	d873      	bhi.n	8005e84 <HAL_TIM_ConfigClockSource+0x16c>
 8005d9c:	2b40      	cmp	r3, #64	; 0x40
 8005d9e:	d058      	beq.n	8005e52 <HAL_TIM_ConfigClockSource+0x13a>
 8005da0:	2b40      	cmp	r3, #64	; 0x40
 8005da2:	d86f      	bhi.n	8005e84 <HAL_TIM_ConfigClockSource+0x16c>
 8005da4:	2b30      	cmp	r3, #48	; 0x30
 8005da6:	d064      	beq.n	8005e72 <HAL_TIM_ConfigClockSource+0x15a>
 8005da8:	2b30      	cmp	r3, #48	; 0x30
 8005daa:	d86b      	bhi.n	8005e84 <HAL_TIM_ConfigClockSource+0x16c>
 8005dac:	2b20      	cmp	r3, #32
 8005dae:	d060      	beq.n	8005e72 <HAL_TIM_ConfigClockSource+0x15a>
 8005db0:	2b20      	cmp	r3, #32
 8005db2:	d867      	bhi.n	8005e84 <HAL_TIM_ConfigClockSource+0x16c>
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d05c      	beq.n	8005e72 <HAL_TIM_ConfigClockSource+0x15a>
 8005db8:	2b10      	cmp	r3, #16
 8005dba:	d05a      	beq.n	8005e72 <HAL_TIM_ConfigClockSource+0x15a>
 8005dbc:	e062      	b.n	8005e84 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6818      	ldr	r0, [r3, #0]
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	6899      	ldr	r1, [r3, #8]
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	685a      	ldr	r2, [r3, #4]
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	f000 faf1 	bl	80063b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005de0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	68ba      	ldr	r2, [r7, #8]
 8005de8:	609a      	str	r2, [r3, #8]
      break;
 8005dea:	e04f      	b.n	8005e8c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6818      	ldr	r0, [r3, #0]
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	6899      	ldr	r1, [r3, #8]
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	685a      	ldr	r2, [r3, #4]
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	f000 fada 	bl	80063b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	689a      	ldr	r2, [r3, #8]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e0e:	609a      	str	r2, [r3, #8]
      break;
 8005e10:	e03c      	b.n	8005e8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6818      	ldr	r0, [r3, #0]
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	6859      	ldr	r1, [r3, #4]
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	68db      	ldr	r3, [r3, #12]
 8005e1e:	461a      	mov	r2, r3
 8005e20:	f000 fa4e 	bl	80062c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2150      	movs	r1, #80	; 0x50
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f000 faa7 	bl	800637e <TIM_ITRx_SetConfig>
      break;
 8005e30:	e02c      	b.n	8005e8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6818      	ldr	r0, [r3, #0]
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	6859      	ldr	r1, [r3, #4]
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	461a      	mov	r2, r3
 8005e40:	f000 fa6d 	bl	800631e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2160      	movs	r1, #96	; 0x60
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f000 fa97 	bl	800637e <TIM_ITRx_SetConfig>
      break;
 8005e50:	e01c      	b.n	8005e8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6818      	ldr	r0, [r3, #0]
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	6859      	ldr	r1, [r3, #4]
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	68db      	ldr	r3, [r3, #12]
 8005e5e:	461a      	mov	r2, r3
 8005e60:	f000 fa2e 	bl	80062c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	2140      	movs	r1, #64	; 0x40
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f000 fa87 	bl	800637e <TIM_ITRx_SetConfig>
      break;
 8005e70:	e00c      	b.n	8005e8c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	4610      	mov	r0, r2
 8005e7e:	f000 fa7e 	bl	800637e <TIM_ITRx_SetConfig>
      break;
 8005e82:	e003      	b.n	8005e8c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	73fb      	strb	r3, [r7, #15]
      break;
 8005e88:	e000      	b.n	8005e8c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005e8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3710      	adds	r7, #16
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
	...

08005ea8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b085      	sub	sp, #20
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	4a34      	ldr	r2, [pc, #208]	; (8005f8c <TIM_Base_SetConfig+0xe4>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d00f      	beq.n	8005ee0 <TIM_Base_SetConfig+0x38>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ec6:	d00b      	beq.n	8005ee0 <TIM_Base_SetConfig+0x38>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	4a31      	ldr	r2, [pc, #196]	; (8005f90 <TIM_Base_SetConfig+0xe8>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d007      	beq.n	8005ee0 <TIM_Base_SetConfig+0x38>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	4a30      	ldr	r2, [pc, #192]	; (8005f94 <TIM_Base_SetConfig+0xec>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d003      	beq.n	8005ee0 <TIM_Base_SetConfig+0x38>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	4a2f      	ldr	r2, [pc, #188]	; (8005f98 <TIM_Base_SetConfig+0xf0>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d108      	bne.n	8005ef2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ee6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	68fa      	ldr	r2, [r7, #12]
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a25      	ldr	r2, [pc, #148]	; (8005f8c <TIM_Base_SetConfig+0xe4>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d01b      	beq.n	8005f32 <TIM_Base_SetConfig+0x8a>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f00:	d017      	beq.n	8005f32 <TIM_Base_SetConfig+0x8a>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	4a22      	ldr	r2, [pc, #136]	; (8005f90 <TIM_Base_SetConfig+0xe8>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d013      	beq.n	8005f32 <TIM_Base_SetConfig+0x8a>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	4a21      	ldr	r2, [pc, #132]	; (8005f94 <TIM_Base_SetConfig+0xec>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d00f      	beq.n	8005f32 <TIM_Base_SetConfig+0x8a>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	4a20      	ldr	r2, [pc, #128]	; (8005f98 <TIM_Base_SetConfig+0xf0>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d00b      	beq.n	8005f32 <TIM_Base_SetConfig+0x8a>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	4a1f      	ldr	r2, [pc, #124]	; (8005f9c <TIM_Base_SetConfig+0xf4>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d007      	beq.n	8005f32 <TIM_Base_SetConfig+0x8a>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4a1e      	ldr	r2, [pc, #120]	; (8005fa0 <TIM_Base_SetConfig+0xf8>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d003      	beq.n	8005f32 <TIM_Base_SetConfig+0x8a>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4a1d      	ldr	r2, [pc, #116]	; (8005fa4 <TIM_Base_SetConfig+0xfc>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d108      	bne.n	8005f44 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	68fa      	ldr	r2, [r7, #12]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	695b      	ldr	r3, [r3, #20]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	68fa      	ldr	r2, [r7, #12]
 8005f56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	689a      	ldr	r2, [r3, #8]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a08      	ldr	r2, [pc, #32]	; (8005f8c <TIM_Base_SetConfig+0xe4>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d103      	bne.n	8005f78 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	691a      	ldr	r2, [r3, #16]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	615a      	str	r2, [r3, #20]
}
 8005f7e:	bf00      	nop
 8005f80:	3714      	adds	r7, #20
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop
 8005f8c:	40010000 	.word	0x40010000
 8005f90:	40000400 	.word	0x40000400
 8005f94:	40000800 	.word	0x40000800
 8005f98:	40000c00 	.word	0x40000c00
 8005f9c:	40014000 	.word	0x40014000
 8005fa0:	40014400 	.word	0x40014400
 8005fa4:	40014800 	.word	0x40014800

08005fa8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b087      	sub	sp, #28
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6a1b      	ldr	r3, [r3, #32]
 8005fb6:	f023 0201 	bic.w	r2, r3, #1
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a1b      	ldr	r3, [r3, #32]
 8005fc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	699b      	ldr	r3, [r3, #24]
 8005fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f023 0303 	bic.w	r3, r3, #3
 8005fde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	68fa      	ldr	r2, [r7, #12]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	f023 0302 	bic.w	r3, r3, #2
 8005ff0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	697a      	ldr	r2, [r7, #20]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	4a1c      	ldr	r2, [pc, #112]	; (8006070 <TIM_OC1_SetConfig+0xc8>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d10c      	bne.n	800601e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	f023 0308 	bic.w	r3, r3, #8
 800600a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	697a      	ldr	r2, [r7, #20]
 8006012:	4313      	orrs	r3, r2
 8006014:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	f023 0304 	bic.w	r3, r3, #4
 800601c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a13      	ldr	r2, [pc, #76]	; (8006070 <TIM_OC1_SetConfig+0xc8>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d111      	bne.n	800604a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800602c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006034:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	695b      	ldr	r3, [r3, #20]
 800603a:	693a      	ldr	r2, [r7, #16]
 800603c:	4313      	orrs	r3, r2
 800603e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	699b      	ldr	r3, [r3, #24]
 8006044:	693a      	ldr	r2, [r7, #16]
 8006046:	4313      	orrs	r3, r2
 8006048:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	693a      	ldr	r2, [r7, #16]
 800604e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	685a      	ldr	r2, [r3, #4]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	697a      	ldr	r2, [r7, #20]
 8006062:	621a      	str	r2, [r3, #32]
}
 8006064:	bf00      	nop
 8006066:	371c      	adds	r7, #28
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr
 8006070:	40010000 	.word	0x40010000

08006074 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006074:	b480      	push	{r7}
 8006076:	b087      	sub	sp, #28
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6a1b      	ldr	r3, [r3, #32]
 8006082:	f023 0210 	bic.w	r2, r3, #16
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6a1b      	ldr	r3, [r3, #32]
 800608e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	699b      	ldr	r3, [r3, #24]
 800609a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	021b      	lsls	r3, r3, #8
 80060b2:	68fa      	ldr	r2, [r7, #12]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	f023 0320 	bic.w	r3, r3, #32
 80060be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	011b      	lsls	r3, r3, #4
 80060c6:	697a      	ldr	r2, [r7, #20]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	4a1e      	ldr	r2, [pc, #120]	; (8006148 <TIM_OC2_SetConfig+0xd4>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d10d      	bne.n	80060f0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	011b      	lsls	r3, r3, #4
 80060e2:	697a      	ldr	r2, [r7, #20]
 80060e4:	4313      	orrs	r3, r2
 80060e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4a15      	ldr	r2, [pc, #84]	; (8006148 <TIM_OC2_SetConfig+0xd4>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d113      	bne.n	8006120 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006106:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	695b      	ldr	r3, [r3, #20]
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	693a      	ldr	r2, [r7, #16]
 8006110:	4313      	orrs	r3, r2
 8006112:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	699b      	ldr	r3, [r3, #24]
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	693a      	ldr	r2, [r7, #16]
 800611c:	4313      	orrs	r3, r2
 800611e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	693a      	ldr	r2, [r7, #16]
 8006124:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	68fa      	ldr	r2, [r7, #12]
 800612a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	685a      	ldr	r2, [r3, #4]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	697a      	ldr	r2, [r7, #20]
 8006138:	621a      	str	r2, [r3, #32]
}
 800613a:	bf00      	nop
 800613c:	371c      	adds	r7, #28
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr
 8006146:	bf00      	nop
 8006148:	40010000 	.word	0x40010000

0800614c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800614c:	b480      	push	{r7}
 800614e:	b087      	sub	sp, #28
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a1b      	ldr	r3, [r3, #32]
 800615a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6a1b      	ldr	r3, [r3, #32]
 8006166:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	69db      	ldr	r3, [r3, #28]
 8006172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800617a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f023 0303 	bic.w	r3, r3, #3
 8006182:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68fa      	ldr	r2, [r7, #12]
 800618a:	4313      	orrs	r3, r2
 800618c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006194:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	021b      	lsls	r3, r3, #8
 800619c:	697a      	ldr	r2, [r7, #20]
 800619e:	4313      	orrs	r3, r2
 80061a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4a1d      	ldr	r2, [pc, #116]	; (800621c <TIM_OC3_SetConfig+0xd0>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d10d      	bne.n	80061c6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80061b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	68db      	ldr	r3, [r3, #12]
 80061b6:	021b      	lsls	r3, r3, #8
 80061b8:	697a      	ldr	r2, [r7, #20]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4a14      	ldr	r2, [pc, #80]	; (800621c <TIM_OC3_SetConfig+0xd0>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d113      	bne.n	80061f6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	695b      	ldr	r3, [r3, #20]
 80061e2:	011b      	lsls	r3, r3, #4
 80061e4:	693a      	ldr	r2, [r7, #16]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	699b      	ldr	r3, [r3, #24]
 80061ee:	011b      	lsls	r3, r3, #4
 80061f0:	693a      	ldr	r2, [r7, #16]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	693a      	ldr	r2, [r7, #16]
 80061fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	68fa      	ldr	r2, [r7, #12]
 8006200:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	685a      	ldr	r2, [r3, #4]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	697a      	ldr	r2, [r7, #20]
 800620e:	621a      	str	r2, [r3, #32]
}
 8006210:	bf00      	nop
 8006212:	371c      	adds	r7, #28
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr
 800621c:	40010000 	.word	0x40010000

08006220 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006220:	b480      	push	{r7}
 8006222:	b087      	sub	sp, #28
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a1b      	ldr	r3, [r3, #32]
 800622e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a1b      	ldr	r3, [r3, #32]
 800623a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	69db      	ldr	r3, [r3, #28]
 8006246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800624e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006256:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	021b      	lsls	r3, r3, #8
 800625e:	68fa      	ldr	r2, [r7, #12]
 8006260:	4313      	orrs	r3, r2
 8006262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800626a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	031b      	lsls	r3, r3, #12
 8006272:	693a      	ldr	r2, [r7, #16]
 8006274:	4313      	orrs	r3, r2
 8006276:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	4a10      	ldr	r2, [pc, #64]	; (80062bc <TIM_OC4_SetConfig+0x9c>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d109      	bne.n	8006294 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006286:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	695b      	ldr	r3, [r3, #20]
 800628c:	019b      	lsls	r3, r3, #6
 800628e:	697a      	ldr	r2, [r7, #20]
 8006290:	4313      	orrs	r3, r2
 8006292:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	697a      	ldr	r2, [r7, #20]
 8006298:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	68fa      	ldr	r2, [r7, #12]
 800629e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	685a      	ldr	r2, [r3, #4]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	693a      	ldr	r2, [r7, #16]
 80062ac:	621a      	str	r2, [r3, #32]
}
 80062ae:	bf00      	nop
 80062b0:	371c      	adds	r7, #28
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr
 80062ba:	bf00      	nop
 80062bc:	40010000 	.word	0x40010000

080062c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b087      	sub	sp, #28
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	6a1b      	ldr	r3, [r3, #32]
 80062d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	6a1b      	ldr	r3, [r3, #32]
 80062d6:	f023 0201 	bic.w	r2, r3, #1
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	699b      	ldr	r3, [r3, #24]
 80062e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	011b      	lsls	r3, r3, #4
 80062f0:	693a      	ldr	r2, [r7, #16]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	f023 030a 	bic.w	r3, r3, #10
 80062fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80062fe:	697a      	ldr	r2, [r7, #20]
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	4313      	orrs	r3, r2
 8006304:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	693a      	ldr	r2, [r7, #16]
 800630a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	697a      	ldr	r2, [r7, #20]
 8006310:	621a      	str	r2, [r3, #32]
}
 8006312:	bf00      	nop
 8006314:	371c      	adds	r7, #28
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr

0800631e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800631e:	b480      	push	{r7}
 8006320:	b087      	sub	sp, #28
 8006322:	af00      	add	r7, sp, #0
 8006324:	60f8      	str	r0, [r7, #12]
 8006326:	60b9      	str	r1, [r7, #8]
 8006328:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	6a1b      	ldr	r3, [r3, #32]
 800632e:	f023 0210 	bic.w	r2, r3, #16
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	699b      	ldr	r3, [r3, #24]
 800633a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6a1b      	ldr	r3, [r3, #32]
 8006340:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006348:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	031b      	lsls	r3, r3, #12
 800634e:	697a      	ldr	r2, [r7, #20]
 8006350:	4313      	orrs	r3, r2
 8006352:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800635a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	011b      	lsls	r3, r3, #4
 8006360:	693a      	ldr	r2, [r7, #16]
 8006362:	4313      	orrs	r3, r2
 8006364:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	697a      	ldr	r2, [r7, #20]
 800636a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	693a      	ldr	r2, [r7, #16]
 8006370:	621a      	str	r2, [r3, #32]
}
 8006372:	bf00      	nop
 8006374:	371c      	adds	r7, #28
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr

0800637e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800637e:	b480      	push	{r7}
 8006380:	b085      	sub	sp, #20
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
 8006386:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006394:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006396:	683a      	ldr	r2, [r7, #0]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	4313      	orrs	r3, r2
 800639c:	f043 0307 	orr.w	r3, r3, #7
 80063a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	68fa      	ldr	r2, [r7, #12]
 80063a6:	609a      	str	r2, [r3, #8]
}
 80063a8:	bf00      	nop
 80063aa:	3714      	adds	r7, #20
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b087      	sub	sp, #28
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	60b9      	str	r1, [r7, #8]
 80063be:	607a      	str	r2, [r7, #4]
 80063c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	021a      	lsls	r2, r3, #8
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	431a      	orrs	r2, r3
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	4313      	orrs	r3, r2
 80063dc:	697a      	ldr	r2, [r7, #20]
 80063de:	4313      	orrs	r3, r2
 80063e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	697a      	ldr	r2, [r7, #20]
 80063e6:	609a      	str	r2, [r3, #8]
}
 80063e8:	bf00      	nop
 80063ea:	371c      	adds	r7, #28
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr

080063f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b087      	sub	sp, #28
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	60b9      	str	r1, [r7, #8]
 80063fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	f003 031f 	and.w	r3, r3, #31
 8006406:	2201      	movs	r2, #1
 8006408:	fa02 f303 	lsl.w	r3, r2, r3
 800640c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	6a1a      	ldr	r2, [r3, #32]
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	43db      	mvns	r3, r3
 8006416:	401a      	ands	r2, r3
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6a1a      	ldr	r2, [r3, #32]
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	f003 031f 	and.w	r3, r3, #31
 8006426:	6879      	ldr	r1, [r7, #4]
 8006428:	fa01 f303 	lsl.w	r3, r1, r3
 800642c:	431a      	orrs	r2, r3
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	621a      	str	r2, [r3, #32]
}
 8006432:	bf00      	nop
 8006434:	371c      	adds	r7, #28
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr
	...

08006440 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006440:	b480      	push	{r7}
 8006442:	b085      	sub	sp, #20
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006450:	2b01      	cmp	r3, #1
 8006452:	d101      	bne.n	8006458 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006454:	2302      	movs	r3, #2
 8006456:	e050      	b.n	80064fa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2201      	movs	r2, #1
 800645c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2202      	movs	r2, #2
 8006464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800647e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	68fa      	ldr	r2, [r7, #12]
 8006486:	4313      	orrs	r3, r2
 8006488:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	68fa      	ldr	r2, [r7, #12]
 8006490:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a1c      	ldr	r2, [pc, #112]	; (8006508 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d018      	beq.n	80064ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064a4:	d013      	beq.n	80064ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a18      	ldr	r2, [pc, #96]	; (800650c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d00e      	beq.n	80064ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a16      	ldr	r2, [pc, #88]	; (8006510 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d009      	beq.n	80064ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a15      	ldr	r2, [pc, #84]	; (8006514 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d004      	beq.n	80064ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a13      	ldr	r2, [pc, #76]	; (8006518 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d10c      	bne.n	80064e8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	68ba      	ldr	r2, [r7, #8]
 80064dc:	4313      	orrs	r3, r2
 80064de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	68ba      	ldr	r2, [r7, #8]
 80064e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2200      	movs	r2, #0
 80064f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064f8:	2300      	movs	r3, #0
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3714      	adds	r7, #20
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr
 8006506:	bf00      	nop
 8006508:	40010000 	.word	0x40010000
 800650c:	40000400 	.word	0x40000400
 8006510:	40000800 	.word	0x40000800
 8006514:	40000c00 	.word	0x40000c00
 8006518:	40014000 	.word	0x40014000

0800651c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b082      	sub	sp, #8
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d101      	bne.n	800652e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	e03f      	b.n	80065ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006534:	b2db      	uxtb	r3, r3
 8006536:	2b00      	cmp	r3, #0
 8006538:	d106      	bne.n	8006548 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f7fc f892 	bl	800266c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2224      	movs	r2, #36	; 0x24
 800654c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	68da      	ldr	r2, [r3, #12]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800655e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f000 fddb 	bl	800711c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	691a      	ldr	r2, [r3, #16]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006574:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	695a      	ldr	r2, [r3, #20]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006584:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	68da      	ldr	r2, [r3, #12]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006594:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2200      	movs	r2, #0
 800659a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2220      	movs	r2, #32
 80065a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2220      	movs	r2, #32
 80065a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80065ac:	2300      	movs	r3, #0
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3708      	adds	r7, #8
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}

080065b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065b6:	b580      	push	{r7, lr}
 80065b8:	b08a      	sub	sp, #40	; 0x28
 80065ba:	af02      	add	r7, sp, #8
 80065bc:	60f8      	str	r0, [r7, #12]
 80065be:	60b9      	str	r1, [r7, #8]
 80065c0:	603b      	str	r3, [r7, #0]
 80065c2:	4613      	mov	r3, r2
 80065c4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80065c6:	2300      	movs	r3, #0
 80065c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	2b20      	cmp	r3, #32
 80065d4:	d17c      	bne.n	80066d0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d002      	beq.n	80065e2 <HAL_UART_Transmit+0x2c>
 80065dc:	88fb      	ldrh	r3, [r7, #6]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d101      	bne.n	80065e6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	e075      	b.n	80066d2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d101      	bne.n	80065f4 <HAL_UART_Transmit+0x3e>
 80065f0:	2302      	movs	r3, #2
 80065f2:	e06e      	b.n	80066d2 <HAL_UART_Transmit+0x11c>
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2200      	movs	r2, #0
 8006600:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2221      	movs	r2, #33	; 0x21
 8006606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800660a:	f7fc fa4b 	bl	8002aa4 <HAL_GetTick>
 800660e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	88fa      	ldrh	r2, [r7, #6]
 8006614:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	88fa      	ldrh	r2, [r7, #6]
 800661a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006624:	d108      	bne.n	8006638 <HAL_UART_Transmit+0x82>
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	691b      	ldr	r3, [r3, #16]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d104      	bne.n	8006638 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800662e:	2300      	movs	r3, #0
 8006630:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	61bb      	str	r3, [r7, #24]
 8006636:	e003      	b.n	8006640 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800663c:	2300      	movs	r3, #0
 800663e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2200      	movs	r2, #0
 8006644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006648:	e02a      	b.n	80066a0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	9300      	str	r3, [sp, #0]
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	2200      	movs	r2, #0
 8006652:	2180      	movs	r1, #128	; 0x80
 8006654:	68f8      	ldr	r0, [r7, #12]
 8006656:	f000 fb1f 	bl	8006c98 <UART_WaitOnFlagUntilTimeout>
 800665a:	4603      	mov	r3, r0
 800665c:	2b00      	cmp	r3, #0
 800665e:	d001      	beq.n	8006664 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006660:	2303      	movs	r3, #3
 8006662:	e036      	b.n	80066d2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006664:	69fb      	ldr	r3, [r7, #28]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d10b      	bne.n	8006682 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800666a:	69bb      	ldr	r3, [r7, #24]
 800666c:	881b      	ldrh	r3, [r3, #0]
 800666e:	461a      	mov	r2, r3
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006678:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800667a:	69bb      	ldr	r3, [r7, #24]
 800667c:	3302      	adds	r3, #2
 800667e:	61bb      	str	r3, [r7, #24]
 8006680:	e007      	b.n	8006692 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006682:	69fb      	ldr	r3, [r7, #28]
 8006684:	781a      	ldrb	r2, [r3, #0]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	3301      	adds	r3, #1
 8006690:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006696:	b29b      	uxth	r3, r3
 8006698:	3b01      	subs	r3, #1
 800669a:	b29a      	uxth	r2, r3
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d1cf      	bne.n	800664a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	9300      	str	r3, [sp, #0]
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	2200      	movs	r2, #0
 80066b2:	2140      	movs	r1, #64	; 0x40
 80066b4:	68f8      	ldr	r0, [r7, #12]
 80066b6:	f000 faef 	bl	8006c98 <UART_WaitOnFlagUntilTimeout>
 80066ba:	4603      	mov	r3, r0
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d001      	beq.n	80066c4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80066c0:	2303      	movs	r3, #3
 80066c2:	e006      	b.n	80066d2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2220      	movs	r2, #32
 80066c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80066cc:	2300      	movs	r3, #0
 80066ce:	e000      	b.n	80066d2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80066d0:	2302      	movs	r3, #2
  }
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3720      	adds	r7, #32
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}

080066da <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80066da:	b580      	push	{r7, lr}
 80066dc:	b084      	sub	sp, #16
 80066de:	af00      	add	r7, sp, #0
 80066e0:	60f8      	str	r0, [r7, #12]
 80066e2:	60b9      	str	r1, [r7, #8]
 80066e4:	4613      	mov	r3, r2
 80066e6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	2b20      	cmp	r3, #32
 80066f2:	d11d      	bne.n	8006730 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d002      	beq.n	8006700 <HAL_UART_Receive_IT+0x26>
 80066fa:	88fb      	ldrh	r3, [r7, #6]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d101      	bne.n	8006704 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	e016      	b.n	8006732 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800670a:	2b01      	cmp	r3, #1
 800670c:	d101      	bne.n	8006712 <HAL_UART_Receive_IT+0x38>
 800670e:	2302      	movs	r3, #2
 8006710:	e00f      	b.n	8006732 <HAL_UART_Receive_IT+0x58>
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2201      	movs	r2, #1
 8006716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2200      	movs	r2, #0
 800671e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006720:	88fb      	ldrh	r3, [r7, #6]
 8006722:	461a      	mov	r2, r3
 8006724:	68b9      	ldr	r1, [r7, #8]
 8006726:	68f8      	ldr	r0, [r7, #12]
 8006728:	f000 fb24 	bl	8006d74 <UART_Start_Receive_IT>
 800672c:	4603      	mov	r3, r0
 800672e:	e000      	b.n	8006732 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006730:	2302      	movs	r3, #2
  }
}
 8006732:	4618      	mov	r0, r3
 8006734:	3710      	adds	r7, #16
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
	...

0800673c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b0ba      	sub	sp, #232	; 0xe8
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	68db      	ldr	r3, [r3, #12]
 8006754:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	695b      	ldr	r3, [r3, #20]
 800675e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006762:	2300      	movs	r3, #0
 8006764:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006768:	2300      	movs	r3, #0
 800676a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800676e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006772:	f003 030f 	and.w	r3, r3, #15
 8006776:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800677a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800677e:	2b00      	cmp	r3, #0
 8006780:	d10f      	bne.n	80067a2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006786:	f003 0320 	and.w	r3, r3, #32
 800678a:	2b00      	cmp	r3, #0
 800678c:	d009      	beq.n	80067a2 <HAL_UART_IRQHandler+0x66>
 800678e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006792:	f003 0320 	and.w	r3, r3, #32
 8006796:	2b00      	cmp	r3, #0
 8006798:	d003      	beq.n	80067a2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 fc03 	bl	8006fa6 <UART_Receive_IT>
      return;
 80067a0:	e256      	b.n	8006c50 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80067a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	f000 80de 	beq.w	8006968 <HAL_UART_IRQHandler+0x22c>
 80067ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067b0:	f003 0301 	and.w	r3, r3, #1
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d106      	bne.n	80067c6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80067b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067bc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	f000 80d1 	beq.w	8006968 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80067c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067ca:	f003 0301 	and.w	r3, r3, #1
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d00b      	beq.n	80067ea <HAL_UART_IRQHandler+0xae>
 80067d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d005      	beq.n	80067ea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e2:	f043 0201 	orr.w	r2, r3, #1
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80067ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067ee:	f003 0304 	and.w	r3, r3, #4
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d00b      	beq.n	800680e <HAL_UART_IRQHandler+0xd2>
 80067f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067fa:	f003 0301 	and.w	r3, r3, #1
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d005      	beq.n	800680e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006806:	f043 0202 	orr.w	r2, r3, #2
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800680e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006812:	f003 0302 	and.w	r3, r3, #2
 8006816:	2b00      	cmp	r3, #0
 8006818:	d00b      	beq.n	8006832 <HAL_UART_IRQHandler+0xf6>
 800681a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800681e:	f003 0301 	and.w	r3, r3, #1
 8006822:	2b00      	cmp	r3, #0
 8006824:	d005      	beq.n	8006832 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800682a:	f043 0204 	orr.w	r2, r3, #4
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006836:	f003 0308 	and.w	r3, r3, #8
 800683a:	2b00      	cmp	r3, #0
 800683c:	d011      	beq.n	8006862 <HAL_UART_IRQHandler+0x126>
 800683e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006842:	f003 0320 	and.w	r3, r3, #32
 8006846:	2b00      	cmp	r3, #0
 8006848:	d105      	bne.n	8006856 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800684a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800684e:	f003 0301 	and.w	r3, r3, #1
 8006852:	2b00      	cmp	r3, #0
 8006854:	d005      	beq.n	8006862 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800685a:	f043 0208 	orr.w	r2, r3, #8
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006866:	2b00      	cmp	r3, #0
 8006868:	f000 81ed 	beq.w	8006c46 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800686c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006870:	f003 0320 	and.w	r3, r3, #32
 8006874:	2b00      	cmp	r3, #0
 8006876:	d008      	beq.n	800688a <HAL_UART_IRQHandler+0x14e>
 8006878:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800687c:	f003 0320 	and.w	r3, r3, #32
 8006880:	2b00      	cmp	r3, #0
 8006882:	d002      	beq.n	800688a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f000 fb8e 	bl	8006fa6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	695b      	ldr	r3, [r3, #20]
 8006890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006894:	2b40      	cmp	r3, #64	; 0x40
 8006896:	bf0c      	ite	eq
 8006898:	2301      	moveq	r3, #1
 800689a:	2300      	movne	r3, #0
 800689c:	b2db      	uxtb	r3, r3
 800689e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a6:	f003 0308 	and.w	r3, r3, #8
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d103      	bne.n	80068b6 <HAL_UART_IRQHandler+0x17a>
 80068ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d04f      	beq.n	8006956 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 fa96 	bl	8006de8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	695b      	ldr	r3, [r3, #20]
 80068c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068c6:	2b40      	cmp	r3, #64	; 0x40
 80068c8:	d141      	bne.n	800694e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	3314      	adds	r3, #20
 80068d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80068d8:	e853 3f00 	ldrex	r3, [r3]
 80068dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80068e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80068e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	3314      	adds	r3, #20
 80068f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80068f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80068fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006902:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006906:	e841 2300 	strex	r3, r2, [r1]
 800690a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800690e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006912:	2b00      	cmp	r3, #0
 8006914:	d1d9      	bne.n	80068ca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800691a:	2b00      	cmp	r3, #0
 800691c:	d013      	beq.n	8006946 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006922:	4a7d      	ldr	r2, [pc, #500]	; (8006b18 <HAL_UART_IRQHandler+0x3dc>)
 8006924:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800692a:	4618      	mov	r0, r3
 800692c:	f7fc ff74 	bl	8003818 <HAL_DMA_Abort_IT>
 8006930:	4603      	mov	r3, r0
 8006932:	2b00      	cmp	r3, #0
 8006934:	d016      	beq.n	8006964 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800693a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006940:	4610      	mov	r0, r2
 8006942:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006944:	e00e      	b.n	8006964 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 f990 	bl	8006c6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800694c:	e00a      	b.n	8006964 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 f98c 	bl	8006c6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006954:	e006      	b.n	8006964 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 f988 	bl	8006c6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006962:	e170      	b.n	8006c46 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006964:	bf00      	nop
    return;
 8006966:	e16e      	b.n	8006c46 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800696c:	2b01      	cmp	r3, #1
 800696e:	f040 814a 	bne.w	8006c06 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006976:	f003 0310 	and.w	r3, r3, #16
 800697a:	2b00      	cmp	r3, #0
 800697c:	f000 8143 	beq.w	8006c06 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006980:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006984:	f003 0310 	and.w	r3, r3, #16
 8006988:	2b00      	cmp	r3, #0
 800698a:	f000 813c 	beq.w	8006c06 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800698e:	2300      	movs	r3, #0
 8006990:	60bb      	str	r3, [r7, #8]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	60bb      	str	r3, [r7, #8]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	60bb      	str	r3, [r7, #8]
 80069a2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	695b      	ldr	r3, [r3, #20]
 80069aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ae:	2b40      	cmp	r3, #64	; 0x40
 80069b0:	f040 80b4 	bne.w	8006b1c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80069c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	f000 8140 	beq.w	8006c4a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80069ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80069d2:	429a      	cmp	r2, r3
 80069d4:	f080 8139 	bcs.w	8006c4a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80069de:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e4:	69db      	ldr	r3, [r3, #28]
 80069e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069ea:	f000 8088 	beq.w	8006afe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	330c      	adds	r3, #12
 80069f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80069fc:	e853 3f00 	ldrex	r3, [r3]
 8006a00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006a04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006a08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	330c      	adds	r3, #12
 8006a16:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006a1a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006a1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a22:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006a26:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006a2a:	e841 2300 	strex	r3, r2, [r1]
 8006a2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006a32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d1d9      	bne.n	80069ee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	3314      	adds	r3, #20
 8006a40:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a44:	e853 3f00 	ldrex	r3, [r3]
 8006a48:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006a4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a4c:	f023 0301 	bic.w	r3, r3, #1
 8006a50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	3314      	adds	r3, #20
 8006a5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006a5e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006a62:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a64:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006a66:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006a6a:	e841 2300 	strex	r3, r2, [r1]
 8006a6e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006a70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d1e1      	bne.n	8006a3a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	3314      	adds	r3, #20
 8006a7c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a80:	e853 3f00 	ldrex	r3, [r3]
 8006a84:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006a86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	3314      	adds	r3, #20
 8006a96:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006a9a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006a9c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a9e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006aa0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006aa2:	e841 2300 	strex	r3, r2, [r1]
 8006aa6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006aa8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d1e3      	bne.n	8006a76 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2220      	movs	r2, #32
 8006ab2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	330c      	adds	r3, #12
 8006ac2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ac6:	e853 3f00 	ldrex	r3, [r3]
 8006aca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006acc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ace:	f023 0310 	bic.w	r3, r3, #16
 8006ad2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	330c      	adds	r3, #12
 8006adc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006ae0:	65ba      	str	r2, [r7, #88]	; 0x58
 8006ae2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006ae6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ae8:	e841 2300 	strex	r3, r2, [r1]
 8006aec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006aee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d1e3      	bne.n	8006abc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af8:	4618      	mov	r0, r3
 8006afa:	f7fc fe1d 	bl	8003738 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	1ad3      	subs	r3, r2, r3
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 f8b6 	bl	8006c80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006b14:	e099      	b.n	8006c4a <HAL_UART_IRQHandler+0x50e>
 8006b16:	bf00      	nop
 8006b18:	08006eaf 	.word	0x08006eaf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	1ad3      	subs	r3, r2, r3
 8006b28:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	f000 808b 	beq.w	8006c4e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006b38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	f000 8086 	beq.w	8006c4e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	330c      	adds	r3, #12
 8006b48:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b4c:	e853 3f00 	ldrex	r3, [r3]
 8006b50:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b58:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	330c      	adds	r3, #12
 8006b62:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006b66:	647a      	str	r2, [r7, #68]	; 0x44
 8006b68:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b6a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006b6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b6e:	e841 2300 	strex	r3, r2, [r1]
 8006b72:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006b74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d1e3      	bne.n	8006b42 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	3314      	adds	r3, #20
 8006b80:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b84:	e853 3f00 	ldrex	r3, [r3]
 8006b88:	623b      	str	r3, [r7, #32]
   return(result);
 8006b8a:	6a3b      	ldr	r3, [r7, #32]
 8006b8c:	f023 0301 	bic.w	r3, r3, #1
 8006b90:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	3314      	adds	r3, #20
 8006b9a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006b9e:	633a      	str	r2, [r7, #48]	; 0x30
 8006ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ba4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ba6:	e841 2300 	strex	r3, r2, [r1]
 8006baa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d1e3      	bne.n	8006b7a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2220      	movs	r2, #32
 8006bb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	330c      	adds	r3, #12
 8006bc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	e853 3f00 	ldrex	r3, [r3]
 8006bce:	60fb      	str	r3, [r7, #12]
   return(result);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f023 0310 	bic.w	r3, r3, #16
 8006bd6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	330c      	adds	r3, #12
 8006be0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006be4:	61fa      	str	r2, [r7, #28]
 8006be6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be8:	69b9      	ldr	r1, [r7, #24]
 8006bea:	69fa      	ldr	r2, [r7, #28]
 8006bec:	e841 2300 	strex	r3, r2, [r1]
 8006bf0:	617b      	str	r3, [r7, #20]
   return(result);
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d1e3      	bne.n	8006bc0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006bf8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006bfc:	4619      	mov	r1, r3
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 f83e 	bl	8006c80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c04:	e023      	b.n	8006c4e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d009      	beq.n	8006c26 <HAL_UART_IRQHandler+0x4ea>
 8006c12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d003      	beq.n	8006c26 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f000 f959 	bl	8006ed6 <UART_Transmit_IT>
    return;
 8006c24:	e014      	b.n	8006c50 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d00e      	beq.n	8006c50 <HAL_UART_IRQHandler+0x514>
 8006c32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d008      	beq.n	8006c50 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 f999 	bl	8006f76 <UART_EndTransmit_IT>
    return;
 8006c44:	e004      	b.n	8006c50 <HAL_UART_IRQHandler+0x514>
    return;
 8006c46:	bf00      	nop
 8006c48:	e002      	b.n	8006c50 <HAL_UART_IRQHandler+0x514>
      return;
 8006c4a:	bf00      	nop
 8006c4c:	e000      	b.n	8006c50 <HAL_UART_IRQHandler+0x514>
      return;
 8006c4e:	bf00      	nop
  }
}
 8006c50:	37e8      	adds	r7, #232	; 0xe8
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
 8006c56:	bf00      	nop

08006c58 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b083      	sub	sp, #12
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006c60:	bf00      	nop
 8006c62:	370c      	adds	r7, #12
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr

08006c6c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006c74:	bf00      	nop
 8006c76:	370c      	adds	r7, #12
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr

08006c80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b083      	sub	sp, #12
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	460b      	mov	r3, r1
 8006c8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006c8c:	bf00      	nop
 8006c8e:	370c      	adds	r7, #12
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b090      	sub	sp, #64	; 0x40
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	60b9      	str	r1, [r7, #8]
 8006ca2:	603b      	str	r3, [r7, #0]
 8006ca4:	4613      	mov	r3, r2
 8006ca6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ca8:	e050      	b.n	8006d4c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006caa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cb0:	d04c      	beq.n	8006d4c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006cb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d007      	beq.n	8006cc8 <UART_WaitOnFlagUntilTimeout+0x30>
 8006cb8:	f7fb fef4 	bl	8002aa4 <HAL_GetTick>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	1ad3      	subs	r3, r2, r3
 8006cc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d241      	bcs.n	8006d4c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	330c      	adds	r3, #12
 8006cce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd2:	e853 3f00 	ldrex	r3, [r3]
 8006cd6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cda:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006cde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	330c      	adds	r3, #12
 8006ce6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006ce8:	637a      	str	r2, [r7, #52]	; 0x34
 8006cea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006cee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006cf0:	e841 2300 	strex	r3, r2, [r1]
 8006cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d1e5      	bne.n	8006cc8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	3314      	adds	r3, #20
 8006d02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	e853 3f00 	ldrex	r3, [r3]
 8006d0a:	613b      	str	r3, [r7, #16]
   return(result);
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	f023 0301 	bic.w	r3, r3, #1
 8006d12:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	3314      	adds	r3, #20
 8006d1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d1c:	623a      	str	r2, [r7, #32]
 8006d1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d20:	69f9      	ldr	r1, [r7, #28]
 8006d22:	6a3a      	ldr	r2, [r7, #32]
 8006d24:	e841 2300 	strex	r3, r2, [r1]
 8006d28:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d2a:	69bb      	ldr	r3, [r7, #24]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d1e5      	bne.n	8006cfc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2220      	movs	r2, #32
 8006d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2220      	movs	r2, #32
 8006d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2200      	movs	r2, #0
 8006d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006d48:	2303      	movs	r3, #3
 8006d4a:	e00f      	b.n	8006d6c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	4013      	ands	r3, r2
 8006d56:	68ba      	ldr	r2, [r7, #8]
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	bf0c      	ite	eq
 8006d5c:	2301      	moveq	r3, #1
 8006d5e:	2300      	movne	r3, #0
 8006d60:	b2db      	uxtb	r3, r3
 8006d62:	461a      	mov	r2, r3
 8006d64:	79fb      	ldrb	r3, [r7, #7]
 8006d66:	429a      	cmp	r2, r3
 8006d68:	d09f      	beq.n	8006caa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006d6a:	2300      	movs	r3, #0
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3740      	adds	r7, #64	; 0x40
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b085      	sub	sp, #20
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	60f8      	str	r0, [r7, #12]
 8006d7c:	60b9      	str	r1, [r7, #8]
 8006d7e:	4613      	mov	r3, r2
 8006d80:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	68ba      	ldr	r2, [r7, #8]
 8006d86:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	88fa      	ldrh	r2, [r7, #6]
 8006d8c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	88fa      	ldrh	r2, [r7, #6]
 8006d92:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2200      	movs	r2, #0
 8006d98:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2222      	movs	r2, #34	; 0x22
 8006d9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2200      	movs	r2, #0
 8006da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	68da      	ldr	r2, [r3, #12]
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006db8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	695a      	ldr	r2, [r3, #20]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f042 0201 	orr.w	r2, r2, #1
 8006dc8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	68da      	ldr	r2, [r3, #12]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f042 0220 	orr.w	r2, r2, #32
 8006dd8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006dda:	2300      	movs	r3, #0
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3714      	adds	r7, #20
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr

08006de8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b095      	sub	sp, #84	; 0x54
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	330c      	adds	r3, #12
 8006df6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dfa:	e853 3f00 	ldrex	r3, [r3]
 8006dfe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e02:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	330c      	adds	r3, #12
 8006e0e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e10:	643a      	str	r2, [r7, #64]	; 0x40
 8006e12:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e14:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006e16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e18:	e841 2300 	strex	r3, r2, [r1]
 8006e1c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d1e5      	bne.n	8006df0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	3314      	adds	r3, #20
 8006e2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e2c:	6a3b      	ldr	r3, [r7, #32]
 8006e2e:	e853 3f00 	ldrex	r3, [r3]
 8006e32:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e34:	69fb      	ldr	r3, [r7, #28]
 8006e36:	f023 0301 	bic.w	r3, r3, #1
 8006e3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	3314      	adds	r3, #20
 8006e42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e44:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e4c:	e841 2300 	strex	r3, r2, [r1]
 8006e50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d1e5      	bne.n	8006e24 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d119      	bne.n	8006e94 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	330c      	adds	r3, #12
 8006e66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	e853 3f00 	ldrex	r3, [r3]
 8006e6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	f023 0310 	bic.w	r3, r3, #16
 8006e76:	647b      	str	r3, [r7, #68]	; 0x44
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	330c      	adds	r3, #12
 8006e7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e80:	61ba      	str	r2, [r7, #24]
 8006e82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e84:	6979      	ldr	r1, [r7, #20]
 8006e86:	69ba      	ldr	r2, [r7, #24]
 8006e88:	e841 2300 	strex	r3, r2, [r1]
 8006e8c:	613b      	str	r3, [r7, #16]
   return(result);
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d1e5      	bne.n	8006e60 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2220      	movs	r2, #32
 8006e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006ea2:	bf00      	nop
 8006ea4:	3754      	adds	r7, #84	; 0x54
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eac:	4770      	bx	lr

08006eae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006eae:	b580      	push	{r7, lr}
 8006eb0:	b084      	sub	sp, #16
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ec8:	68f8      	ldr	r0, [r7, #12]
 8006eca:	f7ff fecf 	bl	8006c6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ece:	bf00      	nop
 8006ed0:	3710      	adds	r7, #16
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}

08006ed6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006ed6:	b480      	push	{r7}
 8006ed8:	b085      	sub	sp, #20
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	2b21      	cmp	r3, #33	; 0x21
 8006ee8:	d13e      	bne.n	8006f68 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ef2:	d114      	bne.n	8006f1e <UART_Transmit_IT+0x48>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	691b      	ldr	r3, [r3, #16]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d110      	bne.n	8006f1e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6a1b      	ldr	r3, [r3, #32]
 8006f00:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	881b      	ldrh	r3, [r3, #0]
 8006f06:	461a      	mov	r2, r3
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f10:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6a1b      	ldr	r3, [r3, #32]
 8006f16:	1c9a      	adds	r2, r3, #2
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	621a      	str	r2, [r3, #32]
 8006f1c:	e008      	b.n	8006f30 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6a1b      	ldr	r3, [r3, #32]
 8006f22:	1c59      	adds	r1, r3, #1
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	6211      	str	r1, [r2, #32]
 8006f28:	781a      	ldrb	r2, [r3, #0]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	3b01      	subs	r3, #1
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	4619      	mov	r1, r3
 8006f3e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d10f      	bne.n	8006f64 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	68da      	ldr	r2, [r3, #12]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f52:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	68da      	ldr	r2, [r3, #12]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f62:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006f64:	2300      	movs	r3, #0
 8006f66:	e000      	b.n	8006f6a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006f68:	2302      	movs	r3, #2
  }
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3714      	adds	r7, #20
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr

08006f76 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f76:	b580      	push	{r7, lr}
 8006f78:	b082      	sub	sp, #8
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	68da      	ldr	r2, [r3, #12]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f8c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2220      	movs	r2, #32
 8006f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f7ff fe5e 	bl	8006c58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006f9c:	2300      	movs	r3, #0
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3708      	adds	r7, #8
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}

08006fa6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006fa6:	b580      	push	{r7, lr}
 8006fa8:	b08c      	sub	sp, #48	; 0x30
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006fb4:	b2db      	uxtb	r3, r3
 8006fb6:	2b22      	cmp	r3, #34	; 0x22
 8006fb8:	f040 80ab 	bne.w	8007112 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fc4:	d117      	bne.n	8006ff6 <UART_Receive_IT+0x50>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	691b      	ldr	r3, [r3, #16]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d113      	bne.n	8006ff6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fe4:	b29a      	uxth	r2, r3
 8006fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fee:	1c9a      	adds	r2, r3, #2
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	629a      	str	r2, [r3, #40]	; 0x28
 8006ff4:	e026      	b.n	8007044 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007008:	d007      	beq.n	800701a <UART_Receive_IT+0x74>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d10a      	bne.n	8007028 <UART_Receive_IT+0x82>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	691b      	ldr	r3, [r3, #16]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d106      	bne.n	8007028 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	b2da      	uxtb	r2, r3
 8007022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007024:	701a      	strb	r2, [r3, #0]
 8007026:	e008      	b.n	800703a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	b2db      	uxtb	r3, r3
 8007030:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007034:	b2da      	uxtb	r2, r3
 8007036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007038:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800703e:	1c5a      	adds	r2, r3, #1
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007048:	b29b      	uxth	r3, r3
 800704a:	3b01      	subs	r3, #1
 800704c:	b29b      	uxth	r3, r3
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	4619      	mov	r1, r3
 8007052:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007054:	2b00      	cmp	r3, #0
 8007056:	d15a      	bne.n	800710e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	68da      	ldr	r2, [r3, #12]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f022 0220 	bic.w	r2, r2, #32
 8007066:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	68da      	ldr	r2, [r3, #12]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007076:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	695a      	ldr	r2, [r3, #20]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f022 0201 	bic.w	r2, r2, #1
 8007086:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2220      	movs	r2, #32
 800708c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007094:	2b01      	cmp	r3, #1
 8007096:	d135      	bne.n	8007104 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2200      	movs	r2, #0
 800709c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	330c      	adds	r3, #12
 80070a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	e853 3f00 	ldrex	r3, [r3]
 80070ac:	613b      	str	r3, [r7, #16]
   return(result);
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	f023 0310 	bic.w	r3, r3, #16
 80070b4:	627b      	str	r3, [r7, #36]	; 0x24
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	330c      	adds	r3, #12
 80070bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070be:	623a      	str	r2, [r7, #32]
 80070c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c2:	69f9      	ldr	r1, [r7, #28]
 80070c4:	6a3a      	ldr	r2, [r7, #32]
 80070c6:	e841 2300 	strex	r3, r2, [r1]
 80070ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80070cc:	69bb      	ldr	r3, [r7, #24]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d1e5      	bne.n	800709e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f003 0310 	and.w	r3, r3, #16
 80070dc:	2b10      	cmp	r3, #16
 80070de:	d10a      	bne.n	80070f6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80070e0:	2300      	movs	r3, #0
 80070e2:	60fb      	str	r3, [r7, #12]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	60fb      	str	r3, [r7, #12]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	60fb      	str	r3, [r7, #12]
 80070f4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80070fa:	4619      	mov	r1, r3
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f7ff fdbf 	bl	8006c80 <HAL_UARTEx_RxEventCallback>
 8007102:	e002      	b.n	800710a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f7fa fba7 	bl	8001858 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800710a:	2300      	movs	r3, #0
 800710c:	e002      	b.n	8007114 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800710e:	2300      	movs	r3, #0
 8007110:	e000      	b.n	8007114 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007112:	2302      	movs	r3, #2
  }
}
 8007114:	4618      	mov	r0, r3
 8007116:	3730      	adds	r7, #48	; 0x30
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}

0800711c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800711c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007120:	b09f      	sub	sp, #124	; 0x7c
 8007122:	af00      	add	r7, sp, #0
 8007124:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007126:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	691b      	ldr	r3, [r3, #16]
 800712c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007130:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007132:	68d9      	ldr	r1, [r3, #12]
 8007134:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	ea40 0301 	orr.w	r3, r0, r1
 800713c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800713e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007140:	689a      	ldr	r2, [r3, #8]
 8007142:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007144:	691b      	ldr	r3, [r3, #16]
 8007146:	431a      	orrs	r2, r3
 8007148:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800714a:	695b      	ldr	r3, [r3, #20]
 800714c:	431a      	orrs	r2, r3
 800714e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007150:	69db      	ldr	r3, [r3, #28]
 8007152:	4313      	orrs	r3, r2
 8007154:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007156:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	68db      	ldr	r3, [r3, #12]
 800715c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007160:	f021 010c 	bic.w	r1, r1, #12
 8007164:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800716a:	430b      	orrs	r3, r1
 800716c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800716e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	695b      	ldr	r3, [r3, #20]
 8007174:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007178:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800717a:	6999      	ldr	r1, [r3, #24]
 800717c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	ea40 0301 	orr.w	r3, r0, r1
 8007184:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007186:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	4bc5      	ldr	r3, [pc, #788]	; (80074a0 <UART_SetConfig+0x384>)
 800718c:	429a      	cmp	r2, r3
 800718e:	d004      	beq.n	800719a <UART_SetConfig+0x7e>
 8007190:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	4bc3      	ldr	r3, [pc, #780]	; (80074a4 <UART_SetConfig+0x388>)
 8007196:	429a      	cmp	r2, r3
 8007198:	d103      	bne.n	80071a2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800719a:	f7fe fb8f 	bl	80058bc <HAL_RCC_GetPCLK2Freq>
 800719e:	6778      	str	r0, [r7, #116]	; 0x74
 80071a0:	e002      	b.n	80071a8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80071a2:	f7fe fb77 	bl	8005894 <HAL_RCC_GetPCLK1Freq>
 80071a6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071aa:	69db      	ldr	r3, [r3, #28]
 80071ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071b0:	f040 80b6 	bne.w	8007320 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80071b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071b6:	461c      	mov	r4, r3
 80071b8:	f04f 0500 	mov.w	r5, #0
 80071bc:	4622      	mov	r2, r4
 80071be:	462b      	mov	r3, r5
 80071c0:	1891      	adds	r1, r2, r2
 80071c2:	6439      	str	r1, [r7, #64]	; 0x40
 80071c4:	415b      	adcs	r3, r3
 80071c6:	647b      	str	r3, [r7, #68]	; 0x44
 80071c8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80071cc:	1912      	adds	r2, r2, r4
 80071ce:	eb45 0303 	adc.w	r3, r5, r3
 80071d2:	f04f 0000 	mov.w	r0, #0
 80071d6:	f04f 0100 	mov.w	r1, #0
 80071da:	00d9      	lsls	r1, r3, #3
 80071dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80071e0:	00d0      	lsls	r0, r2, #3
 80071e2:	4602      	mov	r2, r0
 80071e4:	460b      	mov	r3, r1
 80071e6:	1911      	adds	r1, r2, r4
 80071e8:	6639      	str	r1, [r7, #96]	; 0x60
 80071ea:	416b      	adcs	r3, r5
 80071ec:	667b      	str	r3, [r7, #100]	; 0x64
 80071ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	461a      	mov	r2, r3
 80071f4:	f04f 0300 	mov.w	r3, #0
 80071f8:	1891      	adds	r1, r2, r2
 80071fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80071fc:	415b      	adcs	r3, r3
 80071fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007200:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007204:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007208:	f7f9 fb58 	bl	80008bc <__aeabi_uldivmod>
 800720c:	4602      	mov	r2, r0
 800720e:	460b      	mov	r3, r1
 8007210:	4ba5      	ldr	r3, [pc, #660]	; (80074a8 <UART_SetConfig+0x38c>)
 8007212:	fba3 2302 	umull	r2, r3, r3, r2
 8007216:	095b      	lsrs	r3, r3, #5
 8007218:	011e      	lsls	r6, r3, #4
 800721a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800721c:	461c      	mov	r4, r3
 800721e:	f04f 0500 	mov.w	r5, #0
 8007222:	4622      	mov	r2, r4
 8007224:	462b      	mov	r3, r5
 8007226:	1891      	adds	r1, r2, r2
 8007228:	6339      	str	r1, [r7, #48]	; 0x30
 800722a:	415b      	adcs	r3, r3
 800722c:	637b      	str	r3, [r7, #52]	; 0x34
 800722e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007232:	1912      	adds	r2, r2, r4
 8007234:	eb45 0303 	adc.w	r3, r5, r3
 8007238:	f04f 0000 	mov.w	r0, #0
 800723c:	f04f 0100 	mov.w	r1, #0
 8007240:	00d9      	lsls	r1, r3, #3
 8007242:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007246:	00d0      	lsls	r0, r2, #3
 8007248:	4602      	mov	r2, r0
 800724a:	460b      	mov	r3, r1
 800724c:	1911      	adds	r1, r2, r4
 800724e:	65b9      	str	r1, [r7, #88]	; 0x58
 8007250:	416b      	adcs	r3, r5
 8007252:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007254:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	461a      	mov	r2, r3
 800725a:	f04f 0300 	mov.w	r3, #0
 800725e:	1891      	adds	r1, r2, r2
 8007260:	62b9      	str	r1, [r7, #40]	; 0x28
 8007262:	415b      	adcs	r3, r3
 8007264:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007266:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800726a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800726e:	f7f9 fb25 	bl	80008bc <__aeabi_uldivmod>
 8007272:	4602      	mov	r2, r0
 8007274:	460b      	mov	r3, r1
 8007276:	4b8c      	ldr	r3, [pc, #560]	; (80074a8 <UART_SetConfig+0x38c>)
 8007278:	fba3 1302 	umull	r1, r3, r3, r2
 800727c:	095b      	lsrs	r3, r3, #5
 800727e:	2164      	movs	r1, #100	; 0x64
 8007280:	fb01 f303 	mul.w	r3, r1, r3
 8007284:	1ad3      	subs	r3, r2, r3
 8007286:	00db      	lsls	r3, r3, #3
 8007288:	3332      	adds	r3, #50	; 0x32
 800728a:	4a87      	ldr	r2, [pc, #540]	; (80074a8 <UART_SetConfig+0x38c>)
 800728c:	fba2 2303 	umull	r2, r3, r2, r3
 8007290:	095b      	lsrs	r3, r3, #5
 8007292:	005b      	lsls	r3, r3, #1
 8007294:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007298:	441e      	add	r6, r3
 800729a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800729c:	4618      	mov	r0, r3
 800729e:	f04f 0100 	mov.w	r1, #0
 80072a2:	4602      	mov	r2, r0
 80072a4:	460b      	mov	r3, r1
 80072a6:	1894      	adds	r4, r2, r2
 80072a8:	623c      	str	r4, [r7, #32]
 80072aa:	415b      	adcs	r3, r3
 80072ac:	627b      	str	r3, [r7, #36]	; 0x24
 80072ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80072b2:	1812      	adds	r2, r2, r0
 80072b4:	eb41 0303 	adc.w	r3, r1, r3
 80072b8:	f04f 0400 	mov.w	r4, #0
 80072bc:	f04f 0500 	mov.w	r5, #0
 80072c0:	00dd      	lsls	r5, r3, #3
 80072c2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80072c6:	00d4      	lsls	r4, r2, #3
 80072c8:	4622      	mov	r2, r4
 80072ca:	462b      	mov	r3, r5
 80072cc:	1814      	adds	r4, r2, r0
 80072ce:	653c      	str	r4, [r7, #80]	; 0x50
 80072d0:	414b      	adcs	r3, r1
 80072d2:	657b      	str	r3, [r7, #84]	; 0x54
 80072d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	461a      	mov	r2, r3
 80072da:	f04f 0300 	mov.w	r3, #0
 80072de:	1891      	adds	r1, r2, r2
 80072e0:	61b9      	str	r1, [r7, #24]
 80072e2:	415b      	adcs	r3, r3
 80072e4:	61fb      	str	r3, [r7, #28]
 80072e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80072ea:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80072ee:	f7f9 fae5 	bl	80008bc <__aeabi_uldivmod>
 80072f2:	4602      	mov	r2, r0
 80072f4:	460b      	mov	r3, r1
 80072f6:	4b6c      	ldr	r3, [pc, #432]	; (80074a8 <UART_SetConfig+0x38c>)
 80072f8:	fba3 1302 	umull	r1, r3, r3, r2
 80072fc:	095b      	lsrs	r3, r3, #5
 80072fe:	2164      	movs	r1, #100	; 0x64
 8007300:	fb01 f303 	mul.w	r3, r1, r3
 8007304:	1ad3      	subs	r3, r2, r3
 8007306:	00db      	lsls	r3, r3, #3
 8007308:	3332      	adds	r3, #50	; 0x32
 800730a:	4a67      	ldr	r2, [pc, #412]	; (80074a8 <UART_SetConfig+0x38c>)
 800730c:	fba2 2303 	umull	r2, r3, r2, r3
 8007310:	095b      	lsrs	r3, r3, #5
 8007312:	f003 0207 	and.w	r2, r3, #7
 8007316:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4432      	add	r2, r6
 800731c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800731e:	e0b9      	b.n	8007494 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007320:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007322:	461c      	mov	r4, r3
 8007324:	f04f 0500 	mov.w	r5, #0
 8007328:	4622      	mov	r2, r4
 800732a:	462b      	mov	r3, r5
 800732c:	1891      	adds	r1, r2, r2
 800732e:	6139      	str	r1, [r7, #16]
 8007330:	415b      	adcs	r3, r3
 8007332:	617b      	str	r3, [r7, #20]
 8007334:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007338:	1912      	adds	r2, r2, r4
 800733a:	eb45 0303 	adc.w	r3, r5, r3
 800733e:	f04f 0000 	mov.w	r0, #0
 8007342:	f04f 0100 	mov.w	r1, #0
 8007346:	00d9      	lsls	r1, r3, #3
 8007348:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800734c:	00d0      	lsls	r0, r2, #3
 800734e:	4602      	mov	r2, r0
 8007350:	460b      	mov	r3, r1
 8007352:	eb12 0804 	adds.w	r8, r2, r4
 8007356:	eb43 0905 	adc.w	r9, r3, r5
 800735a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	4618      	mov	r0, r3
 8007360:	f04f 0100 	mov.w	r1, #0
 8007364:	f04f 0200 	mov.w	r2, #0
 8007368:	f04f 0300 	mov.w	r3, #0
 800736c:	008b      	lsls	r3, r1, #2
 800736e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007372:	0082      	lsls	r2, r0, #2
 8007374:	4640      	mov	r0, r8
 8007376:	4649      	mov	r1, r9
 8007378:	f7f9 faa0 	bl	80008bc <__aeabi_uldivmod>
 800737c:	4602      	mov	r2, r0
 800737e:	460b      	mov	r3, r1
 8007380:	4b49      	ldr	r3, [pc, #292]	; (80074a8 <UART_SetConfig+0x38c>)
 8007382:	fba3 2302 	umull	r2, r3, r3, r2
 8007386:	095b      	lsrs	r3, r3, #5
 8007388:	011e      	lsls	r6, r3, #4
 800738a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800738c:	4618      	mov	r0, r3
 800738e:	f04f 0100 	mov.w	r1, #0
 8007392:	4602      	mov	r2, r0
 8007394:	460b      	mov	r3, r1
 8007396:	1894      	adds	r4, r2, r2
 8007398:	60bc      	str	r4, [r7, #8]
 800739a:	415b      	adcs	r3, r3
 800739c:	60fb      	str	r3, [r7, #12]
 800739e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80073a2:	1812      	adds	r2, r2, r0
 80073a4:	eb41 0303 	adc.w	r3, r1, r3
 80073a8:	f04f 0400 	mov.w	r4, #0
 80073ac:	f04f 0500 	mov.w	r5, #0
 80073b0:	00dd      	lsls	r5, r3, #3
 80073b2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80073b6:	00d4      	lsls	r4, r2, #3
 80073b8:	4622      	mov	r2, r4
 80073ba:	462b      	mov	r3, r5
 80073bc:	1814      	adds	r4, r2, r0
 80073be:	64bc      	str	r4, [r7, #72]	; 0x48
 80073c0:	414b      	adcs	r3, r1
 80073c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	4618      	mov	r0, r3
 80073ca:	f04f 0100 	mov.w	r1, #0
 80073ce:	f04f 0200 	mov.w	r2, #0
 80073d2:	f04f 0300 	mov.w	r3, #0
 80073d6:	008b      	lsls	r3, r1, #2
 80073d8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80073dc:	0082      	lsls	r2, r0, #2
 80073de:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80073e2:	f7f9 fa6b 	bl	80008bc <__aeabi_uldivmod>
 80073e6:	4602      	mov	r2, r0
 80073e8:	460b      	mov	r3, r1
 80073ea:	4b2f      	ldr	r3, [pc, #188]	; (80074a8 <UART_SetConfig+0x38c>)
 80073ec:	fba3 1302 	umull	r1, r3, r3, r2
 80073f0:	095b      	lsrs	r3, r3, #5
 80073f2:	2164      	movs	r1, #100	; 0x64
 80073f4:	fb01 f303 	mul.w	r3, r1, r3
 80073f8:	1ad3      	subs	r3, r2, r3
 80073fa:	011b      	lsls	r3, r3, #4
 80073fc:	3332      	adds	r3, #50	; 0x32
 80073fe:	4a2a      	ldr	r2, [pc, #168]	; (80074a8 <UART_SetConfig+0x38c>)
 8007400:	fba2 2303 	umull	r2, r3, r2, r3
 8007404:	095b      	lsrs	r3, r3, #5
 8007406:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800740a:	441e      	add	r6, r3
 800740c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800740e:	4618      	mov	r0, r3
 8007410:	f04f 0100 	mov.w	r1, #0
 8007414:	4602      	mov	r2, r0
 8007416:	460b      	mov	r3, r1
 8007418:	1894      	adds	r4, r2, r2
 800741a:	603c      	str	r4, [r7, #0]
 800741c:	415b      	adcs	r3, r3
 800741e:	607b      	str	r3, [r7, #4]
 8007420:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007424:	1812      	adds	r2, r2, r0
 8007426:	eb41 0303 	adc.w	r3, r1, r3
 800742a:	f04f 0400 	mov.w	r4, #0
 800742e:	f04f 0500 	mov.w	r5, #0
 8007432:	00dd      	lsls	r5, r3, #3
 8007434:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007438:	00d4      	lsls	r4, r2, #3
 800743a:	4622      	mov	r2, r4
 800743c:	462b      	mov	r3, r5
 800743e:	eb12 0a00 	adds.w	sl, r2, r0
 8007442:	eb43 0b01 	adc.w	fp, r3, r1
 8007446:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	4618      	mov	r0, r3
 800744c:	f04f 0100 	mov.w	r1, #0
 8007450:	f04f 0200 	mov.w	r2, #0
 8007454:	f04f 0300 	mov.w	r3, #0
 8007458:	008b      	lsls	r3, r1, #2
 800745a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800745e:	0082      	lsls	r2, r0, #2
 8007460:	4650      	mov	r0, sl
 8007462:	4659      	mov	r1, fp
 8007464:	f7f9 fa2a 	bl	80008bc <__aeabi_uldivmod>
 8007468:	4602      	mov	r2, r0
 800746a:	460b      	mov	r3, r1
 800746c:	4b0e      	ldr	r3, [pc, #56]	; (80074a8 <UART_SetConfig+0x38c>)
 800746e:	fba3 1302 	umull	r1, r3, r3, r2
 8007472:	095b      	lsrs	r3, r3, #5
 8007474:	2164      	movs	r1, #100	; 0x64
 8007476:	fb01 f303 	mul.w	r3, r1, r3
 800747a:	1ad3      	subs	r3, r2, r3
 800747c:	011b      	lsls	r3, r3, #4
 800747e:	3332      	adds	r3, #50	; 0x32
 8007480:	4a09      	ldr	r2, [pc, #36]	; (80074a8 <UART_SetConfig+0x38c>)
 8007482:	fba2 2303 	umull	r2, r3, r2, r3
 8007486:	095b      	lsrs	r3, r3, #5
 8007488:	f003 020f 	and.w	r2, r3, #15
 800748c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4432      	add	r2, r6
 8007492:	609a      	str	r2, [r3, #8]
}
 8007494:	bf00      	nop
 8007496:	377c      	adds	r7, #124	; 0x7c
 8007498:	46bd      	mov	sp, r7
 800749a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800749e:	bf00      	nop
 80074a0:	40011000 	.word	0x40011000
 80074a4:	40011400 	.word	0x40011400
 80074a8:	51eb851f 	.word	0x51eb851f

080074ac <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly
extern I2C_HandleTypeDef hi2c3;
#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b086      	sub	sp, #24
 80074b0:	af02      	add	r7, sp, #8
 80074b2:	4603      	mov	r3, r0
 80074b4:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80074b6:	79fb      	ldrb	r3, [r7, #7]
 80074b8:	f023 030f 	bic.w	r3, r3, #15
 80074bc:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80074be:	79fb      	ldrb	r3, [r7, #7]
 80074c0:	011b      	lsls	r3, r3, #4
 80074c2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80074c4:	7bfb      	ldrb	r3, [r7, #15]
 80074c6:	f043 030c 	orr.w	r3, r3, #12
 80074ca:	b2db      	uxtb	r3, r3
 80074cc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80074ce:	7bfb      	ldrb	r3, [r7, #15]
 80074d0:	f043 0308 	orr.w	r3, r3, #8
 80074d4:	b2db      	uxtb	r3, r3
 80074d6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80074d8:	7bbb      	ldrb	r3, [r7, #14]
 80074da:	f043 030c 	orr.w	r3, r3, #12
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80074e2:	7bbb      	ldrb	r3, [r7, #14]
 80074e4:	f043 0308 	orr.w	r3, r3, #8
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80074ec:	f107 0208 	add.w	r2, r7, #8
 80074f0:	2364      	movs	r3, #100	; 0x64
 80074f2:	9300      	str	r3, [sp, #0]
 80074f4:	2304      	movs	r3, #4
 80074f6:	214e      	movs	r1, #78	; 0x4e
 80074f8:	4803      	ldr	r0, [pc, #12]	; (8007508 <lcd_send_cmd+0x5c>)
 80074fa:	f7fc ff13 	bl	8004324 <HAL_I2C_Master_Transmit>
}
 80074fe:	bf00      	nop
 8007500:	3710      	adds	r7, #16
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}
 8007506:	bf00      	nop
 8007508:	20000260 	.word	0x20000260

0800750c <lcd_send_cmd1>:

//====================================
void lcd_send_cmd1 (char cmd1)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b086      	sub	sp, #24
 8007510:	af02      	add	r7, sp, #8
 8007512:	4603      	mov	r3, r0
 8007514:	71fb      	strb	r3, [r7, #7]
  char data_u1, data_l1;
	uint8_t data_t1[4];
	data_u1 = (cmd1&0xf0);
 8007516:	79fb      	ldrb	r3, [r7, #7]
 8007518:	f023 030f 	bic.w	r3, r3, #15
 800751c:	73fb      	strb	r3, [r7, #15]
	data_l1 = ((cmd1<<4)&0xf0);
 800751e:	79fb      	ldrb	r3, [r7, #7]
 8007520:	011b      	lsls	r3, r3, #4
 8007522:	73bb      	strb	r3, [r7, #14]
	data_t1[0] = data_u1|0x0C;  //en=1, rs=0
 8007524:	7bfb      	ldrb	r3, [r7, #15]
 8007526:	f043 030c 	orr.w	r3, r3, #12
 800752a:	b2db      	uxtb	r3, r3
 800752c:	723b      	strb	r3, [r7, #8]
	data_t1[1] = data_u1|0x08;  //en=0, rs=0
 800752e:	7bfb      	ldrb	r3, [r7, #15]
 8007530:	f043 0308 	orr.w	r3, r3, #8
 8007534:	b2db      	uxtb	r3, r3
 8007536:	727b      	strb	r3, [r7, #9]
	data_t1[2] = data_l1|0x0C;  //en=1, rs=0
 8007538:	7bbb      	ldrb	r3, [r7, #14]
 800753a:	f043 030c 	orr.w	r3, r3, #12
 800753e:	b2db      	uxtb	r3, r3
 8007540:	72bb      	strb	r3, [r7, #10]
	data_t1[3] = data_l1|0x08;  //en=0, rs=0
 8007542:	7bbb      	ldrb	r3, [r7, #14]
 8007544:	f043 0308 	orr.w	r3, r3, #8
 8007548:	b2db      	uxtb	r3, r3
 800754a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c3, SLAVE_ADDRESS_LCD,(uint8_t *) data_t1, 4, 100);
 800754c:	f107 0208 	add.w	r2, r7, #8
 8007550:	2364      	movs	r3, #100	; 0x64
 8007552:	9300      	str	r3, [sp, #0]
 8007554:	2304      	movs	r3, #4
 8007556:	214e      	movs	r1, #78	; 0x4e
 8007558:	4803      	ldr	r0, [pc, #12]	; (8007568 <lcd_send_cmd1+0x5c>)
 800755a:	f7fc fee3 	bl	8004324 <HAL_I2C_Master_Transmit>
}
 800755e:	bf00      	nop
 8007560:	3710      	adds	r7, #16
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
 8007566:	bf00      	nop
 8007568:	20000130 	.word	0x20000130

0800756c <lcd_send_data1>:
void lcd_send_data1 (char data1)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b086      	sub	sp, #24
 8007570:	af02      	add	r7, sp, #8
 8007572:	4603      	mov	r3, r0
 8007574:	71fb      	strb	r3, [r7, #7]
	char data_u1, data_l1;
	uint8_t data_t1[4];
	data_u1 = (data1&0xf0);
 8007576:	79fb      	ldrb	r3, [r7, #7]
 8007578:	f023 030f 	bic.w	r3, r3, #15
 800757c:	73fb      	strb	r3, [r7, #15]
	data_l1 = ((data1<<4)&0xf0);
 800757e:	79fb      	ldrb	r3, [r7, #7]
 8007580:	011b      	lsls	r3, r3, #4
 8007582:	73bb      	strb	r3, [r7, #14]
	data_t1[0] = data_u1|0x0D;  //en=1, rs=0
 8007584:	7bfb      	ldrb	r3, [r7, #15]
 8007586:	f043 030d 	orr.w	r3, r3, #13
 800758a:	b2db      	uxtb	r3, r3
 800758c:	723b      	strb	r3, [r7, #8]
	data_t1[1] = data_u1|0x09;  //en=0, rs=0
 800758e:	7bfb      	ldrb	r3, [r7, #15]
 8007590:	f043 0309 	orr.w	r3, r3, #9
 8007594:	b2db      	uxtb	r3, r3
 8007596:	727b      	strb	r3, [r7, #9]
	data_t1[2] = data_l1|0x0D;  //en=1, rs=0
 8007598:	7bbb      	ldrb	r3, [r7, #14]
 800759a:	f043 030d 	orr.w	r3, r3, #13
 800759e:	b2db      	uxtb	r3, r3
 80075a0:	72bb      	strb	r3, [r7, #10]
	data_t1[3] = data_l1|0x09;  //en=0, rs=0
 80075a2:	7bbb      	ldrb	r3, [r7, #14]
 80075a4:	f043 0309 	orr.w	r3, r3, #9
 80075a8:	b2db      	uxtb	r3, r3
 80075aa:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c3, SLAVE_ADDRESS_LCD,(uint8_t *) data_t1, 4, 100);
 80075ac:	f107 0208 	add.w	r2, r7, #8
 80075b0:	2364      	movs	r3, #100	; 0x64
 80075b2:	9300      	str	r3, [sp, #0]
 80075b4:	2304      	movs	r3, #4
 80075b6:	214e      	movs	r1, #78	; 0x4e
 80075b8:	4803      	ldr	r0, [pc, #12]	; (80075c8 <lcd_send_data1+0x5c>)
 80075ba:	f7fc feb3 	bl	8004324 <HAL_I2C_Master_Transmit>
}
 80075be:	bf00      	nop
 80075c0:	3710      	adds	r7, #16
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
 80075c6:	bf00      	nop
 80075c8:	20000130 	.word	0x20000130

080075cc <lcd_put_cur1>:
		lcd_send_data1 (' ');
	}
}

void lcd_put_cur1(int row1, int col1)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	6039      	str	r1, [r7, #0]
    switch (row1)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d003      	beq.n	80075e4 <lcd_put_cur1+0x18>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2b01      	cmp	r3, #1
 80075e0:	d005      	beq.n	80075ee <lcd_put_cur1+0x22>
 80075e2:	e009      	b.n	80075f8 <lcd_put_cur1+0x2c>
    {
        case 0:
            col1 |= 0x80;
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075ea:	603b      	str	r3, [r7, #0]
            break;
 80075ec:	e004      	b.n	80075f8 <lcd_put_cur1+0x2c>
        case 1:
            col1 |= 0xC0;
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80075f4:	603b      	str	r3, [r7, #0]
            break;
 80075f6:	bf00      	nop
    }

    lcd_send_cmd1 (col1);
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	4618      	mov	r0, r3
 80075fe:	f7ff ff85 	bl	800750c <lcd_send_cmd1>
}
 8007602:	bf00      	nop
 8007604:	3708      	adds	r7, #8
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}

0800760a <lcd_init1>:


void lcd_init1 (void)
{
 800760a:	b580      	push	{r7, lr}
 800760c:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 800760e:	2032      	movs	r0, #50	; 0x32
 8007610:	f7fb fa54 	bl	8002abc <HAL_Delay>
	lcd_send_cmd1 (0x30);
 8007614:	2030      	movs	r0, #48	; 0x30
 8007616:	f7ff ff79 	bl	800750c <lcd_send_cmd1>
	HAL_Delay(5);  // wait for >4.1ms
 800761a:	2005      	movs	r0, #5
 800761c:	f7fb fa4e 	bl	8002abc <HAL_Delay>
	lcd_send_cmd1 (0x30);
 8007620:	2030      	movs	r0, #48	; 0x30
 8007622:	f7ff ff73 	bl	800750c <lcd_send_cmd1>
	HAL_Delay(1);  // wait for >100us
 8007626:	2001      	movs	r0, #1
 8007628:	f7fb fa48 	bl	8002abc <HAL_Delay>
	lcd_send_cmd1 (0x30);
 800762c:	2030      	movs	r0, #48	; 0x30
 800762e:	f7ff ff6d 	bl	800750c <lcd_send_cmd1>
	HAL_Delay(10);
 8007632:	200a      	movs	r0, #10
 8007634:	f7fb fa42 	bl	8002abc <HAL_Delay>
	lcd_send_cmd1 (0x20);  // 4bit mode
 8007638:	2020      	movs	r0, #32
 800763a:	f7ff ff67 	bl	800750c <lcd_send_cmd1>
	HAL_Delay(10);
 800763e:	200a      	movs	r0, #10
 8007640:	f7fb fa3c 	bl	8002abc <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd1 (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8007644:	2028      	movs	r0, #40	; 0x28
 8007646:	f7ff ff61 	bl	800750c <lcd_send_cmd1>
	HAL_Delay(1);
 800764a:	2001      	movs	r0, #1
 800764c:	f7fb fa36 	bl	8002abc <HAL_Delay>
	lcd_send_cmd1 (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8007650:	2008      	movs	r0, #8
 8007652:	f7ff ff5b 	bl	800750c <lcd_send_cmd1>
	HAL_Delay(1);
 8007656:	2001      	movs	r0, #1
 8007658:	f7fb fa30 	bl	8002abc <HAL_Delay>
	lcd_send_cmd1 (0x01);  // clear display
 800765c:	2001      	movs	r0, #1
 800765e:	f7ff ff55 	bl	800750c <lcd_send_cmd1>
	HAL_Delay(1);
 8007662:	2001      	movs	r0, #1
 8007664:	f7fb fa2a 	bl	8002abc <HAL_Delay>
	HAL_Delay(1);
 8007668:	2001      	movs	r0, #1
 800766a:	f7fb fa27 	bl	8002abc <HAL_Delay>
	lcd_send_cmd1 (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800766e:	2006      	movs	r0, #6
 8007670:	f7ff ff4c 	bl	800750c <lcd_send_cmd1>
	HAL_Delay(1);
 8007674:	2001      	movs	r0, #1
 8007676:	f7fb fa21 	bl	8002abc <HAL_Delay>
	lcd_send_cmd1 (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800767a:	200c      	movs	r0, #12
 800767c:	f7ff ff46 	bl	800750c <lcd_send_cmd1>
}
 8007680:	bf00      	nop
 8007682:	bd80      	pop	{r7, pc}

08007684 <lcd_send_string1>:

void lcd_send_string1 (char *str)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b082      	sub	sp, #8
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data1 (*str++);
 800768c:	e006      	b.n	800769c <lcd_send_string1+0x18>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	1c5a      	adds	r2, r3, #1
 8007692:	607a      	str	r2, [r7, #4]
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	4618      	mov	r0, r3
 8007698:	f7ff ff68 	bl	800756c <lcd_send_data1>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	781b      	ldrb	r3, [r3, #0]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d1f4      	bne.n	800768e <lcd_send_string1+0xa>
}
 80076a4:	bf00      	nop
 80076a6:	bf00      	nop
 80076a8:	3708      	adds	r7, #8
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
	...

080076b0 <lcd_send_data>:
//============================================
void lcd_send_data (char data)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b086      	sub	sp, #24
 80076b4:	af02      	add	r7, sp, #8
 80076b6:	4603      	mov	r3, r0
 80076b8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80076ba:	79fb      	ldrb	r3, [r7, #7]
 80076bc:	f023 030f 	bic.w	r3, r3, #15
 80076c0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80076c2:	79fb      	ldrb	r3, [r7, #7]
 80076c4:	011b      	lsls	r3, r3, #4
 80076c6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80076c8:	7bfb      	ldrb	r3, [r7, #15]
 80076ca:	f043 030d 	orr.w	r3, r3, #13
 80076ce:	b2db      	uxtb	r3, r3
 80076d0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80076d2:	7bfb      	ldrb	r3, [r7, #15]
 80076d4:	f043 0309 	orr.w	r3, r3, #9
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80076dc:	7bbb      	ldrb	r3, [r7, #14]
 80076de:	f043 030d 	orr.w	r3, r3, #13
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80076e6:	7bbb      	ldrb	r3, [r7, #14]
 80076e8:	f043 0309 	orr.w	r3, r3, #9
 80076ec:	b2db      	uxtb	r3, r3
 80076ee:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80076f0:	f107 0208 	add.w	r2, r7, #8
 80076f4:	2364      	movs	r3, #100	; 0x64
 80076f6:	9300      	str	r3, [sp, #0]
 80076f8:	2304      	movs	r3, #4
 80076fa:	214e      	movs	r1, #78	; 0x4e
 80076fc:	4803      	ldr	r0, [pc, #12]	; (800770c <lcd_send_data+0x5c>)
 80076fe:	f7fc fe11 	bl	8004324 <HAL_I2C_Master_Transmit>
}
 8007702:	bf00      	nop
 8007704:	3710      	adds	r7, #16
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}
 800770a:	bf00      	nop
 800770c:	20000260 	.word	0x20000260

08007710 <lcd_clear>:

void lcd_clear (void)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b082      	sub	sp, #8
 8007714:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8007716:	2080      	movs	r0, #128	; 0x80
 8007718:	f7ff fec8 	bl	80074ac <lcd_send_cmd>
	for (int i=0; i<70; i++)
 800771c:	2300      	movs	r3, #0
 800771e:	607b      	str	r3, [r7, #4]
 8007720:	e005      	b.n	800772e <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8007722:	2020      	movs	r0, #32
 8007724:	f7ff ffc4 	bl	80076b0 <lcd_send_data>
	for (int i=0; i<70; i++)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	3301      	adds	r3, #1
 800772c:	607b      	str	r3, [r7, #4]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2b45      	cmp	r3, #69	; 0x45
 8007732:	ddf6      	ble.n	8007722 <lcd_clear+0x12>
	}
}
 8007734:	bf00      	nop
 8007736:	bf00      	nop
 8007738:	3708      	adds	r7, #8
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}

0800773e <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 800773e:	b580      	push	{r7, lr}
 8007740:	b082      	sub	sp, #8
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
 8007746:	6039      	str	r1, [r7, #0]
    switch (row)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d003      	beq.n	8007756 <lcd_put_cur+0x18>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2b01      	cmp	r3, #1
 8007752:	d005      	beq.n	8007760 <lcd_put_cur+0x22>
 8007754:	e009      	b.n	800776a <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800775c:	603b      	str	r3, [r7, #0]
            break;
 800775e:	e004      	b.n	800776a <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007766:	603b      	str	r3, [r7, #0]
            break;
 8007768:	bf00      	nop
    }

    lcd_send_cmd (col);
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	b2db      	uxtb	r3, r3
 800776e:	4618      	mov	r0, r3
 8007770:	f7ff fe9c 	bl	80074ac <lcd_send_cmd>
}
 8007774:	bf00      	nop
 8007776:	3708      	adds	r7, #8
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}

0800777c <lcd_init>:


void lcd_init (void)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8007780:	2032      	movs	r0, #50	; 0x32
 8007782:	f7fb f99b 	bl	8002abc <HAL_Delay>
	lcd_send_cmd (0x30);
 8007786:	2030      	movs	r0, #48	; 0x30
 8007788:	f7ff fe90 	bl	80074ac <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 800778c:	2005      	movs	r0, #5
 800778e:	f7fb f995 	bl	8002abc <HAL_Delay>
	lcd_send_cmd (0x30);
 8007792:	2030      	movs	r0, #48	; 0x30
 8007794:	f7ff fe8a 	bl	80074ac <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8007798:	2001      	movs	r0, #1
 800779a:	f7fb f98f 	bl	8002abc <HAL_Delay>
	lcd_send_cmd (0x30);
 800779e:	2030      	movs	r0, #48	; 0x30
 80077a0:	f7ff fe84 	bl	80074ac <lcd_send_cmd>
	HAL_Delay(10);
 80077a4:	200a      	movs	r0, #10
 80077a6:	f7fb f989 	bl	8002abc <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80077aa:	2020      	movs	r0, #32
 80077ac:	f7ff fe7e 	bl	80074ac <lcd_send_cmd>
	HAL_Delay(10);
 80077b0:	200a      	movs	r0, #10
 80077b2:	f7fb f983 	bl	8002abc <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80077b6:	2028      	movs	r0, #40	; 0x28
 80077b8:	f7ff fe78 	bl	80074ac <lcd_send_cmd>
	HAL_Delay(1);
 80077bc:	2001      	movs	r0, #1
 80077be:	f7fb f97d 	bl	8002abc <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80077c2:	2008      	movs	r0, #8
 80077c4:	f7ff fe72 	bl	80074ac <lcd_send_cmd>
	HAL_Delay(1);
 80077c8:	2001      	movs	r0, #1
 80077ca:	f7fb f977 	bl	8002abc <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80077ce:	2001      	movs	r0, #1
 80077d0:	f7ff fe6c 	bl	80074ac <lcd_send_cmd>
	HAL_Delay(1);
 80077d4:	2001      	movs	r0, #1
 80077d6:	f7fb f971 	bl	8002abc <HAL_Delay>
	HAL_Delay(1);
 80077da:	2001      	movs	r0, #1
 80077dc:	f7fb f96e 	bl	8002abc <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80077e0:	2006      	movs	r0, #6
 80077e2:	f7ff fe63 	bl	80074ac <lcd_send_cmd>
	HAL_Delay(1);
 80077e6:	2001      	movs	r0, #1
 80077e8:	f7fb f968 	bl	8002abc <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80077ec:	200c      	movs	r0, #12
 80077ee:	f7ff fe5d 	bl	80074ac <lcd_send_cmd>
}
 80077f2:	bf00      	nop
 80077f4:	bd80      	pop	{r7, pc}

080077f6 <lcd_send_string>:

void lcd_send_string (char *str)
{
 80077f6:	b580      	push	{r7, lr}
 80077f8:	b082      	sub	sp, #8
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80077fe:	e006      	b.n	800780e <lcd_send_string+0x18>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	1c5a      	adds	r2, r3, #1
 8007804:	607a      	str	r2, [r7, #4]
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	4618      	mov	r0, r3
 800780a:	f7ff ff51 	bl	80076b0 <lcd_send_data>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	781b      	ldrb	r3, [r3, #0]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d1f4      	bne.n	8007800 <lcd_send_string+0xa>
}
 8007816:	bf00      	nop
 8007818:	bf00      	nop
 800781a:	3708      	adds	r7, #8
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <__errno>:
 8007820:	4b01      	ldr	r3, [pc, #4]	; (8007828 <__errno+0x8>)
 8007822:	6818      	ldr	r0, [r3, #0]
 8007824:	4770      	bx	lr
 8007826:	bf00      	nop
 8007828:	2000001c 	.word	0x2000001c

0800782c <__libc_init_array>:
 800782c:	b570      	push	{r4, r5, r6, lr}
 800782e:	4d0d      	ldr	r5, [pc, #52]	; (8007864 <__libc_init_array+0x38>)
 8007830:	4c0d      	ldr	r4, [pc, #52]	; (8007868 <__libc_init_array+0x3c>)
 8007832:	1b64      	subs	r4, r4, r5
 8007834:	10a4      	asrs	r4, r4, #2
 8007836:	2600      	movs	r6, #0
 8007838:	42a6      	cmp	r6, r4
 800783a:	d109      	bne.n	8007850 <__libc_init_array+0x24>
 800783c:	4d0b      	ldr	r5, [pc, #44]	; (800786c <__libc_init_array+0x40>)
 800783e:	4c0c      	ldr	r4, [pc, #48]	; (8007870 <__libc_init_array+0x44>)
 8007840:	f001 f96e 	bl	8008b20 <_init>
 8007844:	1b64      	subs	r4, r4, r5
 8007846:	10a4      	asrs	r4, r4, #2
 8007848:	2600      	movs	r6, #0
 800784a:	42a6      	cmp	r6, r4
 800784c:	d105      	bne.n	800785a <__libc_init_array+0x2e>
 800784e:	bd70      	pop	{r4, r5, r6, pc}
 8007850:	f855 3b04 	ldr.w	r3, [r5], #4
 8007854:	4798      	blx	r3
 8007856:	3601      	adds	r6, #1
 8007858:	e7ee      	b.n	8007838 <__libc_init_array+0xc>
 800785a:	f855 3b04 	ldr.w	r3, [r5], #4
 800785e:	4798      	blx	r3
 8007860:	3601      	adds	r6, #1
 8007862:	e7f2      	b.n	800784a <__libc_init_array+0x1e>
 8007864:	08008d18 	.word	0x08008d18
 8007868:	08008d18 	.word	0x08008d18
 800786c:	08008d18 	.word	0x08008d18
 8007870:	08008d1c 	.word	0x08008d1c

08007874 <memset>:
 8007874:	4402      	add	r2, r0
 8007876:	4603      	mov	r3, r0
 8007878:	4293      	cmp	r3, r2
 800787a:	d100      	bne.n	800787e <memset+0xa>
 800787c:	4770      	bx	lr
 800787e:	f803 1b01 	strb.w	r1, [r3], #1
 8007882:	e7f9      	b.n	8007878 <memset+0x4>

08007884 <iprintf>:
 8007884:	b40f      	push	{r0, r1, r2, r3}
 8007886:	4b0a      	ldr	r3, [pc, #40]	; (80078b0 <iprintf+0x2c>)
 8007888:	b513      	push	{r0, r1, r4, lr}
 800788a:	681c      	ldr	r4, [r3, #0]
 800788c:	b124      	cbz	r4, 8007898 <iprintf+0x14>
 800788e:	69a3      	ldr	r3, [r4, #24]
 8007890:	b913      	cbnz	r3, 8007898 <iprintf+0x14>
 8007892:	4620      	mov	r0, r4
 8007894:	f000 f8ac 	bl	80079f0 <__sinit>
 8007898:	ab05      	add	r3, sp, #20
 800789a:	9a04      	ldr	r2, [sp, #16]
 800789c:	68a1      	ldr	r1, [r4, #8]
 800789e:	9301      	str	r3, [sp, #4]
 80078a0:	4620      	mov	r0, r4
 80078a2:	f000 fb25 	bl	8007ef0 <_vfiprintf_r>
 80078a6:	b002      	add	sp, #8
 80078a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078ac:	b004      	add	sp, #16
 80078ae:	4770      	bx	lr
 80078b0:	2000001c 	.word	0x2000001c

080078b4 <siprintf>:
 80078b4:	b40e      	push	{r1, r2, r3}
 80078b6:	b500      	push	{lr}
 80078b8:	b09c      	sub	sp, #112	; 0x70
 80078ba:	ab1d      	add	r3, sp, #116	; 0x74
 80078bc:	9002      	str	r0, [sp, #8]
 80078be:	9006      	str	r0, [sp, #24]
 80078c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80078c4:	4809      	ldr	r0, [pc, #36]	; (80078ec <siprintf+0x38>)
 80078c6:	9107      	str	r1, [sp, #28]
 80078c8:	9104      	str	r1, [sp, #16]
 80078ca:	4909      	ldr	r1, [pc, #36]	; (80078f0 <siprintf+0x3c>)
 80078cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80078d0:	9105      	str	r1, [sp, #20]
 80078d2:	6800      	ldr	r0, [r0, #0]
 80078d4:	9301      	str	r3, [sp, #4]
 80078d6:	a902      	add	r1, sp, #8
 80078d8:	f000 f9e0 	bl	8007c9c <_svfiprintf_r>
 80078dc:	9b02      	ldr	r3, [sp, #8]
 80078de:	2200      	movs	r2, #0
 80078e0:	701a      	strb	r2, [r3, #0]
 80078e2:	b01c      	add	sp, #112	; 0x70
 80078e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80078e8:	b003      	add	sp, #12
 80078ea:	4770      	bx	lr
 80078ec:	2000001c 	.word	0x2000001c
 80078f0:	ffff0208 	.word	0xffff0208

080078f4 <strcat>:
 80078f4:	b510      	push	{r4, lr}
 80078f6:	4602      	mov	r2, r0
 80078f8:	7814      	ldrb	r4, [r2, #0]
 80078fa:	4613      	mov	r3, r2
 80078fc:	3201      	adds	r2, #1
 80078fe:	2c00      	cmp	r4, #0
 8007900:	d1fa      	bne.n	80078f8 <strcat+0x4>
 8007902:	3b01      	subs	r3, #1
 8007904:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007908:	f803 2f01 	strb.w	r2, [r3, #1]!
 800790c:	2a00      	cmp	r2, #0
 800790e:	d1f9      	bne.n	8007904 <strcat+0x10>
 8007910:	bd10      	pop	{r4, pc}

08007912 <strstr>:
 8007912:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007914:	780c      	ldrb	r4, [r1, #0]
 8007916:	b164      	cbz	r4, 8007932 <strstr+0x20>
 8007918:	4603      	mov	r3, r0
 800791a:	781a      	ldrb	r2, [r3, #0]
 800791c:	4618      	mov	r0, r3
 800791e:	1c5e      	adds	r6, r3, #1
 8007920:	b90a      	cbnz	r2, 8007926 <strstr+0x14>
 8007922:	4610      	mov	r0, r2
 8007924:	e005      	b.n	8007932 <strstr+0x20>
 8007926:	4294      	cmp	r4, r2
 8007928:	d108      	bne.n	800793c <strstr+0x2a>
 800792a:	460d      	mov	r5, r1
 800792c:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8007930:	b902      	cbnz	r2, 8007934 <strstr+0x22>
 8007932:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007934:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8007938:	4297      	cmp	r7, r2
 800793a:	d0f7      	beq.n	800792c <strstr+0x1a>
 800793c:	4633      	mov	r3, r6
 800793e:	e7ec      	b.n	800791a <strstr+0x8>

08007940 <std>:
 8007940:	2300      	movs	r3, #0
 8007942:	b510      	push	{r4, lr}
 8007944:	4604      	mov	r4, r0
 8007946:	e9c0 3300 	strd	r3, r3, [r0]
 800794a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800794e:	6083      	str	r3, [r0, #8]
 8007950:	8181      	strh	r1, [r0, #12]
 8007952:	6643      	str	r3, [r0, #100]	; 0x64
 8007954:	81c2      	strh	r2, [r0, #14]
 8007956:	6183      	str	r3, [r0, #24]
 8007958:	4619      	mov	r1, r3
 800795a:	2208      	movs	r2, #8
 800795c:	305c      	adds	r0, #92	; 0x5c
 800795e:	f7ff ff89 	bl	8007874 <memset>
 8007962:	4b05      	ldr	r3, [pc, #20]	; (8007978 <std+0x38>)
 8007964:	6263      	str	r3, [r4, #36]	; 0x24
 8007966:	4b05      	ldr	r3, [pc, #20]	; (800797c <std+0x3c>)
 8007968:	62a3      	str	r3, [r4, #40]	; 0x28
 800796a:	4b05      	ldr	r3, [pc, #20]	; (8007980 <std+0x40>)
 800796c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800796e:	4b05      	ldr	r3, [pc, #20]	; (8007984 <std+0x44>)
 8007970:	6224      	str	r4, [r4, #32]
 8007972:	6323      	str	r3, [r4, #48]	; 0x30
 8007974:	bd10      	pop	{r4, pc}
 8007976:	bf00      	nop
 8007978:	08008499 	.word	0x08008499
 800797c:	080084bb 	.word	0x080084bb
 8007980:	080084f3 	.word	0x080084f3
 8007984:	08008517 	.word	0x08008517

08007988 <_cleanup_r>:
 8007988:	4901      	ldr	r1, [pc, #4]	; (8007990 <_cleanup_r+0x8>)
 800798a:	f000 b8af 	b.w	8007aec <_fwalk_reent>
 800798e:	bf00      	nop
 8007990:	080087f1 	.word	0x080087f1

08007994 <__sfmoreglue>:
 8007994:	b570      	push	{r4, r5, r6, lr}
 8007996:	1e4a      	subs	r2, r1, #1
 8007998:	2568      	movs	r5, #104	; 0x68
 800799a:	4355      	muls	r5, r2
 800799c:	460e      	mov	r6, r1
 800799e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80079a2:	f000 f8c5 	bl	8007b30 <_malloc_r>
 80079a6:	4604      	mov	r4, r0
 80079a8:	b140      	cbz	r0, 80079bc <__sfmoreglue+0x28>
 80079aa:	2100      	movs	r1, #0
 80079ac:	e9c0 1600 	strd	r1, r6, [r0]
 80079b0:	300c      	adds	r0, #12
 80079b2:	60a0      	str	r0, [r4, #8]
 80079b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80079b8:	f7ff ff5c 	bl	8007874 <memset>
 80079bc:	4620      	mov	r0, r4
 80079be:	bd70      	pop	{r4, r5, r6, pc}

080079c0 <__sfp_lock_acquire>:
 80079c0:	4801      	ldr	r0, [pc, #4]	; (80079c8 <__sfp_lock_acquire+0x8>)
 80079c2:	f000 b8b3 	b.w	8007b2c <__retarget_lock_acquire_recursive>
 80079c6:	bf00      	nop
 80079c8:	20000934 	.word	0x20000934

080079cc <__sfp_lock_release>:
 80079cc:	4801      	ldr	r0, [pc, #4]	; (80079d4 <__sfp_lock_release+0x8>)
 80079ce:	f000 b8ae 	b.w	8007b2e <__retarget_lock_release_recursive>
 80079d2:	bf00      	nop
 80079d4:	20000934 	.word	0x20000934

080079d8 <__sinit_lock_acquire>:
 80079d8:	4801      	ldr	r0, [pc, #4]	; (80079e0 <__sinit_lock_acquire+0x8>)
 80079da:	f000 b8a7 	b.w	8007b2c <__retarget_lock_acquire_recursive>
 80079de:	bf00      	nop
 80079e0:	2000092f 	.word	0x2000092f

080079e4 <__sinit_lock_release>:
 80079e4:	4801      	ldr	r0, [pc, #4]	; (80079ec <__sinit_lock_release+0x8>)
 80079e6:	f000 b8a2 	b.w	8007b2e <__retarget_lock_release_recursive>
 80079ea:	bf00      	nop
 80079ec:	2000092f 	.word	0x2000092f

080079f0 <__sinit>:
 80079f0:	b510      	push	{r4, lr}
 80079f2:	4604      	mov	r4, r0
 80079f4:	f7ff fff0 	bl	80079d8 <__sinit_lock_acquire>
 80079f8:	69a3      	ldr	r3, [r4, #24]
 80079fa:	b11b      	cbz	r3, 8007a04 <__sinit+0x14>
 80079fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a00:	f7ff bff0 	b.w	80079e4 <__sinit_lock_release>
 8007a04:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007a08:	6523      	str	r3, [r4, #80]	; 0x50
 8007a0a:	4b13      	ldr	r3, [pc, #76]	; (8007a58 <__sinit+0x68>)
 8007a0c:	4a13      	ldr	r2, [pc, #76]	; (8007a5c <__sinit+0x6c>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	62a2      	str	r2, [r4, #40]	; 0x28
 8007a12:	42a3      	cmp	r3, r4
 8007a14:	bf04      	itt	eq
 8007a16:	2301      	moveq	r3, #1
 8007a18:	61a3      	streq	r3, [r4, #24]
 8007a1a:	4620      	mov	r0, r4
 8007a1c:	f000 f820 	bl	8007a60 <__sfp>
 8007a20:	6060      	str	r0, [r4, #4]
 8007a22:	4620      	mov	r0, r4
 8007a24:	f000 f81c 	bl	8007a60 <__sfp>
 8007a28:	60a0      	str	r0, [r4, #8]
 8007a2a:	4620      	mov	r0, r4
 8007a2c:	f000 f818 	bl	8007a60 <__sfp>
 8007a30:	2200      	movs	r2, #0
 8007a32:	60e0      	str	r0, [r4, #12]
 8007a34:	2104      	movs	r1, #4
 8007a36:	6860      	ldr	r0, [r4, #4]
 8007a38:	f7ff ff82 	bl	8007940 <std>
 8007a3c:	68a0      	ldr	r0, [r4, #8]
 8007a3e:	2201      	movs	r2, #1
 8007a40:	2109      	movs	r1, #9
 8007a42:	f7ff ff7d 	bl	8007940 <std>
 8007a46:	68e0      	ldr	r0, [r4, #12]
 8007a48:	2202      	movs	r2, #2
 8007a4a:	2112      	movs	r1, #18
 8007a4c:	f7ff ff78 	bl	8007940 <std>
 8007a50:	2301      	movs	r3, #1
 8007a52:	61a3      	str	r3, [r4, #24]
 8007a54:	e7d2      	b.n	80079fc <__sinit+0xc>
 8007a56:	bf00      	nop
 8007a58:	08008c78 	.word	0x08008c78
 8007a5c:	08007989 	.word	0x08007989

08007a60 <__sfp>:
 8007a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a62:	4607      	mov	r7, r0
 8007a64:	f7ff ffac 	bl	80079c0 <__sfp_lock_acquire>
 8007a68:	4b1e      	ldr	r3, [pc, #120]	; (8007ae4 <__sfp+0x84>)
 8007a6a:	681e      	ldr	r6, [r3, #0]
 8007a6c:	69b3      	ldr	r3, [r6, #24]
 8007a6e:	b913      	cbnz	r3, 8007a76 <__sfp+0x16>
 8007a70:	4630      	mov	r0, r6
 8007a72:	f7ff ffbd 	bl	80079f0 <__sinit>
 8007a76:	3648      	adds	r6, #72	; 0x48
 8007a78:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007a7c:	3b01      	subs	r3, #1
 8007a7e:	d503      	bpl.n	8007a88 <__sfp+0x28>
 8007a80:	6833      	ldr	r3, [r6, #0]
 8007a82:	b30b      	cbz	r3, 8007ac8 <__sfp+0x68>
 8007a84:	6836      	ldr	r6, [r6, #0]
 8007a86:	e7f7      	b.n	8007a78 <__sfp+0x18>
 8007a88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007a8c:	b9d5      	cbnz	r5, 8007ac4 <__sfp+0x64>
 8007a8e:	4b16      	ldr	r3, [pc, #88]	; (8007ae8 <__sfp+0x88>)
 8007a90:	60e3      	str	r3, [r4, #12]
 8007a92:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007a96:	6665      	str	r5, [r4, #100]	; 0x64
 8007a98:	f000 f847 	bl	8007b2a <__retarget_lock_init_recursive>
 8007a9c:	f7ff ff96 	bl	80079cc <__sfp_lock_release>
 8007aa0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007aa4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007aa8:	6025      	str	r5, [r4, #0]
 8007aaa:	61a5      	str	r5, [r4, #24]
 8007aac:	2208      	movs	r2, #8
 8007aae:	4629      	mov	r1, r5
 8007ab0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007ab4:	f7ff fede 	bl	8007874 <memset>
 8007ab8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007abc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007ac0:	4620      	mov	r0, r4
 8007ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ac4:	3468      	adds	r4, #104	; 0x68
 8007ac6:	e7d9      	b.n	8007a7c <__sfp+0x1c>
 8007ac8:	2104      	movs	r1, #4
 8007aca:	4638      	mov	r0, r7
 8007acc:	f7ff ff62 	bl	8007994 <__sfmoreglue>
 8007ad0:	4604      	mov	r4, r0
 8007ad2:	6030      	str	r0, [r6, #0]
 8007ad4:	2800      	cmp	r0, #0
 8007ad6:	d1d5      	bne.n	8007a84 <__sfp+0x24>
 8007ad8:	f7ff ff78 	bl	80079cc <__sfp_lock_release>
 8007adc:	230c      	movs	r3, #12
 8007ade:	603b      	str	r3, [r7, #0]
 8007ae0:	e7ee      	b.n	8007ac0 <__sfp+0x60>
 8007ae2:	bf00      	nop
 8007ae4:	08008c78 	.word	0x08008c78
 8007ae8:	ffff0001 	.word	0xffff0001

08007aec <_fwalk_reent>:
 8007aec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007af0:	4606      	mov	r6, r0
 8007af2:	4688      	mov	r8, r1
 8007af4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007af8:	2700      	movs	r7, #0
 8007afa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007afe:	f1b9 0901 	subs.w	r9, r9, #1
 8007b02:	d505      	bpl.n	8007b10 <_fwalk_reent+0x24>
 8007b04:	6824      	ldr	r4, [r4, #0]
 8007b06:	2c00      	cmp	r4, #0
 8007b08:	d1f7      	bne.n	8007afa <_fwalk_reent+0xe>
 8007b0a:	4638      	mov	r0, r7
 8007b0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b10:	89ab      	ldrh	r3, [r5, #12]
 8007b12:	2b01      	cmp	r3, #1
 8007b14:	d907      	bls.n	8007b26 <_fwalk_reent+0x3a>
 8007b16:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	d003      	beq.n	8007b26 <_fwalk_reent+0x3a>
 8007b1e:	4629      	mov	r1, r5
 8007b20:	4630      	mov	r0, r6
 8007b22:	47c0      	blx	r8
 8007b24:	4307      	orrs	r7, r0
 8007b26:	3568      	adds	r5, #104	; 0x68
 8007b28:	e7e9      	b.n	8007afe <_fwalk_reent+0x12>

08007b2a <__retarget_lock_init_recursive>:
 8007b2a:	4770      	bx	lr

08007b2c <__retarget_lock_acquire_recursive>:
 8007b2c:	4770      	bx	lr

08007b2e <__retarget_lock_release_recursive>:
 8007b2e:	4770      	bx	lr

08007b30 <_malloc_r>:
 8007b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b32:	1ccd      	adds	r5, r1, #3
 8007b34:	f025 0503 	bic.w	r5, r5, #3
 8007b38:	3508      	adds	r5, #8
 8007b3a:	2d0c      	cmp	r5, #12
 8007b3c:	bf38      	it	cc
 8007b3e:	250c      	movcc	r5, #12
 8007b40:	2d00      	cmp	r5, #0
 8007b42:	4606      	mov	r6, r0
 8007b44:	db01      	blt.n	8007b4a <_malloc_r+0x1a>
 8007b46:	42a9      	cmp	r1, r5
 8007b48:	d903      	bls.n	8007b52 <_malloc_r+0x22>
 8007b4a:	230c      	movs	r3, #12
 8007b4c:	6033      	str	r3, [r6, #0]
 8007b4e:	2000      	movs	r0, #0
 8007b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b52:	f000 ff27 	bl	80089a4 <__malloc_lock>
 8007b56:	4921      	ldr	r1, [pc, #132]	; (8007bdc <_malloc_r+0xac>)
 8007b58:	680a      	ldr	r2, [r1, #0]
 8007b5a:	4614      	mov	r4, r2
 8007b5c:	b99c      	cbnz	r4, 8007b86 <_malloc_r+0x56>
 8007b5e:	4f20      	ldr	r7, [pc, #128]	; (8007be0 <_malloc_r+0xb0>)
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	b923      	cbnz	r3, 8007b6e <_malloc_r+0x3e>
 8007b64:	4621      	mov	r1, r4
 8007b66:	4630      	mov	r0, r6
 8007b68:	f000 fc86 	bl	8008478 <_sbrk_r>
 8007b6c:	6038      	str	r0, [r7, #0]
 8007b6e:	4629      	mov	r1, r5
 8007b70:	4630      	mov	r0, r6
 8007b72:	f000 fc81 	bl	8008478 <_sbrk_r>
 8007b76:	1c43      	adds	r3, r0, #1
 8007b78:	d123      	bne.n	8007bc2 <_malloc_r+0x92>
 8007b7a:	230c      	movs	r3, #12
 8007b7c:	6033      	str	r3, [r6, #0]
 8007b7e:	4630      	mov	r0, r6
 8007b80:	f000 ff16 	bl	80089b0 <__malloc_unlock>
 8007b84:	e7e3      	b.n	8007b4e <_malloc_r+0x1e>
 8007b86:	6823      	ldr	r3, [r4, #0]
 8007b88:	1b5b      	subs	r3, r3, r5
 8007b8a:	d417      	bmi.n	8007bbc <_malloc_r+0x8c>
 8007b8c:	2b0b      	cmp	r3, #11
 8007b8e:	d903      	bls.n	8007b98 <_malloc_r+0x68>
 8007b90:	6023      	str	r3, [r4, #0]
 8007b92:	441c      	add	r4, r3
 8007b94:	6025      	str	r5, [r4, #0]
 8007b96:	e004      	b.n	8007ba2 <_malloc_r+0x72>
 8007b98:	6863      	ldr	r3, [r4, #4]
 8007b9a:	42a2      	cmp	r2, r4
 8007b9c:	bf0c      	ite	eq
 8007b9e:	600b      	streq	r3, [r1, #0]
 8007ba0:	6053      	strne	r3, [r2, #4]
 8007ba2:	4630      	mov	r0, r6
 8007ba4:	f000 ff04 	bl	80089b0 <__malloc_unlock>
 8007ba8:	f104 000b 	add.w	r0, r4, #11
 8007bac:	1d23      	adds	r3, r4, #4
 8007bae:	f020 0007 	bic.w	r0, r0, #7
 8007bb2:	1ac2      	subs	r2, r0, r3
 8007bb4:	d0cc      	beq.n	8007b50 <_malloc_r+0x20>
 8007bb6:	1a1b      	subs	r3, r3, r0
 8007bb8:	50a3      	str	r3, [r4, r2]
 8007bba:	e7c9      	b.n	8007b50 <_malloc_r+0x20>
 8007bbc:	4622      	mov	r2, r4
 8007bbe:	6864      	ldr	r4, [r4, #4]
 8007bc0:	e7cc      	b.n	8007b5c <_malloc_r+0x2c>
 8007bc2:	1cc4      	adds	r4, r0, #3
 8007bc4:	f024 0403 	bic.w	r4, r4, #3
 8007bc8:	42a0      	cmp	r0, r4
 8007bca:	d0e3      	beq.n	8007b94 <_malloc_r+0x64>
 8007bcc:	1a21      	subs	r1, r4, r0
 8007bce:	4630      	mov	r0, r6
 8007bd0:	f000 fc52 	bl	8008478 <_sbrk_r>
 8007bd4:	3001      	adds	r0, #1
 8007bd6:	d1dd      	bne.n	8007b94 <_malloc_r+0x64>
 8007bd8:	e7cf      	b.n	8007b7a <_malloc_r+0x4a>
 8007bda:	bf00      	nop
 8007bdc:	200000c4 	.word	0x200000c4
 8007be0:	200000c8 	.word	0x200000c8

08007be4 <__ssputs_r>:
 8007be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007be8:	688e      	ldr	r6, [r1, #8]
 8007bea:	429e      	cmp	r6, r3
 8007bec:	4682      	mov	sl, r0
 8007bee:	460c      	mov	r4, r1
 8007bf0:	4690      	mov	r8, r2
 8007bf2:	461f      	mov	r7, r3
 8007bf4:	d838      	bhi.n	8007c68 <__ssputs_r+0x84>
 8007bf6:	898a      	ldrh	r2, [r1, #12]
 8007bf8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007bfc:	d032      	beq.n	8007c64 <__ssputs_r+0x80>
 8007bfe:	6825      	ldr	r5, [r4, #0]
 8007c00:	6909      	ldr	r1, [r1, #16]
 8007c02:	eba5 0901 	sub.w	r9, r5, r1
 8007c06:	6965      	ldr	r5, [r4, #20]
 8007c08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007c10:	3301      	adds	r3, #1
 8007c12:	444b      	add	r3, r9
 8007c14:	106d      	asrs	r5, r5, #1
 8007c16:	429d      	cmp	r5, r3
 8007c18:	bf38      	it	cc
 8007c1a:	461d      	movcc	r5, r3
 8007c1c:	0553      	lsls	r3, r2, #21
 8007c1e:	d531      	bpl.n	8007c84 <__ssputs_r+0xa0>
 8007c20:	4629      	mov	r1, r5
 8007c22:	f7ff ff85 	bl	8007b30 <_malloc_r>
 8007c26:	4606      	mov	r6, r0
 8007c28:	b950      	cbnz	r0, 8007c40 <__ssputs_r+0x5c>
 8007c2a:	230c      	movs	r3, #12
 8007c2c:	f8ca 3000 	str.w	r3, [sl]
 8007c30:	89a3      	ldrh	r3, [r4, #12]
 8007c32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c36:	81a3      	strh	r3, [r4, #12]
 8007c38:	f04f 30ff 	mov.w	r0, #4294967295
 8007c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c40:	6921      	ldr	r1, [r4, #16]
 8007c42:	464a      	mov	r2, r9
 8007c44:	f000 fe86 	bl	8008954 <memcpy>
 8007c48:	89a3      	ldrh	r3, [r4, #12]
 8007c4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007c4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c52:	81a3      	strh	r3, [r4, #12]
 8007c54:	6126      	str	r6, [r4, #16]
 8007c56:	6165      	str	r5, [r4, #20]
 8007c58:	444e      	add	r6, r9
 8007c5a:	eba5 0509 	sub.w	r5, r5, r9
 8007c5e:	6026      	str	r6, [r4, #0]
 8007c60:	60a5      	str	r5, [r4, #8]
 8007c62:	463e      	mov	r6, r7
 8007c64:	42be      	cmp	r6, r7
 8007c66:	d900      	bls.n	8007c6a <__ssputs_r+0x86>
 8007c68:	463e      	mov	r6, r7
 8007c6a:	4632      	mov	r2, r6
 8007c6c:	6820      	ldr	r0, [r4, #0]
 8007c6e:	4641      	mov	r1, r8
 8007c70:	f000 fe7e 	bl	8008970 <memmove>
 8007c74:	68a3      	ldr	r3, [r4, #8]
 8007c76:	6822      	ldr	r2, [r4, #0]
 8007c78:	1b9b      	subs	r3, r3, r6
 8007c7a:	4432      	add	r2, r6
 8007c7c:	60a3      	str	r3, [r4, #8]
 8007c7e:	6022      	str	r2, [r4, #0]
 8007c80:	2000      	movs	r0, #0
 8007c82:	e7db      	b.n	8007c3c <__ssputs_r+0x58>
 8007c84:	462a      	mov	r2, r5
 8007c86:	f000 fee9 	bl	8008a5c <_realloc_r>
 8007c8a:	4606      	mov	r6, r0
 8007c8c:	2800      	cmp	r0, #0
 8007c8e:	d1e1      	bne.n	8007c54 <__ssputs_r+0x70>
 8007c90:	6921      	ldr	r1, [r4, #16]
 8007c92:	4650      	mov	r0, sl
 8007c94:	f000 fe92 	bl	80089bc <_free_r>
 8007c98:	e7c7      	b.n	8007c2a <__ssputs_r+0x46>
	...

08007c9c <_svfiprintf_r>:
 8007c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ca0:	4698      	mov	r8, r3
 8007ca2:	898b      	ldrh	r3, [r1, #12]
 8007ca4:	061b      	lsls	r3, r3, #24
 8007ca6:	b09d      	sub	sp, #116	; 0x74
 8007ca8:	4607      	mov	r7, r0
 8007caa:	460d      	mov	r5, r1
 8007cac:	4614      	mov	r4, r2
 8007cae:	d50e      	bpl.n	8007cce <_svfiprintf_r+0x32>
 8007cb0:	690b      	ldr	r3, [r1, #16]
 8007cb2:	b963      	cbnz	r3, 8007cce <_svfiprintf_r+0x32>
 8007cb4:	2140      	movs	r1, #64	; 0x40
 8007cb6:	f7ff ff3b 	bl	8007b30 <_malloc_r>
 8007cba:	6028      	str	r0, [r5, #0]
 8007cbc:	6128      	str	r0, [r5, #16]
 8007cbe:	b920      	cbnz	r0, 8007cca <_svfiprintf_r+0x2e>
 8007cc0:	230c      	movs	r3, #12
 8007cc2:	603b      	str	r3, [r7, #0]
 8007cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8007cc8:	e0d1      	b.n	8007e6e <_svfiprintf_r+0x1d2>
 8007cca:	2340      	movs	r3, #64	; 0x40
 8007ccc:	616b      	str	r3, [r5, #20]
 8007cce:	2300      	movs	r3, #0
 8007cd0:	9309      	str	r3, [sp, #36]	; 0x24
 8007cd2:	2320      	movs	r3, #32
 8007cd4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007cd8:	f8cd 800c 	str.w	r8, [sp, #12]
 8007cdc:	2330      	movs	r3, #48	; 0x30
 8007cde:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007e88 <_svfiprintf_r+0x1ec>
 8007ce2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ce6:	f04f 0901 	mov.w	r9, #1
 8007cea:	4623      	mov	r3, r4
 8007cec:	469a      	mov	sl, r3
 8007cee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007cf2:	b10a      	cbz	r2, 8007cf8 <_svfiprintf_r+0x5c>
 8007cf4:	2a25      	cmp	r2, #37	; 0x25
 8007cf6:	d1f9      	bne.n	8007cec <_svfiprintf_r+0x50>
 8007cf8:	ebba 0b04 	subs.w	fp, sl, r4
 8007cfc:	d00b      	beq.n	8007d16 <_svfiprintf_r+0x7a>
 8007cfe:	465b      	mov	r3, fp
 8007d00:	4622      	mov	r2, r4
 8007d02:	4629      	mov	r1, r5
 8007d04:	4638      	mov	r0, r7
 8007d06:	f7ff ff6d 	bl	8007be4 <__ssputs_r>
 8007d0a:	3001      	adds	r0, #1
 8007d0c:	f000 80aa 	beq.w	8007e64 <_svfiprintf_r+0x1c8>
 8007d10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d12:	445a      	add	r2, fp
 8007d14:	9209      	str	r2, [sp, #36]	; 0x24
 8007d16:	f89a 3000 	ldrb.w	r3, [sl]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	f000 80a2 	beq.w	8007e64 <_svfiprintf_r+0x1c8>
 8007d20:	2300      	movs	r3, #0
 8007d22:	f04f 32ff 	mov.w	r2, #4294967295
 8007d26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d2a:	f10a 0a01 	add.w	sl, sl, #1
 8007d2e:	9304      	str	r3, [sp, #16]
 8007d30:	9307      	str	r3, [sp, #28]
 8007d32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d36:	931a      	str	r3, [sp, #104]	; 0x68
 8007d38:	4654      	mov	r4, sl
 8007d3a:	2205      	movs	r2, #5
 8007d3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d40:	4851      	ldr	r0, [pc, #324]	; (8007e88 <_svfiprintf_r+0x1ec>)
 8007d42:	f7f8 fa65 	bl	8000210 <memchr>
 8007d46:	9a04      	ldr	r2, [sp, #16]
 8007d48:	b9d8      	cbnz	r0, 8007d82 <_svfiprintf_r+0xe6>
 8007d4a:	06d0      	lsls	r0, r2, #27
 8007d4c:	bf44      	itt	mi
 8007d4e:	2320      	movmi	r3, #32
 8007d50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d54:	0711      	lsls	r1, r2, #28
 8007d56:	bf44      	itt	mi
 8007d58:	232b      	movmi	r3, #43	; 0x2b
 8007d5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d5e:	f89a 3000 	ldrb.w	r3, [sl]
 8007d62:	2b2a      	cmp	r3, #42	; 0x2a
 8007d64:	d015      	beq.n	8007d92 <_svfiprintf_r+0xf6>
 8007d66:	9a07      	ldr	r2, [sp, #28]
 8007d68:	4654      	mov	r4, sl
 8007d6a:	2000      	movs	r0, #0
 8007d6c:	f04f 0c0a 	mov.w	ip, #10
 8007d70:	4621      	mov	r1, r4
 8007d72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d76:	3b30      	subs	r3, #48	; 0x30
 8007d78:	2b09      	cmp	r3, #9
 8007d7a:	d94e      	bls.n	8007e1a <_svfiprintf_r+0x17e>
 8007d7c:	b1b0      	cbz	r0, 8007dac <_svfiprintf_r+0x110>
 8007d7e:	9207      	str	r2, [sp, #28]
 8007d80:	e014      	b.n	8007dac <_svfiprintf_r+0x110>
 8007d82:	eba0 0308 	sub.w	r3, r0, r8
 8007d86:	fa09 f303 	lsl.w	r3, r9, r3
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	9304      	str	r3, [sp, #16]
 8007d8e:	46a2      	mov	sl, r4
 8007d90:	e7d2      	b.n	8007d38 <_svfiprintf_r+0x9c>
 8007d92:	9b03      	ldr	r3, [sp, #12]
 8007d94:	1d19      	adds	r1, r3, #4
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	9103      	str	r1, [sp, #12]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	bfbb      	ittet	lt
 8007d9e:	425b      	neglt	r3, r3
 8007da0:	f042 0202 	orrlt.w	r2, r2, #2
 8007da4:	9307      	strge	r3, [sp, #28]
 8007da6:	9307      	strlt	r3, [sp, #28]
 8007da8:	bfb8      	it	lt
 8007daa:	9204      	strlt	r2, [sp, #16]
 8007dac:	7823      	ldrb	r3, [r4, #0]
 8007dae:	2b2e      	cmp	r3, #46	; 0x2e
 8007db0:	d10c      	bne.n	8007dcc <_svfiprintf_r+0x130>
 8007db2:	7863      	ldrb	r3, [r4, #1]
 8007db4:	2b2a      	cmp	r3, #42	; 0x2a
 8007db6:	d135      	bne.n	8007e24 <_svfiprintf_r+0x188>
 8007db8:	9b03      	ldr	r3, [sp, #12]
 8007dba:	1d1a      	adds	r2, r3, #4
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	9203      	str	r2, [sp, #12]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	bfb8      	it	lt
 8007dc4:	f04f 33ff 	movlt.w	r3, #4294967295
 8007dc8:	3402      	adds	r4, #2
 8007dca:	9305      	str	r3, [sp, #20]
 8007dcc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007e98 <_svfiprintf_r+0x1fc>
 8007dd0:	7821      	ldrb	r1, [r4, #0]
 8007dd2:	2203      	movs	r2, #3
 8007dd4:	4650      	mov	r0, sl
 8007dd6:	f7f8 fa1b 	bl	8000210 <memchr>
 8007dda:	b140      	cbz	r0, 8007dee <_svfiprintf_r+0x152>
 8007ddc:	2340      	movs	r3, #64	; 0x40
 8007dde:	eba0 000a 	sub.w	r0, r0, sl
 8007de2:	fa03 f000 	lsl.w	r0, r3, r0
 8007de6:	9b04      	ldr	r3, [sp, #16]
 8007de8:	4303      	orrs	r3, r0
 8007dea:	3401      	adds	r4, #1
 8007dec:	9304      	str	r3, [sp, #16]
 8007dee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007df2:	4826      	ldr	r0, [pc, #152]	; (8007e8c <_svfiprintf_r+0x1f0>)
 8007df4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007df8:	2206      	movs	r2, #6
 8007dfa:	f7f8 fa09 	bl	8000210 <memchr>
 8007dfe:	2800      	cmp	r0, #0
 8007e00:	d038      	beq.n	8007e74 <_svfiprintf_r+0x1d8>
 8007e02:	4b23      	ldr	r3, [pc, #140]	; (8007e90 <_svfiprintf_r+0x1f4>)
 8007e04:	bb1b      	cbnz	r3, 8007e4e <_svfiprintf_r+0x1b2>
 8007e06:	9b03      	ldr	r3, [sp, #12]
 8007e08:	3307      	adds	r3, #7
 8007e0a:	f023 0307 	bic.w	r3, r3, #7
 8007e0e:	3308      	adds	r3, #8
 8007e10:	9303      	str	r3, [sp, #12]
 8007e12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e14:	4433      	add	r3, r6
 8007e16:	9309      	str	r3, [sp, #36]	; 0x24
 8007e18:	e767      	b.n	8007cea <_svfiprintf_r+0x4e>
 8007e1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e1e:	460c      	mov	r4, r1
 8007e20:	2001      	movs	r0, #1
 8007e22:	e7a5      	b.n	8007d70 <_svfiprintf_r+0xd4>
 8007e24:	2300      	movs	r3, #0
 8007e26:	3401      	adds	r4, #1
 8007e28:	9305      	str	r3, [sp, #20]
 8007e2a:	4619      	mov	r1, r3
 8007e2c:	f04f 0c0a 	mov.w	ip, #10
 8007e30:	4620      	mov	r0, r4
 8007e32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e36:	3a30      	subs	r2, #48	; 0x30
 8007e38:	2a09      	cmp	r2, #9
 8007e3a:	d903      	bls.n	8007e44 <_svfiprintf_r+0x1a8>
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d0c5      	beq.n	8007dcc <_svfiprintf_r+0x130>
 8007e40:	9105      	str	r1, [sp, #20]
 8007e42:	e7c3      	b.n	8007dcc <_svfiprintf_r+0x130>
 8007e44:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e48:	4604      	mov	r4, r0
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	e7f0      	b.n	8007e30 <_svfiprintf_r+0x194>
 8007e4e:	ab03      	add	r3, sp, #12
 8007e50:	9300      	str	r3, [sp, #0]
 8007e52:	462a      	mov	r2, r5
 8007e54:	4b0f      	ldr	r3, [pc, #60]	; (8007e94 <_svfiprintf_r+0x1f8>)
 8007e56:	a904      	add	r1, sp, #16
 8007e58:	4638      	mov	r0, r7
 8007e5a:	f3af 8000 	nop.w
 8007e5e:	1c42      	adds	r2, r0, #1
 8007e60:	4606      	mov	r6, r0
 8007e62:	d1d6      	bne.n	8007e12 <_svfiprintf_r+0x176>
 8007e64:	89ab      	ldrh	r3, [r5, #12]
 8007e66:	065b      	lsls	r3, r3, #25
 8007e68:	f53f af2c 	bmi.w	8007cc4 <_svfiprintf_r+0x28>
 8007e6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e6e:	b01d      	add	sp, #116	; 0x74
 8007e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e74:	ab03      	add	r3, sp, #12
 8007e76:	9300      	str	r3, [sp, #0]
 8007e78:	462a      	mov	r2, r5
 8007e7a:	4b06      	ldr	r3, [pc, #24]	; (8007e94 <_svfiprintf_r+0x1f8>)
 8007e7c:	a904      	add	r1, sp, #16
 8007e7e:	4638      	mov	r0, r7
 8007e80:	f000 f9d4 	bl	800822c <_printf_i>
 8007e84:	e7eb      	b.n	8007e5e <_svfiprintf_r+0x1c2>
 8007e86:	bf00      	nop
 8007e88:	08008cdc 	.word	0x08008cdc
 8007e8c:	08008ce6 	.word	0x08008ce6
 8007e90:	00000000 	.word	0x00000000
 8007e94:	08007be5 	.word	0x08007be5
 8007e98:	08008ce2 	.word	0x08008ce2

08007e9c <__sfputc_r>:
 8007e9c:	6893      	ldr	r3, [r2, #8]
 8007e9e:	3b01      	subs	r3, #1
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	b410      	push	{r4}
 8007ea4:	6093      	str	r3, [r2, #8]
 8007ea6:	da08      	bge.n	8007eba <__sfputc_r+0x1e>
 8007ea8:	6994      	ldr	r4, [r2, #24]
 8007eaa:	42a3      	cmp	r3, r4
 8007eac:	db01      	blt.n	8007eb2 <__sfputc_r+0x16>
 8007eae:	290a      	cmp	r1, #10
 8007eb0:	d103      	bne.n	8007eba <__sfputc_r+0x1e>
 8007eb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007eb6:	f000 bb33 	b.w	8008520 <__swbuf_r>
 8007eba:	6813      	ldr	r3, [r2, #0]
 8007ebc:	1c58      	adds	r0, r3, #1
 8007ebe:	6010      	str	r0, [r2, #0]
 8007ec0:	7019      	strb	r1, [r3, #0]
 8007ec2:	4608      	mov	r0, r1
 8007ec4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ec8:	4770      	bx	lr

08007eca <__sfputs_r>:
 8007eca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ecc:	4606      	mov	r6, r0
 8007ece:	460f      	mov	r7, r1
 8007ed0:	4614      	mov	r4, r2
 8007ed2:	18d5      	adds	r5, r2, r3
 8007ed4:	42ac      	cmp	r4, r5
 8007ed6:	d101      	bne.n	8007edc <__sfputs_r+0x12>
 8007ed8:	2000      	movs	r0, #0
 8007eda:	e007      	b.n	8007eec <__sfputs_r+0x22>
 8007edc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ee0:	463a      	mov	r2, r7
 8007ee2:	4630      	mov	r0, r6
 8007ee4:	f7ff ffda 	bl	8007e9c <__sfputc_r>
 8007ee8:	1c43      	adds	r3, r0, #1
 8007eea:	d1f3      	bne.n	8007ed4 <__sfputs_r+0xa>
 8007eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007ef0 <_vfiprintf_r>:
 8007ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ef4:	460d      	mov	r5, r1
 8007ef6:	b09d      	sub	sp, #116	; 0x74
 8007ef8:	4614      	mov	r4, r2
 8007efa:	4698      	mov	r8, r3
 8007efc:	4606      	mov	r6, r0
 8007efe:	b118      	cbz	r0, 8007f08 <_vfiprintf_r+0x18>
 8007f00:	6983      	ldr	r3, [r0, #24]
 8007f02:	b90b      	cbnz	r3, 8007f08 <_vfiprintf_r+0x18>
 8007f04:	f7ff fd74 	bl	80079f0 <__sinit>
 8007f08:	4b89      	ldr	r3, [pc, #548]	; (8008130 <_vfiprintf_r+0x240>)
 8007f0a:	429d      	cmp	r5, r3
 8007f0c:	d11b      	bne.n	8007f46 <_vfiprintf_r+0x56>
 8007f0e:	6875      	ldr	r5, [r6, #4]
 8007f10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f12:	07d9      	lsls	r1, r3, #31
 8007f14:	d405      	bmi.n	8007f22 <_vfiprintf_r+0x32>
 8007f16:	89ab      	ldrh	r3, [r5, #12]
 8007f18:	059a      	lsls	r2, r3, #22
 8007f1a:	d402      	bmi.n	8007f22 <_vfiprintf_r+0x32>
 8007f1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f1e:	f7ff fe05 	bl	8007b2c <__retarget_lock_acquire_recursive>
 8007f22:	89ab      	ldrh	r3, [r5, #12]
 8007f24:	071b      	lsls	r3, r3, #28
 8007f26:	d501      	bpl.n	8007f2c <_vfiprintf_r+0x3c>
 8007f28:	692b      	ldr	r3, [r5, #16]
 8007f2a:	b9eb      	cbnz	r3, 8007f68 <_vfiprintf_r+0x78>
 8007f2c:	4629      	mov	r1, r5
 8007f2e:	4630      	mov	r0, r6
 8007f30:	f000 fb5a 	bl	80085e8 <__swsetup_r>
 8007f34:	b1c0      	cbz	r0, 8007f68 <_vfiprintf_r+0x78>
 8007f36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f38:	07dc      	lsls	r4, r3, #31
 8007f3a:	d50e      	bpl.n	8007f5a <_vfiprintf_r+0x6a>
 8007f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f40:	b01d      	add	sp, #116	; 0x74
 8007f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f46:	4b7b      	ldr	r3, [pc, #492]	; (8008134 <_vfiprintf_r+0x244>)
 8007f48:	429d      	cmp	r5, r3
 8007f4a:	d101      	bne.n	8007f50 <_vfiprintf_r+0x60>
 8007f4c:	68b5      	ldr	r5, [r6, #8]
 8007f4e:	e7df      	b.n	8007f10 <_vfiprintf_r+0x20>
 8007f50:	4b79      	ldr	r3, [pc, #484]	; (8008138 <_vfiprintf_r+0x248>)
 8007f52:	429d      	cmp	r5, r3
 8007f54:	bf08      	it	eq
 8007f56:	68f5      	ldreq	r5, [r6, #12]
 8007f58:	e7da      	b.n	8007f10 <_vfiprintf_r+0x20>
 8007f5a:	89ab      	ldrh	r3, [r5, #12]
 8007f5c:	0598      	lsls	r0, r3, #22
 8007f5e:	d4ed      	bmi.n	8007f3c <_vfiprintf_r+0x4c>
 8007f60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f62:	f7ff fde4 	bl	8007b2e <__retarget_lock_release_recursive>
 8007f66:	e7e9      	b.n	8007f3c <_vfiprintf_r+0x4c>
 8007f68:	2300      	movs	r3, #0
 8007f6a:	9309      	str	r3, [sp, #36]	; 0x24
 8007f6c:	2320      	movs	r3, #32
 8007f6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f72:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f76:	2330      	movs	r3, #48	; 0x30
 8007f78:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800813c <_vfiprintf_r+0x24c>
 8007f7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f80:	f04f 0901 	mov.w	r9, #1
 8007f84:	4623      	mov	r3, r4
 8007f86:	469a      	mov	sl, r3
 8007f88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f8c:	b10a      	cbz	r2, 8007f92 <_vfiprintf_r+0xa2>
 8007f8e:	2a25      	cmp	r2, #37	; 0x25
 8007f90:	d1f9      	bne.n	8007f86 <_vfiprintf_r+0x96>
 8007f92:	ebba 0b04 	subs.w	fp, sl, r4
 8007f96:	d00b      	beq.n	8007fb0 <_vfiprintf_r+0xc0>
 8007f98:	465b      	mov	r3, fp
 8007f9a:	4622      	mov	r2, r4
 8007f9c:	4629      	mov	r1, r5
 8007f9e:	4630      	mov	r0, r6
 8007fa0:	f7ff ff93 	bl	8007eca <__sfputs_r>
 8007fa4:	3001      	adds	r0, #1
 8007fa6:	f000 80aa 	beq.w	80080fe <_vfiprintf_r+0x20e>
 8007faa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007fac:	445a      	add	r2, fp
 8007fae:	9209      	str	r2, [sp, #36]	; 0x24
 8007fb0:	f89a 3000 	ldrb.w	r3, [sl]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	f000 80a2 	beq.w	80080fe <_vfiprintf_r+0x20e>
 8007fba:	2300      	movs	r3, #0
 8007fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8007fc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007fc4:	f10a 0a01 	add.w	sl, sl, #1
 8007fc8:	9304      	str	r3, [sp, #16]
 8007fca:	9307      	str	r3, [sp, #28]
 8007fcc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007fd0:	931a      	str	r3, [sp, #104]	; 0x68
 8007fd2:	4654      	mov	r4, sl
 8007fd4:	2205      	movs	r2, #5
 8007fd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fda:	4858      	ldr	r0, [pc, #352]	; (800813c <_vfiprintf_r+0x24c>)
 8007fdc:	f7f8 f918 	bl	8000210 <memchr>
 8007fe0:	9a04      	ldr	r2, [sp, #16]
 8007fe2:	b9d8      	cbnz	r0, 800801c <_vfiprintf_r+0x12c>
 8007fe4:	06d1      	lsls	r1, r2, #27
 8007fe6:	bf44      	itt	mi
 8007fe8:	2320      	movmi	r3, #32
 8007fea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007fee:	0713      	lsls	r3, r2, #28
 8007ff0:	bf44      	itt	mi
 8007ff2:	232b      	movmi	r3, #43	; 0x2b
 8007ff4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ff8:	f89a 3000 	ldrb.w	r3, [sl]
 8007ffc:	2b2a      	cmp	r3, #42	; 0x2a
 8007ffe:	d015      	beq.n	800802c <_vfiprintf_r+0x13c>
 8008000:	9a07      	ldr	r2, [sp, #28]
 8008002:	4654      	mov	r4, sl
 8008004:	2000      	movs	r0, #0
 8008006:	f04f 0c0a 	mov.w	ip, #10
 800800a:	4621      	mov	r1, r4
 800800c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008010:	3b30      	subs	r3, #48	; 0x30
 8008012:	2b09      	cmp	r3, #9
 8008014:	d94e      	bls.n	80080b4 <_vfiprintf_r+0x1c4>
 8008016:	b1b0      	cbz	r0, 8008046 <_vfiprintf_r+0x156>
 8008018:	9207      	str	r2, [sp, #28]
 800801a:	e014      	b.n	8008046 <_vfiprintf_r+0x156>
 800801c:	eba0 0308 	sub.w	r3, r0, r8
 8008020:	fa09 f303 	lsl.w	r3, r9, r3
 8008024:	4313      	orrs	r3, r2
 8008026:	9304      	str	r3, [sp, #16]
 8008028:	46a2      	mov	sl, r4
 800802a:	e7d2      	b.n	8007fd2 <_vfiprintf_r+0xe2>
 800802c:	9b03      	ldr	r3, [sp, #12]
 800802e:	1d19      	adds	r1, r3, #4
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	9103      	str	r1, [sp, #12]
 8008034:	2b00      	cmp	r3, #0
 8008036:	bfbb      	ittet	lt
 8008038:	425b      	neglt	r3, r3
 800803a:	f042 0202 	orrlt.w	r2, r2, #2
 800803e:	9307      	strge	r3, [sp, #28]
 8008040:	9307      	strlt	r3, [sp, #28]
 8008042:	bfb8      	it	lt
 8008044:	9204      	strlt	r2, [sp, #16]
 8008046:	7823      	ldrb	r3, [r4, #0]
 8008048:	2b2e      	cmp	r3, #46	; 0x2e
 800804a:	d10c      	bne.n	8008066 <_vfiprintf_r+0x176>
 800804c:	7863      	ldrb	r3, [r4, #1]
 800804e:	2b2a      	cmp	r3, #42	; 0x2a
 8008050:	d135      	bne.n	80080be <_vfiprintf_r+0x1ce>
 8008052:	9b03      	ldr	r3, [sp, #12]
 8008054:	1d1a      	adds	r2, r3, #4
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	9203      	str	r2, [sp, #12]
 800805a:	2b00      	cmp	r3, #0
 800805c:	bfb8      	it	lt
 800805e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008062:	3402      	adds	r4, #2
 8008064:	9305      	str	r3, [sp, #20]
 8008066:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800814c <_vfiprintf_r+0x25c>
 800806a:	7821      	ldrb	r1, [r4, #0]
 800806c:	2203      	movs	r2, #3
 800806e:	4650      	mov	r0, sl
 8008070:	f7f8 f8ce 	bl	8000210 <memchr>
 8008074:	b140      	cbz	r0, 8008088 <_vfiprintf_r+0x198>
 8008076:	2340      	movs	r3, #64	; 0x40
 8008078:	eba0 000a 	sub.w	r0, r0, sl
 800807c:	fa03 f000 	lsl.w	r0, r3, r0
 8008080:	9b04      	ldr	r3, [sp, #16]
 8008082:	4303      	orrs	r3, r0
 8008084:	3401      	adds	r4, #1
 8008086:	9304      	str	r3, [sp, #16]
 8008088:	f814 1b01 	ldrb.w	r1, [r4], #1
 800808c:	482c      	ldr	r0, [pc, #176]	; (8008140 <_vfiprintf_r+0x250>)
 800808e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008092:	2206      	movs	r2, #6
 8008094:	f7f8 f8bc 	bl	8000210 <memchr>
 8008098:	2800      	cmp	r0, #0
 800809a:	d03f      	beq.n	800811c <_vfiprintf_r+0x22c>
 800809c:	4b29      	ldr	r3, [pc, #164]	; (8008144 <_vfiprintf_r+0x254>)
 800809e:	bb1b      	cbnz	r3, 80080e8 <_vfiprintf_r+0x1f8>
 80080a0:	9b03      	ldr	r3, [sp, #12]
 80080a2:	3307      	adds	r3, #7
 80080a4:	f023 0307 	bic.w	r3, r3, #7
 80080a8:	3308      	adds	r3, #8
 80080aa:	9303      	str	r3, [sp, #12]
 80080ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080ae:	443b      	add	r3, r7
 80080b0:	9309      	str	r3, [sp, #36]	; 0x24
 80080b2:	e767      	b.n	8007f84 <_vfiprintf_r+0x94>
 80080b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80080b8:	460c      	mov	r4, r1
 80080ba:	2001      	movs	r0, #1
 80080bc:	e7a5      	b.n	800800a <_vfiprintf_r+0x11a>
 80080be:	2300      	movs	r3, #0
 80080c0:	3401      	adds	r4, #1
 80080c2:	9305      	str	r3, [sp, #20]
 80080c4:	4619      	mov	r1, r3
 80080c6:	f04f 0c0a 	mov.w	ip, #10
 80080ca:	4620      	mov	r0, r4
 80080cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080d0:	3a30      	subs	r2, #48	; 0x30
 80080d2:	2a09      	cmp	r2, #9
 80080d4:	d903      	bls.n	80080de <_vfiprintf_r+0x1ee>
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d0c5      	beq.n	8008066 <_vfiprintf_r+0x176>
 80080da:	9105      	str	r1, [sp, #20]
 80080dc:	e7c3      	b.n	8008066 <_vfiprintf_r+0x176>
 80080de:	fb0c 2101 	mla	r1, ip, r1, r2
 80080e2:	4604      	mov	r4, r0
 80080e4:	2301      	movs	r3, #1
 80080e6:	e7f0      	b.n	80080ca <_vfiprintf_r+0x1da>
 80080e8:	ab03      	add	r3, sp, #12
 80080ea:	9300      	str	r3, [sp, #0]
 80080ec:	462a      	mov	r2, r5
 80080ee:	4b16      	ldr	r3, [pc, #88]	; (8008148 <_vfiprintf_r+0x258>)
 80080f0:	a904      	add	r1, sp, #16
 80080f2:	4630      	mov	r0, r6
 80080f4:	f3af 8000 	nop.w
 80080f8:	4607      	mov	r7, r0
 80080fa:	1c78      	adds	r0, r7, #1
 80080fc:	d1d6      	bne.n	80080ac <_vfiprintf_r+0x1bc>
 80080fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008100:	07d9      	lsls	r1, r3, #31
 8008102:	d405      	bmi.n	8008110 <_vfiprintf_r+0x220>
 8008104:	89ab      	ldrh	r3, [r5, #12]
 8008106:	059a      	lsls	r2, r3, #22
 8008108:	d402      	bmi.n	8008110 <_vfiprintf_r+0x220>
 800810a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800810c:	f7ff fd0f 	bl	8007b2e <__retarget_lock_release_recursive>
 8008110:	89ab      	ldrh	r3, [r5, #12]
 8008112:	065b      	lsls	r3, r3, #25
 8008114:	f53f af12 	bmi.w	8007f3c <_vfiprintf_r+0x4c>
 8008118:	9809      	ldr	r0, [sp, #36]	; 0x24
 800811a:	e711      	b.n	8007f40 <_vfiprintf_r+0x50>
 800811c:	ab03      	add	r3, sp, #12
 800811e:	9300      	str	r3, [sp, #0]
 8008120:	462a      	mov	r2, r5
 8008122:	4b09      	ldr	r3, [pc, #36]	; (8008148 <_vfiprintf_r+0x258>)
 8008124:	a904      	add	r1, sp, #16
 8008126:	4630      	mov	r0, r6
 8008128:	f000 f880 	bl	800822c <_printf_i>
 800812c:	e7e4      	b.n	80080f8 <_vfiprintf_r+0x208>
 800812e:	bf00      	nop
 8008130:	08008c9c 	.word	0x08008c9c
 8008134:	08008cbc 	.word	0x08008cbc
 8008138:	08008c7c 	.word	0x08008c7c
 800813c:	08008cdc 	.word	0x08008cdc
 8008140:	08008ce6 	.word	0x08008ce6
 8008144:	00000000 	.word	0x00000000
 8008148:	08007ecb 	.word	0x08007ecb
 800814c:	08008ce2 	.word	0x08008ce2

08008150 <_printf_common>:
 8008150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008154:	4616      	mov	r6, r2
 8008156:	4699      	mov	r9, r3
 8008158:	688a      	ldr	r2, [r1, #8]
 800815a:	690b      	ldr	r3, [r1, #16]
 800815c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008160:	4293      	cmp	r3, r2
 8008162:	bfb8      	it	lt
 8008164:	4613      	movlt	r3, r2
 8008166:	6033      	str	r3, [r6, #0]
 8008168:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800816c:	4607      	mov	r7, r0
 800816e:	460c      	mov	r4, r1
 8008170:	b10a      	cbz	r2, 8008176 <_printf_common+0x26>
 8008172:	3301      	adds	r3, #1
 8008174:	6033      	str	r3, [r6, #0]
 8008176:	6823      	ldr	r3, [r4, #0]
 8008178:	0699      	lsls	r1, r3, #26
 800817a:	bf42      	ittt	mi
 800817c:	6833      	ldrmi	r3, [r6, #0]
 800817e:	3302      	addmi	r3, #2
 8008180:	6033      	strmi	r3, [r6, #0]
 8008182:	6825      	ldr	r5, [r4, #0]
 8008184:	f015 0506 	ands.w	r5, r5, #6
 8008188:	d106      	bne.n	8008198 <_printf_common+0x48>
 800818a:	f104 0a19 	add.w	sl, r4, #25
 800818e:	68e3      	ldr	r3, [r4, #12]
 8008190:	6832      	ldr	r2, [r6, #0]
 8008192:	1a9b      	subs	r3, r3, r2
 8008194:	42ab      	cmp	r3, r5
 8008196:	dc26      	bgt.n	80081e6 <_printf_common+0x96>
 8008198:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800819c:	1e13      	subs	r3, r2, #0
 800819e:	6822      	ldr	r2, [r4, #0]
 80081a0:	bf18      	it	ne
 80081a2:	2301      	movne	r3, #1
 80081a4:	0692      	lsls	r2, r2, #26
 80081a6:	d42b      	bmi.n	8008200 <_printf_common+0xb0>
 80081a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80081ac:	4649      	mov	r1, r9
 80081ae:	4638      	mov	r0, r7
 80081b0:	47c0      	blx	r8
 80081b2:	3001      	adds	r0, #1
 80081b4:	d01e      	beq.n	80081f4 <_printf_common+0xa4>
 80081b6:	6823      	ldr	r3, [r4, #0]
 80081b8:	68e5      	ldr	r5, [r4, #12]
 80081ba:	6832      	ldr	r2, [r6, #0]
 80081bc:	f003 0306 	and.w	r3, r3, #6
 80081c0:	2b04      	cmp	r3, #4
 80081c2:	bf08      	it	eq
 80081c4:	1aad      	subeq	r5, r5, r2
 80081c6:	68a3      	ldr	r3, [r4, #8]
 80081c8:	6922      	ldr	r2, [r4, #16]
 80081ca:	bf0c      	ite	eq
 80081cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80081d0:	2500      	movne	r5, #0
 80081d2:	4293      	cmp	r3, r2
 80081d4:	bfc4      	itt	gt
 80081d6:	1a9b      	subgt	r3, r3, r2
 80081d8:	18ed      	addgt	r5, r5, r3
 80081da:	2600      	movs	r6, #0
 80081dc:	341a      	adds	r4, #26
 80081de:	42b5      	cmp	r5, r6
 80081e0:	d11a      	bne.n	8008218 <_printf_common+0xc8>
 80081e2:	2000      	movs	r0, #0
 80081e4:	e008      	b.n	80081f8 <_printf_common+0xa8>
 80081e6:	2301      	movs	r3, #1
 80081e8:	4652      	mov	r2, sl
 80081ea:	4649      	mov	r1, r9
 80081ec:	4638      	mov	r0, r7
 80081ee:	47c0      	blx	r8
 80081f0:	3001      	adds	r0, #1
 80081f2:	d103      	bne.n	80081fc <_printf_common+0xac>
 80081f4:	f04f 30ff 	mov.w	r0, #4294967295
 80081f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081fc:	3501      	adds	r5, #1
 80081fe:	e7c6      	b.n	800818e <_printf_common+0x3e>
 8008200:	18e1      	adds	r1, r4, r3
 8008202:	1c5a      	adds	r2, r3, #1
 8008204:	2030      	movs	r0, #48	; 0x30
 8008206:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800820a:	4422      	add	r2, r4
 800820c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008210:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008214:	3302      	adds	r3, #2
 8008216:	e7c7      	b.n	80081a8 <_printf_common+0x58>
 8008218:	2301      	movs	r3, #1
 800821a:	4622      	mov	r2, r4
 800821c:	4649      	mov	r1, r9
 800821e:	4638      	mov	r0, r7
 8008220:	47c0      	blx	r8
 8008222:	3001      	adds	r0, #1
 8008224:	d0e6      	beq.n	80081f4 <_printf_common+0xa4>
 8008226:	3601      	adds	r6, #1
 8008228:	e7d9      	b.n	80081de <_printf_common+0x8e>
	...

0800822c <_printf_i>:
 800822c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008230:	460c      	mov	r4, r1
 8008232:	4691      	mov	r9, r2
 8008234:	7e27      	ldrb	r7, [r4, #24]
 8008236:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008238:	2f78      	cmp	r7, #120	; 0x78
 800823a:	4680      	mov	r8, r0
 800823c:	469a      	mov	sl, r3
 800823e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008242:	d807      	bhi.n	8008254 <_printf_i+0x28>
 8008244:	2f62      	cmp	r7, #98	; 0x62
 8008246:	d80a      	bhi.n	800825e <_printf_i+0x32>
 8008248:	2f00      	cmp	r7, #0
 800824a:	f000 80d8 	beq.w	80083fe <_printf_i+0x1d2>
 800824e:	2f58      	cmp	r7, #88	; 0x58
 8008250:	f000 80a3 	beq.w	800839a <_printf_i+0x16e>
 8008254:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008258:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800825c:	e03a      	b.n	80082d4 <_printf_i+0xa8>
 800825e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008262:	2b15      	cmp	r3, #21
 8008264:	d8f6      	bhi.n	8008254 <_printf_i+0x28>
 8008266:	a001      	add	r0, pc, #4	; (adr r0, 800826c <_printf_i+0x40>)
 8008268:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800826c:	080082c5 	.word	0x080082c5
 8008270:	080082d9 	.word	0x080082d9
 8008274:	08008255 	.word	0x08008255
 8008278:	08008255 	.word	0x08008255
 800827c:	08008255 	.word	0x08008255
 8008280:	08008255 	.word	0x08008255
 8008284:	080082d9 	.word	0x080082d9
 8008288:	08008255 	.word	0x08008255
 800828c:	08008255 	.word	0x08008255
 8008290:	08008255 	.word	0x08008255
 8008294:	08008255 	.word	0x08008255
 8008298:	080083e5 	.word	0x080083e5
 800829c:	08008309 	.word	0x08008309
 80082a0:	080083c7 	.word	0x080083c7
 80082a4:	08008255 	.word	0x08008255
 80082a8:	08008255 	.word	0x08008255
 80082ac:	08008407 	.word	0x08008407
 80082b0:	08008255 	.word	0x08008255
 80082b4:	08008309 	.word	0x08008309
 80082b8:	08008255 	.word	0x08008255
 80082bc:	08008255 	.word	0x08008255
 80082c0:	080083cf 	.word	0x080083cf
 80082c4:	680b      	ldr	r3, [r1, #0]
 80082c6:	1d1a      	adds	r2, r3, #4
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	600a      	str	r2, [r1, #0]
 80082cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80082d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80082d4:	2301      	movs	r3, #1
 80082d6:	e0a3      	b.n	8008420 <_printf_i+0x1f4>
 80082d8:	6825      	ldr	r5, [r4, #0]
 80082da:	6808      	ldr	r0, [r1, #0]
 80082dc:	062e      	lsls	r6, r5, #24
 80082de:	f100 0304 	add.w	r3, r0, #4
 80082e2:	d50a      	bpl.n	80082fa <_printf_i+0xce>
 80082e4:	6805      	ldr	r5, [r0, #0]
 80082e6:	600b      	str	r3, [r1, #0]
 80082e8:	2d00      	cmp	r5, #0
 80082ea:	da03      	bge.n	80082f4 <_printf_i+0xc8>
 80082ec:	232d      	movs	r3, #45	; 0x2d
 80082ee:	426d      	negs	r5, r5
 80082f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082f4:	485e      	ldr	r0, [pc, #376]	; (8008470 <_printf_i+0x244>)
 80082f6:	230a      	movs	r3, #10
 80082f8:	e019      	b.n	800832e <_printf_i+0x102>
 80082fa:	f015 0f40 	tst.w	r5, #64	; 0x40
 80082fe:	6805      	ldr	r5, [r0, #0]
 8008300:	600b      	str	r3, [r1, #0]
 8008302:	bf18      	it	ne
 8008304:	b22d      	sxthne	r5, r5
 8008306:	e7ef      	b.n	80082e8 <_printf_i+0xbc>
 8008308:	680b      	ldr	r3, [r1, #0]
 800830a:	6825      	ldr	r5, [r4, #0]
 800830c:	1d18      	adds	r0, r3, #4
 800830e:	6008      	str	r0, [r1, #0]
 8008310:	0628      	lsls	r0, r5, #24
 8008312:	d501      	bpl.n	8008318 <_printf_i+0xec>
 8008314:	681d      	ldr	r5, [r3, #0]
 8008316:	e002      	b.n	800831e <_printf_i+0xf2>
 8008318:	0669      	lsls	r1, r5, #25
 800831a:	d5fb      	bpl.n	8008314 <_printf_i+0xe8>
 800831c:	881d      	ldrh	r5, [r3, #0]
 800831e:	4854      	ldr	r0, [pc, #336]	; (8008470 <_printf_i+0x244>)
 8008320:	2f6f      	cmp	r7, #111	; 0x6f
 8008322:	bf0c      	ite	eq
 8008324:	2308      	moveq	r3, #8
 8008326:	230a      	movne	r3, #10
 8008328:	2100      	movs	r1, #0
 800832a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800832e:	6866      	ldr	r6, [r4, #4]
 8008330:	60a6      	str	r6, [r4, #8]
 8008332:	2e00      	cmp	r6, #0
 8008334:	bfa2      	ittt	ge
 8008336:	6821      	ldrge	r1, [r4, #0]
 8008338:	f021 0104 	bicge.w	r1, r1, #4
 800833c:	6021      	strge	r1, [r4, #0]
 800833e:	b90d      	cbnz	r5, 8008344 <_printf_i+0x118>
 8008340:	2e00      	cmp	r6, #0
 8008342:	d04d      	beq.n	80083e0 <_printf_i+0x1b4>
 8008344:	4616      	mov	r6, r2
 8008346:	fbb5 f1f3 	udiv	r1, r5, r3
 800834a:	fb03 5711 	mls	r7, r3, r1, r5
 800834e:	5dc7      	ldrb	r7, [r0, r7]
 8008350:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008354:	462f      	mov	r7, r5
 8008356:	42bb      	cmp	r3, r7
 8008358:	460d      	mov	r5, r1
 800835a:	d9f4      	bls.n	8008346 <_printf_i+0x11a>
 800835c:	2b08      	cmp	r3, #8
 800835e:	d10b      	bne.n	8008378 <_printf_i+0x14c>
 8008360:	6823      	ldr	r3, [r4, #0]
 8008362:	07df      	lsls	r7, r3, #31
 8008364:	d508      	bpl.n	8008378 <_printf_i+0x14c>
 8008366:	6923      	ldr	r3, [r4, #16]
 8008368:	6861      	ldr	r1, [r4, #4]
 800836a:	4299      	cmp	r1, r3
 800836c:	bfde      	ittt	le
 800836e:	2330      	movle	r3, #48	; 0x30
 8008370:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008374:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008378:	1b92      	subs	r2, r2, r6
 800837a:	6122      	str	r2, [r4, #16]
 800837c:	f8cd a000 	str.w	sl, [sp]
 8008380:	464b      	mov	r3, r9
 8008382:	aa03      	add	r2, sp, #12
 8008384:	4621      	mov	r1, r4
 8008386:	4640      	mov	r0, r8
 8008388:	f7ff fee2 	bl	8008150 <_printf_common>
 800838c:	3001      	adds	r0, #1
 800838e:	d14c      	bne.n	800842a <_printf_i+0x1fe>
 8008390:	f04f 30ff 	mov.w	r0, #4294967295
 8008394:	b004      	add	sp, #16
 8008396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800839a:	4835      	ldr	r0, [pc, #212]	; (8008470 <_printf_i+0x244>)
 800839c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80083a0:	6823      	ldr	r3, [r4, #0]
 80083a2:	680e      	ldr	r6, [r1, #0]
 80083a4:	061f      	lsls	r7, r3, #24
 80083a6:	f856 5b04 	ldr.w	r5, [r6], #4
 80083aa:	600e      	str	r6, [r1, #0]
 80083ac:	d514      	bpl.n	80083d8 <_printf_i+0x1ac>
 80083ae:	07d9      	lsls	r1, r3, #31
 80083b0:	bf44      	itt	mi
 80083b2:	f043 0320 	orrmi.w	r3, r3, #32
 80083b6:	6023      	strmi	r3, [r4, #0]
 80083b8:	b91d      	cbnz	r5, 80083c2 <_printf_i+0x196>
 80083ba:	6823      	ldr	r3, [r4, #0]
 80083bc:	f023 0320 	bic.w	r3, r3, #32
 80083c0:	6023      	str	r3, [r4, #0]
 80083c2:	2310      	movs	r3, #16
 80083c4:	e7b0      	b.n	8008328 <_printf_i+0xfc>
 80083c6:	6823      	ldr	r3, [r4, #0]
 80083c8:	f043 0320 	orr.w	r3, r3, #32
 80083cc:	6023      	str	r3, [r4, #0]
 80083ce:	2378      	movs	r3, #120	; 0x78
 80083d0:	4828      	ldr	r0, [pc, #160]	; (8008474 <_printf_i+0x248>)
 80083d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80083d6:	e7e3      	b.n	80083a0 <_printf_i+0x174>
 80083d8:	065e      	lsls	r6, r3, #25
 80083da:	bf48      	it	mi
 80083dc:	b2ad      	uxthmi	r5, r5
 80083de:	e7e6      	b.n	80083ae <_printf_i+0x182>
 80083e0:	4616      	mov	r6, r2
 80083e2:	e7bb      	b.n	800835c <_printf_i+0x130>
 80083e4:	680b      	ldr	r3, [r1, #0]
 80083e6:	6826      	ldr	r6, [r4, #0]
 80083e8:	6960      	ldr	r0, [r4, #20]
 80083ea:	1d1d      	adds	r5, r3, #4
 80083ec:	600d      	str	r5, [r1, #0]
 80083ee:	0635      	lsls	r5, r6, #24
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	d501      	bpl.n	80083f8 <_printf_i+0x1cc>
 80083f4:	6018      	str	r0, [r3, #0]
 80083f6:	e002      	b.n	80083fe <_printf_i+0x1d2>
 80083f8:	0671      	lsls	r1, r6, #25
 80083fa:	d5fb      	bpl.n	80083f4 <_printf_i+0x1c8>
 80083fc:	8018      	strh	r0, [r3, #0]
 80083fe:	2300      	movs	r3, #0
 8008400:	6123      	str	r3, [r4, #16]
 8008402:	4616      	mov	r6, r2
 8008404:	e7ba      	b.n	800837c <_printf_i+0x150>
 8008406:	680b      	ldr	r3, [r1, #0]
 8008408:	1d1a      	adds	r2, r3, #4
 800840a:	600a      	str	r2, [r1, #0]
 800840c:	681e      	ldr	r6, [r3, #0]
 800840e:	6862      	ldr	r2, [r4, #4]
 8008410:	2100      	movs	r1, #0
 8008412:	4630      	mov	r0, r6
 8008414:	f7f7 fefc 	bl	8000210 <memchr>
 8008418:	b108      	cbz	r0, 800841e <_printf_i+0x1f2>
 800841a:	1b80      	subs	r0, r0, r6
 800841c:	6060      	str	r0, [r4, #4]
 800841e:	6863      	ldr	r3, [r4, #4]
 8008420:	6123      	str	r3, [r4, #16]
 8008422:	2300      	movs	r3, #0
 8008424:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008428:	e7a8      	b.n	800837c <_printf_i+0x150>
 800842a:	6923      	ldr	r3, [r4, #16]
 800842c:	4632      	mov	r2, r6
 800842e:	4649      	mov	r1, r9
 8008430:	4640      	mov	r0, r8
 8008432:	47d0      	blx	sl
 8008434:	3001      	adds	r0, #1
 8008436:	d0ab      	beq.n	8008390 <_printf_i+0x164>
 8008438:	6823      	ldr	r3, [r4, #0]
 800843a:	079b      	lsls	r3, r3, #30
 800843c:	d413      	bmi.n	8008466 <_printf_i+0x23a>
 800843e:	68e0      	ldr	r0, [r4, #12]
 8008440:	9b03      	ldr	r3, [sp, #12]
 8008442:	4298      	cmp	r0, r3
 8008444:	bfb8      	it	lt
 8008446:	4618      	movlt	r0, r3
 8008448:	e7a4      	b.n	8008394 <_printf_i+0x168>
 800844a:	2301      	movs	r3, #1
 800844c:	4632      	mov	r2, r6
 800844e:	4649      	mov	r1, r9
 8008450:	4640      	mov	r0, r8
 8008452:	47d0      	blx	sl
 8008454:	3001      	adds	r0, #1
 8008456:	d09b      	beq.n	8008390 <_printf_i+0x164>
 8008458:	3501      	adds	r5, #1
 800845a:	68e3      	ldr	r3, [r4, #12]
 800845c:	9903      	ldr	r1, [sp, #12]
 800845e:	1a5b      	subs	r3, r3, r1
 8008460:	42ab      	cmp	r3, r5
 8008462:	dcf2      	bgt.n	800844a <_printf_i+0x21e>
 8008464:	e7eb      	b.n	800843e <_printf_i+0x212>
 8008466:	2500      	movs	r5, #0
 8008468:	f104 0619 	add.w	r6, r4, #25
 800846c:	e7f5      	b.n	800845a <_printf_i+0x22e>
 800846e:	bf00      	nop
 8008470:	08008ced 	.word	0x08008ced
 8008474:	08008cfe 	.word	0x08008cfe

08008478 <_sbrk_r>:
 8008478:	b538      	push	{r3, r4, r5, lr}
 800847a:	4d06      	ldr	r5, [pc, #24]	; (8008494 <_sbrk_r+0x1c>)
 800847c:	2300      	movs	r3, #0
 800847e:	4604      	mov	r4, r0
 8008480:	4608      	mov	r0, r1
 8008482:	602b      	str	r3, [r5, #0]
 8008484:	f7fa fa36 	bl	80028f4 <_sbrk>
 8008488:	1c43      	adds	r3, r0, #1
 800848a:	d102      	bne.n	8008492 <_sbrk_r+0x1a>
 800848c:	682b      	ldr	r3, [r5, #0]
 800848e:	b103      	cbz	r3, 8008492 <_sbrk_r+0x1a>
 8008490:	6023      	str	r3, [r4, #0]
 8008492:	bd38      	pop	{r3, r4, r5, pc}
 8008494:	20000938 	.word	0x20000938

08008498 <__sread>:
 8008498:	b510      	push	{r4, lr}
 800849a:	460c      	mov	r4, r1
 800849c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084a0:	f000 fb02 	bl	8008aa8 <_read_r>
 80084a4:	2800      	cmp	r0, #0
 80084a6:	bfab      	itete	ge
 80084a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80084aa:	89a3      	ldrhlt	r3, [r4, #12]
 80084ac:	181b      	addge	r3, r3, r0
 80084ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80084b2:	bfac      	ite	ge
 80084b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80084b6:	81a3      	strhlt	r3, [r4, #12]
 80084b8:	bd10      	pop	{r4, pc}

080084ba <__swrite>:
 80084ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084be:	461f      	mov	r7, r3
 80084c0:	898b      	ldrh	r3, [r1, #12]
 80084c2:	05db      	lsls	r3, r3, #23
 80084c4:	4605      	mov	r5, r0
 80084c6:	460c      	mov	r4, r1
 80084c8:	4616      	mov	r6, r2
 80084ca:	d505      	bpl.n	80084d8 <__swrite+0x1e>
 80084cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084d0:	2302      	movs	r3, #2
 80084d2:	2200      	movs	r2, #0
 80084d4:	f000 f9c8 	bl	8008868 <_lseek_r>
 80084d8:	89a3      	ldrh	r3, [r4, #12]
 80084da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80084e2:	81a3      	strh	r3, [r4, #12]
 80084e4:	4632      	mov	r2, r6
 80084e6:	463b      	mov	r3, r7
 80084e8:	4628      	mov	r0, r5
 80084ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80084ee:	f000 b869 	b.w	80085c4 <_write_r>

080084f2 <__sseek>:
 80084f2:	b510      	push	{r4, lr}
 80084f4:	460c      	mov	r4, r1
 80084f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084fa:	f000 f9b5 	bl	8008868 <_lseek_r>
 80084fe:	1c43      	adds	r3, r0, #1
 8008500:	89a3      	ldrh	r3, [r4, #12]
 8008502:	bf15      	itete	ne
 8008504:	6560      	strne	r0, [r4, #84]	; 0x54
 8008506:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800850a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800850e:	81a3      	strheq	r3, [r4, #12]
 8008510:	bf18      	it	ne
 8008512:	81a3      	strhne	r3, [r4, #12]
 8008514:	bd10      	pop	{r4, pc}

08008516 <__sclose>:
 8008516:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800851a:	f000 b8d3 	b.w	80086c4 <_close_r>
	...

08008520 <__swbuf_r>:
 8008520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008522:	460e      	mov	r6, r1
 8008524:	4614      	mov	r4, r2
 8008526:	4605      	mov	r5, r0
 8008528:	b118      	cbz	r0, 8008532 <__swbuf_r+0x12>
 800852a:	6983      	ldr	r3, [r0, #24]
 800852c:	b90b      	cbnz	r3, 8008532 <__swbuf_r+0x12>
 800852e:	f7ff fa5f 	bl	80079f0 <__sinit>
 8008532:	4b21      	ldr	r3, [pc, #132]	; (80085b8 <__swbuf_r+0x98>)
 8008534:	429c      	cmp	r4, r3
 8008536:	d12b      	bne.n	8008590 <__swbuf_r+0x70>
 8008538:	686c      	ldr	r4, [r5, #4]
 800853a:	69a3      	ldr	r3, [r4, #24]
 800853c:	60a3      	str	r3, [r4, #8]
 800853e:	89a3      	ldrh	r3, [r4, #12]
 8008540:	071a      	lsls	r2, r3, #28
 8008542:	d52f      	bpl.n	80085a4 <__swbuf_r+0x84>
 8008544:	6923      	ldr	r3, [r4, #16]
 8008546:	b36b      	cbz	r3, 80085a4 <__swbuf_r+0x84>
 8008548:	6923      	ldr	r3, [r4, #16]
 800854a:	6820      	ldr	r0, [r4, #0]
 800854c:	1ac0      	subs	r0, r0, r3
 800854e:	6963      	ldr	r3, [r4, #20]
 8008550:	b2f6      	uxtb	r6, r6
 8008552:	4283      	cmp	r3, r0
 8008554:	4637      	mov	r7, r6
 8008556:	dc04      	bgt.n	8008562 <__swbuf_r+0x42>
 8008558:	4621      	mov	r1, r4
 800855a:	4628      	mov	r0, r5
 800855c:	f000 f948 	bl	80087f0 <_fflush_r>
 8008560:	bb30      	cbnz	r0, 80085b0 <__swbuf_r+0x90>
 8008562:	68a3      	ldr	r3, [r4, #8]
 8008564:	3b01      	subs	r3, #1
 8008566:	60a3      	str	r3, [r4, #8]
 8008568:	6823      	ldr	r3, [r4, #0]
 800856a:	1c5a      	adds	r2, r3, #1
 800856c:	6022      	str	r2, [r4, #0]
 800856e:	701e      	strb	r6, [r3, #0]
 8008570:	6963      	ldr	r3, [r4, #20]
 8008572:	3001      	adds	r0, #1
 8008574:	4283      	cmp	r3, r0
 8008576:	d004      	beq.n	8008582 <__swbuf_r+0x62>
 8008578:	89a3      	ldrh	r3, [r4, #12]
 800857a:	07db      	lsls	r3, r3, #31
 800857c:	d506      	bpl.n	800858c <__swbuf_r+0x6c>
 800857e:	2e0a      	cmp	r6, #10
 8008580:	d104      	bne.n	800858c <__swbuf_r+0x6c>
 8008582:	4621      	mov	r1, r4
 8008584:	4628      	mov	r0, r5
 8008586:	f000 f933 	bl	80087f0 <_fflush_r>
 800858a:	b988      	cbnz	r0, 80085b0 <__swbuf_r+0x90>
 800858c:	4638      	mov	r0, r7
 800858e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008590:	4b0a      	ldr	r3, [pc, #40]	; (80085bc <__swbuf_r+0x9c>)
 8008592:	429c      	cmp	r4, r3
 8008594:	d101      	bne.n	800859a <__swbuf_r+0x7a>
 8008596:	68ac      	ldr	r4, [r5, #8]
 8008598:	e7cf      	b.n	800853a <__swbuf_r+0x1a>
 800859a:	4b09      	ldr	r3, [pc, #36]	; (80085c0 <__swbuf_r+0xa0>)
 800859c:	429c      	cmp	r4, r3
 800859e:	bf08      	it	eq
 80085a0:	68ec      	ldreq	r4, [r5, #12]
 80085a2:	e7ca      	b.n	800853a <__swbuf_r+0x1a>
 80085a4:	4621      	mov	r1, r4
 80085a6:	4628      	mov	r0, r5
 80085a8:	f000 f81e 	bl	80085e8 <__swsetup_r>
 80085ac:	2800      	cmp	r0, #0
 80085ae:	d0cb      	beq.n	8008548 <__swbuf_r+0x28>
 80085b0:	f04f 37ff 	mov.w	r7, #4294967295
 80085b4:	e7ea      	b.n	800858c <__swbuf_r+0x6c>
 80085b6:	bf00      	nop
 80085b8:	08008c9c 	.word	0x08008c9c
 80085bc:	08008cbc 	.word	0x08008cbc
 80085c0:	08008c7c 	.word	0x08008c7c

080085c4 <_write_r>:
 80085c4:	b538      	push	{r3, r4, r5, lr}
 80085c6:	4d07      	ldr	r5, [pc, #28]	; (80085e4 <_write_r+0x20>)
 80085c8:	4604      	mov	r4, r0
 80085ca:	4608      	mov	r0, r1
 80085cc:	4611      	mov	r1, r2
 80085ce:	2200      	movs	r2, #0
 80085d0:	602a      	str	r2, [r5, #0]
 80085d2:	461a      	mov	r2, r3
 80085d4:	f7fa f93d 	bl	8002852 <_write>
 80085d8:	1c43      	adds	r3, r0, #1
 80085da:	d102      	bne.n	80085e2 <_write_r+0x1e>
 80085dc:	682b      	ldr	r3, [r5, #0]
 80085de:	b103      	cbz	r3, 80085e2 <_write_r+0x1e>
 80085e0:	6023      	str	r3, [r4, #0]
 80085e2:	bd38      	pop	{r3, r4, r5, pc}
 80085e4:	20000938 	.word	0x20000938

080085e8 <__swsetup_r>:
 80085e8:	4b32      	ldr	r3, [pc, #200]	; (80086b4 <__swsetup_r+0xcc>)
 80085ea:	b570      	push	{r4, r5, r6, lr}
 80085ec:	681d      	ldr	r5, [r3, #0]
 80085ee:	4606      	mov	r6, r0
 80085f0:	460c      	mov	r4, r1
 80085f2:	b125      	cbz	r5, 80085fe <__swsetup_r+0x16>
 80085f4:	69ab      	ldr	r3, [r5, #24]
 80085f6:	b913      	cbnz	r3, 80085fe <__swsetup_r+0x16>
 80085f8:	4628      	mov	r0, r5
 80085fa:	f7ff f9f9 	bl	80079f0 <__sinit>
 80085fe:	4b2e      	ldr	r3, [pc, #184]	; (80086b8 <__swsetup_r+0xd0>)
 8008600:	429c      	cmp	r4, r3
 8008602:	d10f      	bne.n	8008624 <__swsetup_r+0x3c>
 8008604:	686c      	ldr	r4, [r5, #4]
 8008606:	89a3      	ldrh	r3, [r4, #12]
 8008608:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800860c:	0719      	lsls	r1, r3, #28
 800860e:	d42c      	bmi.n	800866a <__swsetup_r+0x82>
 8008610:	06dd      	lsls	r5, r3, #27
 8008612:	d411      	bmi.n	8008638 <__swsetup_r+0x50>
 8008614:	2309      	movs	r3, #9
 8008616:	6033      	str	r3, [r6, #0]
 8008618:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800861c:	81a3      	strh	r3, [r4, #12]
 800861e:	f04f 30ff 	mov.w	r0, #4294967295
 8008622:	e03e      	b.n	80086a2 <__swsetup_r+0xba>
 8008624:	4b25      	ldr	r3, [pc, #148]	; (80086bc <__swsetup_r+0xd4>)
 8008626:	429c      	cmp	r4, r3
 8008628:	d101      	bne.n	800862e <__swsetup_r+0x46>
 800862a:	68ac      	ldr	r4, [r5, #8]
 800862c:	e7eb      	b.n	8008606 <__swsetup_r+0x1e>
 800862e:	4b24      	ldr	r3, [pc, #144]	; (80086c0 <__swsetup_r+0xd8>)
 8008630:	429c      	cmp	r4, r3
 8008632:	bf08      	it	eq
 8008634:	68ec      	ldreq	r4, [r5, #12]
 8008636:	e7e6      	b.n	8008606 <__swsetup_r+0x1e>
 8008638:	0758      	lsls	r0, r3, #29
 800863a:	d512      	bpl.n	8008662 <__swsetup_r+0x7a>
 800863c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800863e:	b141      	cbz	r1, 8008652 <__swsetup_r+0x6a>
 8008640:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008644:	4299      	cmp	r1, r3
 8008646:	d002      	beq.n	800864e <__swsetup_r+0x66>
 8008648:	4630      	mov	r0, r6
 800864a:	f000 f9b7 	bl	80089bc <_free_r>
 800864e:	2300      	movs	r3, #0
 8008650:	6363      	str	r3, [r4, #52]	; 0x34
 8008652:	89a3      	ldrh	r3, [r4, #12]
 8008654:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008658:	81a3      	strh	r3, [r4, #12]
 800865a:	2300      	movs	r3, #0
 800865c:	6063      	str	r3, [r4, #4]
 800865e:	6923      	ldr	r3, [r4, #16]
 8008660:	6023      	str	r3, [r4, #0]
 8008662:	89a3      	ldrh	r3, [r4, #12]
 8008664:	f043 0308 	orr.w	r3, r3, #8
 8008668:	81a3      	strh	r3, [r4, #12]
 800866a:	6923      	ldr	r3, [r4, #16]
 800866c:	b94b      	cbnz	r3, 8008682 <__swsetup_r+0x9a>
 800866e:	89a3      	ldrh	r3, [r4, #12]
 8008670:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008674:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008678:	d003      	beq.n	8008682 <__swsetup_r+0x9a>
 800867a:	4621      	mov	r1, r4
 800867c:	4630      	mov	r0, r6
 800867e:	f000 f929 	bl	80088d4 <__smakebuf_r>
 8008682:	89a0      	ldrh	r0, [r4, #12]
 8008684:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008688:	f010 0301 	ands.w	r3, r0, #1
 800868c:	d00a      	beq.n	80086a4 <__swsetup_r+0xbc>
 800868e:	2300      	movs	r3, #0
 8008690:	60a3      	str	r3, [r4, #8]
 8008692:	6963      	ldr	r3, [r4, #20]
 8008694:	425b      	negs	r3, r3
 8008696:	61a3      	str	r3, [r4, #24]
 8008698:	6923      	ldr	r3, [r4, #16]
 800869a:	b943      	cbnz	r3, 80086ae <__swsetup_r+0xc6>
 800869c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80086a0:	d1ba      	bne.n	8008618 <__swsetup_r+0x30>
 80086a2:	bd70      	pop	{r4, r5, r6, pc}
 80086a4:	0781      	lsls	r1, r0, #30
 80086a6:	bf58      	it	pl
 80086a8:	6963      	ldrpl	r3, [r4, #20]
 80086aa:	60a3      	str	r3, [r4, #8]
 80086ac:	e7f4      	b.n	8008698 <__swsetup_r+0xb0>
 80086ae:	2000      	movs	r0, #0
 80086b0:	e7f7      	b.n	80086a2 <__swsetup_r+0xba>
 80086b2:	bf00      	nop
 80086b4:	2000001c 	.word	0x2000001c
 80086b8:	08008c9c 	.word	0x08008c9c
 80086bc:	08008cbc 	.word	0x08008cbc
 80086c0:	08008c7c 	.word	0x08008c7c

080086c4 <_close_r>:
 80086c4:	b538      	push	{r3, r4, r5, lr}
 80086c6:	4d06      	ldr	r5, [pc, #24]	; (80086e0 <_close_r+0x1c>)
 80086c8:	2300      	movs	r3, #0
 80086ca:	4604      	mov	r4, r0
 80086cc:	4608      	mov	r0, r1
 80086ce:	602b      	str	r3, [r5, #0]
 80086d0:	f7fa f8db 	bl	800288a <_close>
 80086d4:	1c43      	adds	r3, r0, #1
 80086d6:	d102      	bne.n	80086de <_close_r+0x1a>
 80086d8:	682b      	ldr	r3, [r5, #0]
 80086da:	b103      	cbz	r3, 80086de <_close_r+0x1a>
 80086dc:	6023      	str	r3, [r4, #0]
 80086de:	bd38      	pop	{r3, r4, r5, pc}
 80086e0:	20000938 	.word	0x20000938

080086e4 <__sflush_r>:
 80086e4:	898a      	ldrh	r2, [r1, #12]
 80086e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086ea:	4605      	mov	r5, r0
 80086ec:	0710      	lsls	r0, r2, #28
 80086ee:	460c      	mov	r4, r1
 80086f0:	d458      	bmi.n	80087a4 <__sflush_r+0xc0>
 80086f2:	684b      	ldr	r3, [r1, #4]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	dc05      	bgt.n	8008704 <__sflush_r+0x20>
 80086f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	dc02      	bgt.n	8008704 <__sflush_r+0x20>
 80086fe:	2000      	movs	r0, #0
 8008700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008704:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008706:	2e00      	cmp	r6, #0
 8008708:	d0f9      	beq.n	80086fe <__sflush_r+0x1a>
 800870a:	2300      	movs	r3, #0
 800870c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008710:	682f      	ldr	r7, [r5, #0]
 8008712:	602b      	str	r3, [r5, #0]
 8008714:	d032      	beq.n	800877c <__sflush_r+0x98>
 8008716:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008718:	89a3      	ldrh	r3, [r4, #12]
 800871a:	075a      	lsls	r2, r3, #29
 800871c:	d505      	bpl.n	800872a <__sflush_r+0x46>
 800871e:	6863      	ldr	r3, [r4, #4]
 8008720:	1ac0      	subs	r0, r0, r3
 8008722:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008724:	b10b      	cbz	r3, 800872a <__sflush_r+0x46>
 8008726:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008728:	1ac0      	subs	r0, r0, r3
 800872a:	2300      	movs	r3, #0
 800872c:	4602      	mov	r2, r0
 800872e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008730:	6a21      	ldr	r1, [r4, #32]
 8008732:	4628      	mov	r0, r5
 8008734:	47b0      	blx	r6
 8008736:	1c43      	adds	r3, r0, #1
 8008738:	89a3      	ldrh	r3, [r4, #12]
 800873a:	d106      	bne.n	800874a <__sflush_r+0x66>
 800873c:	6829      	ldr	r1, [r5, #0]
 800873e:	291d      	cmp	r1, #29
 8008740:	d82c      	bhi.n	800879c <__sflush_r+0xb8>
 8008742:	4a2a      	ldr	r2, [pc, #168]	; (80087ec <__sflush_r+0x108>)
 8008744:	40ca      	lsrs	r2, r1
 8008746:	07d6      	lsls	r6, r2, #31
 8008748:	d528      	bpl.n	800879c <__sflush_r+0xb8>
 800874a:	2200      	movs	r2, #0
 800874c:	6062      	str	r2, [r4, #4]
 800874e:	04d9      	lsls	r1, r3, #19
 8008750:	6922      	ldr	r2, [r4, #16]
 8008752:	6022      	str	r2, [r4, #0]
 8008754:	d504      	bpl.n	8008760 <__sflush_r+0x7c>
 8008756:	1c42      	adds	r2, r0, #1
 8008758:	d101      	bne.n	800875e <__sflush_r+0x7a>
 800875a:	682b      	ldr	r3, [r5, #0]
 800875c:	b903      	cbnz	r3, 8008760 <__sflush_r+0x7c>
 800875e:	6560      	str	r0, [r4, #84]	; 0x54
 8008760:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008762:	602f      	str	r7, [r5, #0]
 8008764:	2900      	cmp	r1, #0
 8008766:	d0ca      	beq.n	80086fe <__sflush_r+0x1a>
 8008768:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800876c:	4299      	cmp	r1, r3
 800876e:	d002      	beq.n	8008776 <__sflush_r+0x92>
 8008770:	4628      	mov	r0, r5
 8008772:	f000 f923 	bl	80089bc <_free_r>
 8008776:	2000      	movs	r0, #0
 8008778:	6360      	str	r0, [r4, #52]	; 0x34
 800877a:	e7c1      	b.n	8008700 <__sflush_r+0x1c>
 800877c:	6a21      	ldr	r1, [r4, #32]
 800877e:	2301      	movs	r3, #1
 8008780:	4628      	mov	r0, r5
 8008782:	47b0      	blx	r6
 8008784:	1c41      	adds	r1, r0, #1
 8008786:	d1c7      	bne.n	8008718 <__sflush_r+0x34>
 8008788:	682b      	ldr	r3, [r5, #0]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d0c4      	beq.n	8008718 <__sflush_r+0x34>
 800878e:	2b1d      	cmp	r3, #29
 8008790:	d001      	beq.n	8008796 <__sflush_r+0xb2>
 8008792:	2b16      	cmp	r3, #22
 8008794:	d101      	bne.n	800879a <__sflush_r+0xb6>
 8008796:	602f      	str	r7, [r5, #0]
 8008798:	e7b1      	b.n	80086fe <__sflush_r+0x1a>
 800879a:	89a3      	ldrh	r3, [r4, #12]
 800879c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087a0:	81a3      	strh	r3, [r4, #12]
 80087a2:	e7ad      	b.n	8008700 <__sflush_r+0x1c>
 80087a4:	690f      	ldr	r7, [r1, #16]
 80087a6:	2f00      	cmp	r7, #0
 80087a8:	d0a9      	beq.n	80086fe <__sflush_r+0x1a>
 80087aa:	0793      	lsls	r3, r2, #30
 80087ac:	680e      	ldr	r6, [r1, #0]
 80087ae:	bf08      	it	eq
 80087b0:	694b      	ldreq	r3, [r1, #20]
 80087b2:	600f      	str	r7, [r1, #0]
 80087b4:	bf18      	it	ne
 80087b6:	2300      	movne	r3, #0
 80087b8:	eba6 0807 	sub.w	r8, r6, r7
 80087bc:	608b      	str	r3, [r1, #8]
 80087be:	f1b8 0f00 	cmp.w	r8, #0
 80087c2:	dd9c      	ble.n	80086fe <__sflush_r+0x1a>
 80087c4:	6a21      	ldr	r1, [r4, #32]
 80087c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80087c8:	4643      	mov	r3, r8
 80087ca:	463a      	mov	r2, r7
 80087cc:	4628      	mov	r0, r5
 80087ce:	47b0      	blx	r6
 80087d0:	2800      	cmp	r0, #0
 80087d2:	dc06      	bgt.n	80087e2 <__sflush_r+0xfe>
 80087d4:	89a3      	ldrh	r3, [r4, #12]
 80087d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087da:	81a3      	strh	r3, [r4, #12]
 80087dc:	f04f 30ff 	mov.w	r0, #4294967295
 80087e0:	e78e      	b.n	8008700 <__sflush_r+0x1c>
 80087e2:	4407      	add	r7, r0
 80087e4:	eba8 0800 	sub.w	r8, r8, r0
 80087e8:	e7e9      	b.n	80087be <__sflush_r+0xda>
 80087ea:	bf00      	nop
 80087ec:	20400001 	.word	0x20400001

080087f0 <_fflush_r>:
 80087f0:	b538      	push	{r3, r4, r5, lr}
 80087f2:	690b      	ldr	r3, [r1, #16]
 80087f4:	4605      	mov	r5, r0
 80087f6:	460c      	mov	r4, r1
 80087f8:	b913      	cbnz	r3, 8008800 <_fflush_r+0x10>
 80087fa:	2500      	movs	r5, #0
 80087fc:	4628      	mov	r0, r5
 80087fe:	bd38      	pop	{r3, r4, r5, pc}
 8008800:	b118      	cbz	r0, 800880a <_fflush_r+0x1a>
 8008802:	6983      	ldr	r3, [r0, #24]
 8008804:	b90b      	cbnz	r3, 800880a <_fflush_r+0x1a>
 8008806:	f7ff f8f3 	bl	80079f0 <__sinit>
 800880a:	4b14      	ldr	r3, [pc, #80]	; (800885c <_fflush_r+0x6c>)
 800880c:	429c      	cmp	r4, r3
 800880e:	d11b      	bne.n	8008848 <_fflush_r+0x58>
 8008810:	686c      	ldr	r4, [r5, #4]
 8008812:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d0ef      	beq.n	80087fa <_fflush_r+0xa>
 800881a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800881c:	07d0      	lsls	r0, r2, #31
 800881e:	d404      	bmi.n	800882a <_fflush_r+0x3a>
 8008820:	0599      	lsls	r1, r3, #22
 8008822:	d402      	bmi.n	800882a <_fflush_r+0x3a>
 8008824:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008826:	f7ff f981 	bl	8007b2c <__retarget_lock_acquire_recursive>
 800882a:	4628      	mov	r0, r5
 800882c:	4621      	mov	r1, r4
 800882e:	f7ff ff59 	bl	80086e4 <__sflush_r>
 8008832:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008834:	07da      	lsls	r2, r3, #31
 8008836:	4605      	mov	r5, r0
 8008838:	d4e0      	bmi.n	80087fc <_fflush_r+0xc>
 800883a:	89a3      	ldrh	r3, [r4, #12]
 800883c:	059b      	lsls	r3, r3, #22
 800883e:	d4dd      	bmi.n	80087fc <_fflush_r+0xc>
 8008840:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008842:	f7ff f974 	bl	8007b2e <__retarget_lock_release_recursive>
 8008846:	e7d9      	b.n	80087fc <_fflush_r+0xc>
 8008848:	4b05      	ldr	r3, [pc, #20]	; (8008860 <_fflush_r+0x70>)
 800884a:	429c      	cmp	r4, r3
 800884c:	d101      	bne.n	8008852 <_fflush_r+0x62>
 800884e:	68ac      	ldr	r4, [r5, #8]
 8008850:	e7df      	b.n	8008812 <_fflush_r+0x22>
 8008852:	4b04      	ldr	r3, [pc, #16]	; (8008864 <_fflush_r+0x74>)
 8008854:	429c      	cmp	r4, r3
 8008856:	bf08      	it	eq
 8008858:	68ec      	ldreq	r4, [r5, #12]
 800885a:	e7da      	b.n	8008812 <_fflush_r+0x22>
 800885c:	08008c9c 	.word	0x08008c9c
 8008860:	08008cbc 	.word	0x08008cbc
 8008864:	08008c7c 	.word	0x08008c7c

08008868 <_lseek_r>:
 8008868:	b538      	push	{r3, r4, r5, lr}
 800886a:	4d07      	ldr	r5, [pc, #28]	; (8008888 <_lseek_r+0x20>)
 800886c:	4604      	mov	r4, r0
 800886e:	4608      	mov	r0, r1
 8008870:	4611      	mov	r1, r2
 8008872:	2200      	movs	r2, #0
 8008874:	602a      	str	r2, [r5, #0]
 8008876:	461a      	mov	r2, r3
 8008878:	f7fa f82e 	bl	80028d8 <_lseek>
 800887c:	1c43      	adds	r3, r0, #1
 800887e:	d102      	bne.n	8008886 <_lseek_r+0x1e>
 8008880:	682b      	ldr	r3, [r5, #0]
 8008882:	b103      	cbz	r3, 8008886 <_lseek_r+0x1e>
 8008884:	6023      	str	r3, [r4, #0]
 8008886:	bd38      	pop	{r3, r4, r5, pc}
 8008888:	20000938 	.word	0x20000938

0800888c <__swhatbuf_r>:
 800888c:	b570      	push	{r4, r5, r6, lr}
 800888e:	460e      	mov	r6, r1
 8008890:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008894:	2900      	cmp	r1, #0
 8008896:	b096      	sub	sp, #88	; 0x58
 8008898:	4614      	mov	r4, r2
 800889a:	461d      	mov	r5, r3
 800889c:	da07      	bge.n	80088ae <__swhatbuf_r+0x22>
 800889e:	2300      	movs	r3, #0
 80088a0:	602b      	str	r3, [r5, #0]
 80088a2:	89b3      	ldrh	r3, [r6, #12]
 80088a4:	061a      	lsls	r2, r3, #24
 80088a6:	d410      	bmi.n	80088ca <__swhatbuf_r+0x3e>
 80088a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088ac:	e00e      	b.n	80088cc <__swhatbuf_r+0x40>
 80088ae:	466a      	mov	r2, sp
 80088b0:	f000 f90c 	bl	8008acc <_fstat_r>
 80088b4:	2800      	cmp	r0, #0
 80088b6:	dbf2      	blt.n	800889e <__swhatbuf_r+0x12>
 80088b8:	9a01      	ldr	r2, [sp, #4]
 80088ba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80088be:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80088c2:	425a      	negs	r2, r3
 80088c4:	415a      	adcs	r2, r3
 80088c6:	602a      	str	r2, [r5, #0]
 80088c8:	e7ee      	b.n	80088a8 <__swhatbuf_r+0x1c>
 80088ca:	2340      	movs	r3, #64	; 0x40
 80088cc:	2000      	movs	r0, #0
 80088ce:	6023      	str	r3, [r4, #0]
 80088d0:	b016      	add	sp, #88	; 0x58
 80088d2:	bd70      	pop	{r4, r5, r6, pc}

080088d4 <__smakebuf_r>:
 80088d4:	898b      	ldrh	r3, [r1, #12]
 80088d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80088d8:	079d      	lsls	r5, r3, #30
 80088da:	4606      	mov	r6, r0
 80088dc:	460c      	mov	r4, r1
 80088de:	d507      	bpl.n	80088f0 <__smakebuf_r+0x1c>
 80088e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80088e4:	6023      	str	r3, [r4, #0]
 80088e6:	6123      	str	r3, [r4, #16]
 80088e8:	2301      	movs	r3, #1
 80088ea:	6163      	str	r3, [r4, #20]
 80088ec:	b002      	add	sp, #8
 80088ee:	bd70      	pop	{r4, r5, r6, pc}
 80088f0:	ab01      	add	r3, sp, #4
 80088f2:	466a      	mov	r2, sp
 80088f4:	f7ff ffca 	bl	800888c <__swhatbuf_r>
 80088f8:	9900      	ldr	r1, [sp, #0]
 80088fa:	4605      	mov	r5, r0
 80088fc:	4630      	mov	r0, r6
 80088fe:	f7ff f917 	bl	8007b30 <_malloc_r>
 8008902:	b948      	cbnz	r0, 8008918 <__smakebuf_r+0x44>
 8008904:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008908:	059a      	lsls	r2, r3, #22
 800890a:	d4ef      	bmi.n	80088ec <__smakebuf_r+0x18>
 800890c:	f023 0303 	bic.w	r3, r3, #3
 8008910:	f043 0302 	orr.w	r3, r3, #2
 8008914:	81a3      	strh	r3, [r4, #12]
 8008916:	e7e3      	b.n	80088e0 <__smakebuf_r+0xc>
 8008918:	4b0d      	ldr	r3, [pc, #52]	; (8008950 <__smakebuf_r+0x7c>)
 800891a:	62b3      	str	r3, [r6, #40]	; 0x28
 800891c:	89a3      	ldrh	r3, [r4, #12]
 800891e:	6020      	str	r0, [r4, #0]
 8008920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008924:	81a3      	strh	r3, [r4, #12]
 8008926:	9b00      	ldr	r3, [sp, #0]
 8008928:	6163      	str	r3, [r4, #20]
 800892a:	9b01      	ldr	r3, [sp, #4]
 800892c:	6120      	str	r0, [r4, #16]
 800892e:	b15b      	cbz	r3, 8008948 <__smakebuf_r+0x74>
 8008930:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008934:	4630      	mov	r0, r6
 8008936:	f000 f8db 	bl	8008af0 <_isatty_r>
 800893a:	b128      	cbz	r0, 8008948 <__smakebuf_r+0x74>
 800893c:	89a3      	ldrh	r3, [r4, #12]
 800893e:	f023 0303 	bic.w	r3, r3, #3
 8008942:	f043 0301 	orr.w	r3, r3, #1
 8008946:	81a3      	strh	r3, [r4, #12]
 8008948:	89a0      	ldrh	r0, [r4, #12]
 800894a:	4305      	orrs	r5, r0
 800894c:	81a5      	strh	r5, [r4, #12]
 800894e:	e7cd      	b.n	80088ec <__smakebuf_r+0x18>
 8008950:	08007989 	.word	0x08007989

08008954 <memcpy>:
 8008954:	440a      	add	r2, r1
 8008956:	4291      	cmp	r1, r2
 8008958:	f100 33ff 	add.w	r3, r0, #4294967295
 800895c:	d100      	bne.n	8008960 <memcpy+0xc>
 800895e:	4770      	bx	lr
 8008960:	b510      	push	{r4, lr}
 8008962:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008966:	f803 4f01 	strb.w	r4, [r3, #1]!
 800896a:	4291      	cmp	r1, r2
 800896c:	d1f9      	bne.n	8008962 <memcpy+0xe>
 800896e:	bd10      	pop	{r4, pc}

08008970 <memmove>:
 8008970:	4288      	cmp	r0, r1
 8008972:	b510      	push	{r4, lr}
 8008974:	eb01 0402 	add.w	r4, r1, r2
 8008978:	d902      	bls.n	8008980 <memmove+0x10>
 800897a:	4284      	cmp	r4, r0
 800897c:	4623      	mov	r3, r4
 800897e:	d807      	bhi.n	8008990 <memmove+0x20>
 8008980:	1e43      	subs	r3, r0, #1
 8008982:	42a1      	cmp	r1, r4
 8008984:	d008      	beq.n	8008998 <memmove+0x28>
 8008986:	f811 2b01 	ldrb.w	r2, [r1], #1
 800898a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800898e:	e7f8      	b.n	8008982 <memmove+0x12>
 8008990:	4402      	add	r2, r0
 8008992:	4601      	mov	r1, r0
 8008994:	428a      	cmp	r2, r1
 8008996:	d100      	bne.n	800899a <memmove+0x2a>
 8008998:	bd10      	pop	{r4, pc}
 800899a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800899e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80089a2:	e7f7      	b.n	8008994 <memmove+0x24>

080089a4 <__malloc_lock>:
 80089a4:	4801      	ldr	r0, [pc, #4]	; (80089ac <__malloc_lock+0x8>)
 80089a6:	f7ff b8c1 	b.w	8007b2c <__retarget_lock_acquire_recursive>
 80089aa:	bf00      	nop
 80089ac:	20000930 	.word	0x20000930

080089b0 <__malloc_unlock>:
 80089b0:	4801      	ldr	r0, [pc, #4]	; (80089b8 <__malloc_unlock+0x8>)
 80089b2:	f7ff b8bc 	b.w	8007b2e <__retarget_lock_release_recursive>
 80089b6:	bf00      	nop
 80089b8:	20000930 	.word	0x20000930

080089bc <_free_r>:
 80089bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80089be:	2900      	cmp	r1, #0
 80089c0:	d048      	beq.n	8008a54 <_free_r+0x98>
 80089c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089c6:	9001      	str	r0, [sp, #4]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	f1a1 0404 	sub.w	r4, r1, #4
 80089ce:	bfb8      	it	lt
 80089d0:	18e4      	addlt	r4, r4, r3
 80089d2:	f7ff ffe7 	bl	80089a4 <__malloc_lock>
 80089d6:	4a20      	ldr	r2, [pc, #128]	; (8008a58 <_free_r+0x9c>)
 80089d8:	9801      	ldr	r0, [sp, #4]
 80089da:	6813      	ldr	r3, [r2, #0]
 80089dc:	4615      	mov	r5, r2
 80089de:	b933      	cbnz	r3, 80089ee <_free_r+0x32>
 80089e0:	6063      	str	r3, [r4, #4]
 80089e2:	6014      	str	r4, [r2, #0]
 80089e4:	b003      	add	sp, #12
 80089e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80089ea:	f7ff bfe1 	b.w	80089b0 <__malloc_unlock>
 80089ee:	42a3      	cmp	r3, r4
 80089f0:	d90b      	bls.n	8008a0a <_free_r+0x4e>
 80089f2:	6821      	ldr	r1, [r4, #0]
 80089f4:	1862      	adds	r2, r4, r1
 80089f6:	4293      	cmp	r3, r2
 80089f8:	bf04      	itt	eq
 80089fa:	681a      	ldreq	r2, [r3, #0]
 80089fc:	685b      	ldreq	r3, [r3, #4]
 80089fe:	6063      	str	r3, [r4, #4]
 8008a00:	bf04      	itt	eq
 8008a02:	1852      	addeq	r2, r2, r1
 8008a04:	6022      	streq	r2, [r4, #0]
 8008a06:	602c      	str	r4, [r5, #0]
 8008a08:	e7ec      	b.n	80089e4 <_free_r+0x28>
 8008a0a:	461a      	mov	r2, r3
 8008a0c:	685b      	ldr	r3, [r3, #4]
 8008a0e:	b10b      	cbz	r3, 8008a14 <_free_r+0x58>
 8008a10:	42a3      	cmp	r3, r4
 8008a12:	d9fa      	bls.n	8008a0a <_free_r+0x4e>
 8008a14:	6811      	ldr	r1, [r2, #0]
 8008a16:	1855      	adds	r5, r2, r1
 8008a18:	42a5      	cmp	r5, r4
 8008a1a:	d10b      	bne.n	8008a34 <_free_r+0x78>
 8008a1c:	6824      	ldr	r4, [r4, #0]
 8008a1e:	4421      	add	r1, r4
 8008a20:	1854      	adds	r4, r2, r1
 8008a22:	42a3      	cmp	r3, r4
 8008a24:	6011      	str	r1, [r2, #0]
 8008a26:	d1dd      	bne.n	80089e4 <_free_r+0x28>
 8008a28:	681c      	ldr	r4, [r3, #0]
 8008a2a:	685b      	ldr	r3, [r3, #4]
 8008a2c:	6053      	str	r3, [r2, #4]
 8008a2e:	4421      	add	r1, r4
 8008a30:	6011      	str	r1, [r2, #0]
 8008a32:	e7d7      	b.n	80089e4 <_free_r+0x28>
 8008a34:	d902      	bls.n	8008a3c <_free_r+0x80>
 8008a36:	230c      	movs	r3, #12
 8008a38:	6003      	str	r3, [r0, #0]
 8008a3a:	e7d3      	b.n	80089e4 <_free_r+0x28>
 8008a3c:	6825      	ldr	r5, [r4, #0]
 8008a3e:	1961      	adds	r1, r4, r5
 8008a40:	428b      	cmp	r3, r1
 8008a42:	bf04      	itt	eq
 8008a44:	6819      	ldreq	r1, [r3, #0]
 8008a46:	685b      	ldreq	r3, [r3, #4]
 8008a48:	6063      	str	r3, [r4, #4]
 8008a4a:	bf04      	itt	eq
 8008a4c:	1949      	addeq	r1, r1, r5
 8008a4e:	6021      	streq	r1, [r4, #0]
 8008a50:	6054      	str	r4, [r2, #4]
 8008a52:	e7c7      	b.n	80089e4 <_free_r+0x28>
 8008a54:	b003      	add	sp, #12
 8008a56:	bd30      	pop	{r4, r5, pc}
 8008a58:	200000c4 	.word	0x200000c4

08008a5c <_realloc_r>:
 8008a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a5e:	4607      	mov	r7, r0
 8008a60:	4614      	mov	r4, r2
 8008a62:	460e      	mov	r6, r1
 8008a64:	b921      	cbnz	r1, 8008a70 <_realloc_r+0x14>
 8008a66:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008a6a:	4611      	mov	r1, r2
 8008a6c:	f7ff b860 	b.w	8007b30 <_malloc_r>
 8008a70:	b922      	cbnz	r2, 8008a7c <_realloc_r+0x20>
 8008a72:	f7ff ffa3 	bl	80089bc <_free_r>
 8008a76:	4625      	mov	r5, r4
 8008a78:	4628      	mov	r0, r5
 8008a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a7c:	f000 f848 	bl	8008b10 <_malloc_usable_size_r>
 8008a80:	42a0      	cmp	r0, r4
 8008a82:	d20f      	bcs.n	8008aa4 <_realloc_r+0x48>
 8008a84:	4621      	mov	r1, r4
 8008a86:	4638      	mov	r0, r7
 8008a88:	f7ff f852 	bl	8007b30 <_malloc_r>
 8008a8c:	4605      	mov	r5, r0
 8008a8e:	2800      	cmp	r0, #0
 8008a90:	d0f2      	beq.n	8008a78 <_realloc_r+0x1c>
 8008a92:	4631      	mov	r1, r6
 8008a94:	4622      	mov	r2, r4
 8008a96:	f7ff ff5d 	bl	8008954 <memcpy>
 8008a9a:	4631      	mov	r1, r6
 8008a9c:	4638      	mov	r0, r7
 8008a9e:	f7ff ff8d 	bl	80089bc <_free_r>
 8008aa2:	e7e9      	b.n	8008a78 <_realloc_r+0x1c>
 8008aa4:	4635      	mov	r5, r6
 8008aa6:	e7e7      	b.n	8008a78 <_realloc_r+0x1c>

08008aa8 <_read_r>:
 8008aa8:	b538      	push	{r3, r4, r5, lr}
 8008aaa:	4d07      	ldr	r5, [pc, #28]	; (8008ac8 <_read_r+0x20>)
 8008aac:	4604      	mov	r4, r0
 8008aae:	4608      	mov	r0, r1
 8008ab0:	4611      	mov	r1, r2
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	602a      	str	r2, [r5, #0]
 8008ab6:	461a      	mov	r2, r3
 8008ab8:	f7f9 feae 	bl	8002818 <_read>
 8008abc:	1c43      	adds	r3, r0, #1
 8008abe:	d102      	bne.n	8008ac6 <_read_r+0x1e>
 8008ac0:	682b      	ldr	r3, [r5, #0]
 8008ac2:	b103      	cbz	r3, 8008ac6 <_read_r+0x1e>
 8008ac4:	6023      	str	r3, [r4, #0]
 8008ac6:	bd38      	pop	{r3, r4, r5, pc}
 8008ac8:	20000938 	.word	0x20000938

08008acc <_fstat_r>:
 8008acc:	b538      	push	{r3, r4, r5, lr}
 8008ace:	4d07      	ldr	r5, [pc, #28]	; (8008aec <_fstat_r+0x20>)
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	4604      	mov	r4, r0
 8008ad4:	4608      	mov	r0, r1
 8008ad6:	4611      	mov	r1, r2
 8008ad8:	602b      	str	r3, [r5, #0]
 8008ada:	f7f9 fee2 	bl	80028a2 <_fstat>
 8008ade:	1c43      	adds	r3, r0, #1
 8008ae0:	d102      	bne.n	8008ae8 <_fstat_r+0x1c>
 8008ae2:	682b      	ldr	r3, [r5, #0]
 8008ae4:	b103      	cbz	r3, 8008ae8 <_fstat_r+0x1c>
 8008ae6:	6023      	str	r3, [r4, #0]
 8008ae8:	bd38      	pop	{r3, r4, r5, pc}
 8008aea:	bf00      	nop
 8008aec:	20000938 	.word	0x20000938

08008af0 <_isatty_r>:
 8008af0:	b538      	push	{r3, r4, r5, lr}
 8008af2:	4d06      	ldr	r5, [pc, #24]	; (8008b0c <_isatty_r+0x1c>)
 8008af4:	2300      	movs	r3, #0
 8008af6:	4604      	mov	r4, r0
 8008af8:	4608      	mov	r0, r1
 8008afa:	602b      	str	r3, [r5, #0]
 8008afc:	f7f9 fee1 	bl	80028c2 <_isatty>
 8008b00:	1c43      	adds	r3, r0, #1
 8008b02:	d102      	bne.n	8008b0a <_isatty_r+0x1a>
 8008b04:	682b      	ldr	r3, [r5, #0]
 8008b06:	b103      	cbz	r3, 8008b0a <_isatty_r+0x1a>
 8008b08:	6023      	str	r3, [r4, #0]
 8008b0a:	bd38      	pop	{r3, r4, r5, pc}
 8008b0c:	20000938 	.word	0x20000938

08008b10 <_malloc_usable_size_r>:
 8008b10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b14:	1f18      	subs	r0, r3, #4
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	bfbc      	itt	lt
 8008b1a:	580b      	ldrlt	r3, [r1, r0]
 8008b1c:	18c0      	addlt	r0, r0, r3
 8008b1e:	4770      	bx	lr

08008b20 <_init>:
 8008b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b22:	bf00      	nop
 8008b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b26:	bc08      	pop	{r3}
 8008b28:	469e      	mov	lr, r3
 8008b2a:	4770      	bx	lr

08008b2c <_fini>:
 8008b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b2e:	bf00      	nop
 8008b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b32:	bc08      	pop	{r3}
 8008b34:	469e      	mov	lr, r3
 8008b36:	4770      	bx	lr
